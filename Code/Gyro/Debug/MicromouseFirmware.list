
MicromouseFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08006458  08006458  00016458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064c4  080064c4  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  080064c4  080064c4  000164c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064cc  080064cc  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064cc  080064cc  000164cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064d0  080064d0  000164d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080064d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          00003288  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200032f4  200032f4  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000feb9  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000021dc  00000000  00000000  0002ff98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f58  00000000  00000000  00032178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c00  00000000  00000000  000330d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021b09  00000000  00000000  00033cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00012744  00000000  00000000  000557d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d098d  00000000  00000000  00067f1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000049d8  00000000  00000000  001388ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000091  00000000  00000000  0013d284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006440 	.word	0x08006440

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08006440 	.word	0x08006440

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b970 	b.w	8000da4 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9e08      	ldr	r6, [sp, #32]
 8000ae2:	460d      	mov	r5, r1
 8000ae4:	4604      	mov	r4, r0
 8000ae6:	460f      	mov	r7, r1
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d14a      	bne.n	8000b82 <__udivmoddi4+0xa6>
 8000aec:	428a      	cmp	r2, r1
 8000aee:	4694      	mov	ip, r2
 8000af0:	d965      	bls.n	8000bbe <__udivmoddi4+0xe2>
 8000af2:	fab2 f382 	clz	r3, r2
 8000af6:	b143      	cbz	r3, 8000b0a <__udivmoddi4+0x2e>
 8000af8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000afc:	f1c3 0220 	rsb	r2, r3, #32
 8000b00:	409f      	lsls	r7, r3
 8000b02:	fa20 f202 	lsr.w	r2, r0, r2
 8000b06:	4317      	orrs	r7, r2
 8000b08:	409c      	lsls	r4, r3
 8000b0a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b0e:	fa1f f58c 	uxth.w	r5, ip
 8000b12:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b16:	0c22      	lsrs	r2, r4, #16
 8000b18:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b1c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b20:	fb01 f005 	mul.w	r0, r1, r5
 8000b24:	4290      	cmp	r0, r2
 8000b26:	d90a      	bls.n	8000b3e <__udivmoddi4+0x62>
 8000b28:	eb1c 0202 	adds.w	r2, ip, r2
 8000b2c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b30:	f080 811c 	bcs.w	8000d6c <__udivmoddi4+0x290>
 8000b34:	4290      	cmp	r0, r2
 8000b36:	f240 8119 	bls.w	8000d6c <__udivmoddi4+0x290>
 8000b3a:	3902      	subs	r1, #2
 8000b3c:	4462      	add	r2, ip
 8000b3e:	1a12      	subs	r2, r2, r0
 8000b40:	b2a4      	uxth	r4, r4
 8000b42:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b46:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b4a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b4e:	fb00 f505 	mul.w	r5, r0, r5
 8000b52:	42a5      	cmp	r5, r4
 8000b54:	d90a      	bls.n	8000b6c <__udivmoddi4+0x90>
 8000b56:	eb1c 0404 	adds.w	r4, ip, r4
 8000b5a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b5e:	f080 8107 	bcs.w	8000d70 <__udivmoddi4+0x294>
 8000b62:	42a5      	cmp	r5, r4
 8000b64:	f240 8104 	bls.w	8000d70 <__udivmoddi4+0x294>
 8000b68:	4464      	add	r4, ip
 8000b6a:	3802      	subs	r0, #2
 8000b6c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b70:	1b64      	subs	r4, r4, r5
 8000b72:	2100      	movs	r1, #0
 8000b74:	b11e      	cbz	r6, 8000b7e <__udivmoddi4+0xa2>
 8000b76:	40dc      	lsrs	r4, r3
 8000b78:	2300      	movs	r3, #0
 8000b7a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d908      	bls.n	8000b98 <__udivmoddi4+0xbc>
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	f000 80ed 	beq.w	8000d66 <__udivmoddi4+0x28a>
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b92:	4608      	mov	r0, r1
 8000b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b98:	fab3 f183 	clz	r1, r3
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	d149      	bne.n	8000c34 <__udivmoddi4+0x158>
 8000ba0:	42ab      	cmp	r3, r5
 8000ba2:	d302      	bcc.n	8000baa <__udivmoddi4+0xce>
 8000ba4:	4282      	cmp	r2, r0
 8000ba6:	f200 80f8 	bhi.w	8000d9a <__udivmoddi4+0x2be>
 8000baa:	1a84      	subs	r4, r0, r2
 8000bac:	eb65 0203 	sbc.w	r2, r5, r3
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	4617      	mov	r7, r2
 8000bb4:	2e00      	cmp	r6, #0
 8000bb6:	d0e2      	beq.n	8000b7e <__udivmoddi4+0xa2>
 8000bb8:	e9c6 4700 	strd	r4, r7, [r6]
 8000bbc:	e7df      	b.n	8000b7e <__udivmoddi4+0xa2>
 8000bbe:	b902      	cbnz	r2, 8000bc2 <__udivmoddi4+0xe6>
 8000bc0:	deff      	udf	#255	; 0xff
 8000bc2:	fab2 f382 	clz	r3, r2
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f040 8090 	bne.w	8000cec <__udivmoddi4+0x210>
 8000bcc:	1a8a      	subs	r2, r1, r2
 8000bce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bd2:	fa1f fe8c 	uxth.w	lr, ip
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bdc:	fb07 2015 	mls	r0, r7, r5, r2
 8000be0:	0c22      	lsrs	r2, r4, #16
 8000be2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000be6:	fb0e f005 	mul.w	r0, lr, r5
 8000bea:	4290      	cmp	r0, r2
 8000bec:	d908      	bls.n	8000c00 <__udivmoddi4+0x124>
 8000bee:	eb1c 0202 	adds.w	r2, ip, r2
 8000bf2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0x122>
 8000bf8:	4290      	cmp	r0, r2
 8000bfa:	f200 80cb 	bhi.w	8000d94 <__udivmoddi4+0x2b8>
 8000bfe:	4645      	mov	r5, r8
 8000c00:	1a12      	subs	r2, r2, r0
 8000c02:	b2a4      	uxth	r4, r4
 8000c04:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c08:	fb07 2210 	mls	r2, r7, r0, r2
 8000c0c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c10:	fb0e fe00 	mul.w	lr, lr, r0
 8000c14:	45a6      	cmp	lr, r4
 8000c16:	d908      	bls.n	8000c2a <__udivmoddi4+0x14e>
 8000c18:	eb1c 0404 	adds.w	r4, ip, r4
 8000c1c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c20:	d202      	bcs.n	8000c28 <__udivmoddi4+0x14c>
 8000c22:	45a6      	cmp	lr, r4
 8000c24:	f200 80bb 	bhi.w	8000d9e <__udivmoddi4+0x2c2>
 8000c28:	4610      	mov	r0, r2
 8000c2a:	eba4 040e 	sub.w	r4, r4, lr
 8000c2e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c32:	e79f      	b.n	8000b74 <__udivmoddi4+0x98>
 8000c34:	f1c1 0720 	rsb	r7, r1, #32
 8000c38:	408b      	lsls	r3, r1
 8000c3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c42:	fa05 f401 	lsl.w	r4, r5, r1
 8000c46:	fa20 f307 	lsr.w	r3, r0, r7
 8000c4a:	40fd      	lsrs	r5, r7
 8000c4c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c50:	4323      	orrs	r3, r4
 8000c52:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c56:	fa1f fe8c 	uxth.w	lr, ip
 8000c5a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c5e:	0c1c      	lsrs	r4, r3, #16
 8000c60:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c64:	fb08 f50e 	mul.w	r5, r8, lr
 8000c68:	42a5      	cmp	r5, r4
 8000c6a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c6e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c72:	d90b      	bls.n	8000c8c <__udivmoddi4+0x1b0>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c7c:	f080 8088 	bcs.w	8000d90 <__udivmoddi4+0x2b4>
 8000c80:	42a5      	cmp	r5, r4
 8000c82:	f240 8085 	bls.w	8000d90 <__udivmoddi4+0x2b4>
 8000c86:	f1a8 0802 	sub.w	r8, r8, #2
 8000c8a:	4464      	add	r4, ip
 8000c8c:	1b64      	subs	r4, r4, r5
 8000c8e:	b29d      	uxth	r5, r3
 8000c90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c94:	fb09 4413 	mls	r4, r9, r3, r4
 8000c98:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c9c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ca0:	45a6      	cmp	lr, r4
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x1da>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000cac:	d26c      	bcs.n	8000d88 <__udivmoddi4+0x2ac>
 8000cae:	45a6      	cmp	lr, r4
 8000cb0:	d96a      	bls.n	8000d88 <__udivmoddi4+0x2ac>
 8000cb2:	3b02      	subs	r3, #2
 8000cb4:	4464      	add	r4, ip
 8000cb6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cba:	fba3 9502 	umull	r9, r5, r3, r2
 8000cbe:	eba4 040e 	sub.w	r4, r4, lr
 8000cc2:	42ac      	cmp	r4, r5
 8000cc4:	46c8      	mov	r8, r9
 8000cc6:	46ae      	mov	lr, r5
 8000cc8:	d356      	bcc.n	8000d78 <__udivmoddi4+0x29c>
 8000cca:	d053      	beq.n	8000d74 <__udivmoddi4+0x298>
 8000ccc:	b156      	cbz	r6, 8000ce4 <__udivmoddi4+0x208>
 8000cce:	ebb0 0208 	subs.w	r2, r0, r8
 8000cd2:	eb64 040e 	sbc.w	r4, r4, lr
 8000cd6:	fa04 f707 	lsl.w	r7, r4, r7
 8000cda:	40ca      	lsrs	r2, r1
 8000cdc:	40cc      	lsrs	r4, r1
 8000cde:	4317      	orrs	r7, r2
 8000ce0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cec:	f1c3 0120 	rsb	r1, r3, #32
 8000cf0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cf4:	fa20 f201 	lsr.w	r2, r0, r1
 8000cf8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cfc:	409d      	lsls	r5, r3
 8000cfe:	432a      	orrs	r2, r5
 8000d00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d04:	fa1f fe8c 	uxth.w	lr, ip
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d10:	0c11      	lsrs	r1, r2, #16
 8000d12:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d16:	fb00 f50e 	mul.w	r5, r0, lr
 8000d1a:	428d      	cmp	r5, r1
 8000d1c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x258>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d2a:	d22f      	bcs.n	8000d8c <__udivmoddi4+0x2b0>
 8000d2c:	428d      	cmp	r5, r1
 8000d2e:	d92d      	bls.n	8000d8c <__udivmoddi4+0x2b0>
 8000d30:	3802      	subs	r0, #2
 8000d32:	4461      	add	r1, ip
 8000d34:	1b49      	subs	r1, r1, r5
 8000d36:	b292      	uxth	r2, r2
 8000d38:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d3c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d44:	fb05 f10e 	mul.w	r1, r5, lr
 8000d48:	4291      	cmp	r1, r2
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x282>
 8000d4c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d50:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d54:	d216      	bcs.n	8000d84 <__udivmoddi4+0x2a8>
 8000d56:	4291      	cmp	r1, r2
 8000d58:	d914      	bls.n	8000d84 <__udivmoddi4+0x2a8>
 8000d5a:	3d02      	subs	r5, #2
 8000d5c:	4462      	add	r2, ip
 8000d5e:	1a52      	subs	r2, r2, r1
 8000d60:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d64:	e738      	b.n	8000bd8 <__udivmoddi4+0xfc>
 8000d66:	4631      	mov	r1, r6
 8000d68:	4630      	mov	r0, r6
 8000d6a:	e708      	b.n	8000b7e <__udivmoddi4+0xa2>
 8000d6c:	4639      	mov	r1, r7
 8000d6e:	e6e6      	b.n	8000b3e <__udivmoddi4+0x62>
 8000d70:	4610      	mov	r0, r2
 8000d72:	e6fb      	b.n	8000b6c <__udivmoddi4+0x90>
 8000d74:	4548      	cmp	r0, r9
 8000d76:	d2a9      	bcs.n	8000ccc <__udivmoddi4+0x1f0>
 8000d78:	ebb9 0802 	subs.w	r8, r9, r2
 8000d7c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d80:	3b01      	subs	r3, #1
 8000d82:	e7a3      	b.n	8000ccc <__udivmoddi4+0x1f0>
 8000d84:	4645      	mov	r5, r8
 8000d86:	e7ea      	b.n	8000d5e <__udivmoddi4+0x282>
 8000d88:	462b      	mov	r3, r5
 8000d8a:	e794      	b.n	8000cb6 <__udivmoddi4+0x1da>
 8000d8c:	4640      	mov	r0, r8
 8000d8e:	e7d1      	b.n	8000d34 <__udivmoddi4+0x258>
 8000d90:	46d0      	mov	r8, sl
 8000d92:	e77b      	b.n	8000c8c <__udivmoddi4+0x1b0>
 8000d94:	3d02      	subs	r5, #2
 8000d96:	4462      	add	r2, ip
 8000d98:	e732      	b.n	8000c00 <__udivmoddi4+0x124>
 8000d9a:	4608      	mov	r0, r1
 8000d9c:	e70a      	b.n	8000bb4 <__udivmoddi4+0xd8>
 8000d9e:	4464      	add	r4, ip
 8000da0:	3802      	subs	r0, #2
 8000da2:	e742      	b.n	8000c2a <__udivmoddi4+0x14e>

08000da4 <__aeabi_idiv0>:
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <L3GD20_Init>:
uint32_t currentTime = 0;
int ss;


void L3GD20_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,GPIO_PIN_RESET);
 8000dac:	2200      	movs	r2, #0
 8000dae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000db2:	485c      	ldr	r0, [pc, #368]	; (8000f24 <L3GD20_Init+0x17c>)
 8000db4:	f002 f8d0 	bl	8002f58 <HAL_GPIO_WritePin>
	spiTxBuf[0]=0x0F;
 8000db8:	4b5b      	ldr	r3, [pc, #364]	; (8000f28 <L3GD20_Init+0x180>)
 8000dba:	220f      	movs	r2, #15
 8000dbc:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1,spiTxBuf,1,50);
 8000dbe:	2332      	movs	r3, #50	; 0x32
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	4959      	ldr	r1, [pc, #356]	; (8000f28 <L3GD20_Init+0x180>)
 8000dc4:	4859      	ldr	r0, [pc, #356]	; (8000f2c <L3GD20_Init+0x184>)
 8000dc6:	f002 fddc 	bl	8003982 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1,&spiRxBuf[1],1,50);
 8000dca:	2332      	movs	r3, #50	; 0x32
 8000dcc:	2201      	movs	r2, #1
 8000dce:	4958      	ldr	r1, [pc, #352]	; (8000f30 <L3GD20_Init+0x188>)
 8000dd0:	4856      	ldr	r0, [pc, #344]	; (8000f2c <L3GD20_Init+0x184>)
 8000dd2:	f002 ff12 	bl	8003bfa <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,GPIO_PIN_SET);
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ddc:	4851      	ldr	r0, [pc, #324]	; (8000f24 <L3GD20_Init+0x17c>)
 8000dde:	f002 f8bb 	bl	8002f58 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,GPIO_PIN_SET);
 8000de2:	2201      	movs	r2, #1
 8000de4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000de8:	484e      	ldr	r0, [pc, #312]	; (8000f24 <L3GD20_Init+0x17c>)
 8000dea:	f002 f8b5 	bl	8002f58 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000dee:	2014      	movs	r0, #20
 8000df0:	f001 fbaa 	bl	8002548 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,GPIO_PIN_RESET);
 8000df4:	2200      	movs	r2, #0
 8000df6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dfa:	484a      	ldr	r0, [pc, #296]	; (8000f24 <L3GD20_Init+0x17c>)
 8000dfc:	f002 f8ac 	bl	8002f58 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000e00:	2014      	movs	r0, #20
 8000e02:	f001 fba1 	bl	8002548 <HAL_Delay>
	spiTxBuf[0]=0x20;
 8000e06:	4b48      	ldr	r3, [pc, #288]	; (8000f28 <L3GD20_Init+0x180>)
 8000e08:	2220      	movs	r2, #32
 8000e0a:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0xff;
 8000e0c:	4b46      	ldr	r3, [pc, #280]	; (8000f28 <L3GD20_Init+0x180>)
 8000e0e:	22ff      	movs	r2, #255	; 0xff
 8000e10:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi1,spiTxBuf,2,50);
 8000e12:	2332      	movs	r3, #50	; 0x32
 8000e14:	2202      	movs	r2, #2
 8000e16:	4944      	ldr	r1, [pc, #272]	; (8000f28 <L3GD20_Init+0x180>)
 8000e18:	4844      	ldr	r0, [pc, #272]	; (8000f2c <L3GD20_Init+0x184>)
 8000e1a:	f002 fdb2 	bl	8003982 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,GPIO_PIN_SET);
 8000e1e:	2201      	movs	r2, #1
 8000e20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e24:	483f      	ldr	r0, [pc, #252]	; (8000f24 <L3GD20_Init+0x17c>)
 8000e26:	f002 f897 	bl	8002f58 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000e2a:	2014      	movs	r0, #20
 8000e2c:	f001 fb8c 	bl	8002548 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,GPIO_PIN_RESET);
 8000e30:	2200      	movs	r2, #0
 8000e32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e36:	483b      	ldr	r0, [pc, #236]	; (8000f24 <L3GD20_Init+0x17c>)
 8000e38:	f002 f88e 	bl	8002f58 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000e3c:	2014      	movs	r0, #20
 8000e3e:	f001 fb83 	bl	8002548 <HAL_Delay>
	spiTxBuf[0]=0x21;
 8000e42:	4b39      	ldr	r3, [pc, #228]	; (8000f28 <L3GD20_Init+0x180>)
 8000e44:	2221      	movs	r2, #33	; 0x21
 8000e46:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x00;
 8000e48:	4b37      	ldr	r3, [pc, #220]	; (8000f28 <L3GD20_Init+0x180>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi1,spiTxBuf,2,50);
 8000e4e:	2332      	movs	r3, #50	; 0x32
 8000e50:	2202      	movs	r2, #2
 8000e52:	4935      	ldr	r1, [pc, #212]	; (8000f28 <L3GD20_Init+0x180>)
 8000e54:	4835      	ldr	r0, [pc, #212]	; (8000f2c <L3GD20_Init+0x184>)
 8000e56:	f002 fd94 	bl	8003982 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,GPIO_PIN_SET);
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e60:	4830      	ldr	r0, [pc, #192]	; (8000f24 <L3GD20_Init+0x17c>)
 8000e62:	f002 f879 	bl	8002f58 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000e66:	2014      	movs	r0, #20
 8000e68:	f001 fb6e 	bl	8002548 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,GPIO_PIN_RESET);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e72:	482c      	ldr	r0, [pc, #176]	; (8000f24 <L3GD20_Init+0x17c>)
 8000e74:	f002 f870 	bl	8002f58 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000e78:	2014      	movs	r0, #20
 8000e7a:	f001 fb65 	bl	8002548 <HAL_Delay>
	spiTxBuf[0]=0x22;
 8000e7e:	4b2a      	ldr	r3, [pc, #168]	; (8000f28 <L3GD20_Init+0x180>)
 8000e80:	2222      	movs	r2, #34	; 0x22
 8000e82:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x00;
 8000e84:	4b28      	ldr	r3, [pc, #160]	; (8000f28 <L3GD20_Init+0x180>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi1,spiTxBuf,2,50);
 8000e8a:	2332      	movs	r3, #50	; 0x32
 8000e8c:	2202      	movs	r2, #2
 8000e8e:	4926      	ldr	r1, [pc, #152]	; (8000f28 <L3GD20_Init+0x180>)
 8000e90:	4826      	ldr	r0, [pc, #152]	; (8000f2c <L3GD20_Init+0x184>)
 8000e92:	f002 fd76 	bl	8003982 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,GPIO_PIN_SET);
 8000e96:	2201      	movs	r2, #1
 8000e98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e9c:	4821      	ldr	r0, [pc, #132]	; (8000f24 <L3GD20_Init+0x17c>)
 8000e9e:	f002 f85b 	bl	8002f58 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000ea2:	2014      	movs	r0, #20
 8000ea4:	f001 fb50 	bl	8002548 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,GPIO_PIN_RESET);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eae:	481d      	ldr	r0, [pc, #116]	; (8000f24 <L3GD20_Init+0x17c>)
 8000eb0:	f002 f852 	bl	8002f58 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000eb4:	2014      	movs	r0, #20
 8000eb6:	f001 fb47 	bl	8002548 <HAL_Delay>
	spiTxBuf[0]=0x23;
 8000eba:	4b1b      	ldr	r3, [pc, #108]	; (8000f28 <L3GD20_Init+0x180>)
 8000ebc:	2223      	movs	r2, #35	; 0x23
 8000ebe:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x20;
 8000ec0:	4b19      	ldr	r3, [pc, #100]	; (8000f28 <L3GD20_Init+0x180>)
 8000ec2:	2220      	movs	r2, #32
 8000ec4:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi1,spiTxBuf,2,50);
 8000ec6:	2332      	movs	r3, #50	; 0x32
 8000ec8:	2202      	movs	r2, #2
 8000eca:	4917      	ldr	r1, [pc, #92]	; (8000f28 <L3GD20_Init+0x180>)
 8000ecc:	4817      	ldr	r0, [pc, #92]	; (8000f2c <L3GD20_Init+0x184>)
 8000ece:	f002 fd58 	bl	8003982 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,GPIO_PIN_SET);
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ed8:	4812      	ldr	r0, [pc, #72]	; (8000f24 <L3GD20_Init+0x17c>)
 8000eda:	f002 f83d 	bl	8002f58 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000ede:	2014      	movs	r0, #20
 8000ee0:	f001 fb32 	bl	8002548 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,GPIO_PIN_RESET);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eea:	480e      	ldr	r0, [pc, #56]	; (8000f24 <L3GD20_Init+0x17c>)
 8000eec:	f002 f834 	bl	8002f58 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000ef0:	2014      	movs	r0, #20
 8000ef2:	f001 fb29 	bl	8002548 <HAL_Delay>
	spiTxBuf[0]=0x24;
 8000ef6:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <L3GD20_Init+0x180>)
 8000ef8:	2224      	movs	r2, #36	; 0x24
 8000efa:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x10;
 8000efc:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <L3GD20_Init+0x180>)
 8000efe:	2210      	movs	r2, #16
 8000f00:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi1,spiTxBuf,2,50);
 8000f02:	2332      	movs	r3, #50	; 0x32
 8000f04:	2202      	movs	r2, #2
 8000f06:	4908      	ldr	r1, [pc, #32]	; (8000f28 <L3GD20_Init+0x180>)
 8000f08:	4808      	ldr	r0, [pc, #32]	; (8000f2c <L3GD20_Init+0x184>)
 8000f0a:	f002 fd3a 	bl	8003982 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,GPIO_PIN_SET);
 8000f0e:	2201      	movs	r2, #1
 8000f10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f14:	4803      	ldr	r0, [pc, #12]	; (8000f24 <L3GD20_Init+0x17c>)
 8000f16:	f002 f81f 	bl	8002f58 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000f1a:	2014      	movs	r0, #20
 8000f1c:	f001 fb14 	bl	8002548 <HAL_Delay>

}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40020800 	.word	0x40020800
 8000f28:	20002fb8 	.word	0x20002fb8
 8000f2c:	20003018 	.word	0x20003018
 8000f30:	20002fbd 	.word	0x20002fbd

08000f34 <L3GD20_loop>:

void L3GD20_loop(void)
{
 8000f34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f38:	b098      	sub	sp, #96	; 0x60
 8000f3a:	af00      	add	r7, sp, #0
		volatile int16_t Raw_x=0;
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	f8a7 1046 	strh.w	r1, [r7, #70]	; 0x46
		volatile int16_t Raw_y=0;
 8000f42:	2100      	movs	r1, #0
 8000f44:	f8a7 1044 	strh.w	r1, [r7, #68]	; 0x44
		volatile int16_t Raw_z=0;
 8000f48:	2100      	movs	r1, #0
 8000f4a:	f8a7 1042 	strh.w	r1, [r7, #66]	; 0x42



		int16_t averageWindow_X[AVERAGE_WINDOW_SIZE] = {0};
 8000f4e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000f52:	2000      	movs	r0, #0
 8000f54:	6008      	str	r0, [r1, #0]
 8000f56:	6048      	str	r0, [r1, #4]
 8000f58:	6088      	str	r0, [r1, #8]
 8000f5a:	60c8      	str	r0, [r1, #12]
 8000f5c:	6108      	str	r0, [r1, #16]
		int16_t averageWindow_Y[AVERAGE_WINDOW_SIZE] = {0};
 8000f5e:	f107 0118 	add.w	r1, r7, #24
 8000f62:	2000      	movs	r0, #0
 8000f64:	6008      	str	r0, [r1, #0]
 8000f66:	6048      	str	r0, [r1, #4]
 8000f68:	6088      	str	r0, [r1, #8]
 8000f6a:	60c8      	str	r0, [r1, #12]
 8000f6c:	6108      	str	r0, [r1, #16]
		int16_t averageWindow_Z[AVERAGE_WINDOW_SIZE] = {0};
 8000f6e:	1d39      	adds	r1, r7, #4
 8000f70:	2000      	movs	r0, #0
 8000f72:	6008      	str	r0, [r1, #0]
 8000f74:	6048      	str	r0, [r1, #4]
 8000f76:	6088      	str	r0, [r1, #8]
 8000f78:	60c8      	str	r0, [r1, #12]
 8000f7a:	6108      	str	r0, [r1, #16]

		uint32_t windowPosition = 0;
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	65f9      	str	r1, [r7, #92]	; 0x5c
		int32_t tempSum_X = 0;
 8000f80:	2100      	movs	r1, #0
 8000f82:	65b9      	str	r1, [r7, #88]	; 0x58
		int32_t tempSum_Y = 0;
 8000f84:	2100      	movs	r1, #0
 8000f86:	6579      	str	r1, [r7, #84]	; 0x54
		int32_t tempSum_Z = 0;
 8000f88:	2100      	movs	r1, #0
 8000f8a:	6539      	str	r1, [r7, #80]	; 0x50

		currentTime = __HAL_TIM_GET_COUNTER(&htim2);
 8000f8c:	4988      	ldr	r1, [pc, #544]	; (80011b0 <L3GD20_loop+0x27c>)
 8000f8e:	6809      	ldr	r1, [r1, #0]
 8000f90:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8000f92:	4888      	ldr	r0, [pc, #544]	; (80011b4 <L3GD20_loop+0x280>)
 8000f94:	6001      	str	r1, [r0, #0]

		if(currentTime>=previousTime)
 8000f96:	4987      	ldr	r1, [pc, #540]	; (80011b4 <L3GD20_loop+0x280>)
 8000f98:	6808      	ldr	r0, [r1, #0]
 8000f9a:	4987      	ldr	r1, [pc, #540]	; (80011b8 <L3GD20_loop+0x284>)
 8000f9c:	6809      	ldr	r1, [r1, #0]
 8000f9e:	4288      	cmp	r0, r1
 8000fa0:	d31f      	bcc.n	8000fe2 <L3GD20_loop+0xae>
		{
			timeDifference = (currentTime - previousTime)*1.0/HAL_RCC_GetHCLKFreq();
 8000fa2:	4b84      	ldr	r3, [pc, #528]	; (80011b4 <L3GD20_loop+0x280>)
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	4b84      	ldr	r3, [pc, #528]	; (80011b8 <L3GD20_loop+0x284>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff faa1 	bl	80004f4 <__aeabi_ui2d>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	460d      	mov	r5, r1
 8000fb6:	f002 fc27 	bl	8003808 <HAL_RCC_GetHCLKFreq>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff fa99 	bl	80004f4 <__aeabi_ui2d>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	4620      	mov	r0, r4
 8000fc8:	4629      	mov	r1, r5
 8000fca:	f7ff fc37 	bl	800083c <__aeabi_ddiv>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	4610      	mov	r0, r2
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f7ff fd19 	bl	8000a0c <__aeabi_d2f>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	4a77      	ldr	r2, [pc, #476]	; (80011bc <L3GD20_loop+0x288>)
 8000fde:	6013      	str	r3, [r2, #0]
 8000fe0:	e02c      	b.n	800103c <L3GD20_loop+0x108>
		}
		else
		{
			timeDifference = (4294967295 + currentTime - previousTime)*1.0/ HAL_RCC_GetHCLKFreq();
 8000fe2:	4974      	ldr	r1, [pc, #464]	; (80011b4 <L3GD20_loop+0x280>)
 8000fe4:	6809      	ldr	r1, [r1, #0]
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	4688      	mov	r8, r1
 8000fea:	4681      	mov	r9, r0
 8000fec:	f118 32ff 	adds.w	r2, r8, #4294967295
 8000ff0:	f149 0300 	adc.w	r3, r9, #0
 8000ff4:	4970      	ldr	r1, [pc, #448]	; (80011b8 <L3GD20_loop+0x284>)
 8000ff6:	6809      	ldr	r1, [r1, #0]
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	460c      	mov	r4, r1
 8000ffc:	4605      	mov	r5, r0
 8000ffe:	ebb2 0a04 	subs.w	sl, r2, r4
 8001002:	eb63 0b05 	sbc.w	fp, r3, r5
 8001006:	4650      	mov	r0, sl
 8001008:	4659      	mov	r1, fp
 800100a:	f7ff fabf 	bl	800058c <__aeabi_l2d>
 800100e:	4604      	mov	r4, r0
 8001010:	460d      	mov	r5, r1
 8001012:	f002 fbf9 	bl	8003808 <HAL_RCC_GetHCLKFreq>
 8001016:	4603      	mov	r3, r0
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fa6b 	bl	80004f4 <__aeabi_ui2d>
 800101e:	4602      	mov	r2, r0
 8001020:	460b      	mov	r3, r1
 8001022:	4620      	mov	r0, r4
 8001024:	4629      	mov	r1, r5
 8001026:	f7ff fc09 	bl	800083c <__aeabi_ddiv>
 800102a:	4602      	mov	r2, r0
 800102c:	460b      	mov	r3, r1
 800102e:	4610      	mov	r0, r2
 8001030:	4619      	mov	r1, r3
 8001032:	f7ff fceb 	bl	8000a0c <__aeabi_d2f>
 8001036:	4603      	mov	r3, r0
 8001038:	4a60      	ldr	r2, [pc, #384]	; (80011bc <L3GD20_loop+0x288>)
 800103a:	6013      	str	r3, [r2, #0]
		}
		previousTime = currentTime;
 800103c:	4b5d      	ldr	r3, [pc, #372]	; (80011b4 <L3GD20_loop+0x280>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a5d      	ldr	r2, [pc, #372]	; (80011b8 <L3GD20_loop+0x284>)
 8001042:	6013      	str	r3, [r2, #0]

		switch(currentState)
 8001044:	4b5e      	ldr	r3, [pc, #376]	; (80011c0 <L3GD20_loop+0x28c>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d003      	beq.n	8001054 <L3GD20_loop+0x120>
 800104c:	2b01      	cmp	r3, #1
 800104e:	f000 80cd 	beq.w	80011ec <L3GD20_loop+0x2b8>
			currentState=L3GD20_fisrt;
			dataReadyFlag=L3GD20_DATA_READY;
			break;

					default:
						break;
 8001052:	e376      	b.n	8001742 <L3GD20_loop+0x80e>
				if(dataReadyFlag==L3GD20_DATA_READY)
 8001054:	4b5b      	ldr	r3, [pc, #364]	; (80011c4 <L3GD20_loop+0x290>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b01      	cmp	r3, #1
 800105a:	f040 8371 	bne.w	8001740 <L3GD20_loop+0x80c>
					HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,GPIO_PIN_RESET);
 800105e:	2200      	movs	r2, #0
 8001060:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001064:	4858      	ldr	r0, [pc, #352]	; (80011c8 <L3GD20_loop+0x294>)
 8001066:	f001 ff77 	bl	8002f58 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x28|0x80;
 800106a:	4b58      	ldr	r3, [pc, #352]	; (80011cc <L3GD20_loop+0x298>)
 800106c:	22a8      	movs	r2, #168	; 0xa8
 800106e:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(&hspi1,spiTxBuf,1,50);
 8001070:	2332      	movs	r3, #50	; 0x32
 8001072:	2201      	movs	r2, #1
 8001074:	4955      	ldr	r1, [pc, #340]	; (80011cc <L3GD20_loop+0x298>)
 8001076:	4856      	ldr	r0, [pc, #344]	; (80011d0 <L3GD20_loop+0x29c>)
 8001078:	f002 fc83 	bl	8003982 <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi1,&spiRxBuf[1],1,50);
 800107c:	2332      	movs	r3, #50	; 0x32
 800107e:	2201      	movs	r2, #1
 8001080:	4954      	ldr	r1, [pc, #336]	; (80011d4 <L3GD20_loop+0x2a0>)
 8001082:	4853      	ldr	r0, [pc, #332]	; (80011d0 <L3GD20_loop+0x29c>)
 8001084:	f002 fdb9 	bl	8003bfa <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,GPIO_PIN_SET);
 8001088:	2201      	movs	r2, #1
 800108a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800108e:	484e      	ldr	r0, [pc, #312]	; (80011c8 <L3GD20_loop+0x294>)
 8001090:	f001 ff62 	bl	8002f58 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,GPIO_PIN_RESET);
 8001094:	2200      	movs	r2, #0
 8001096:	f44f 7180 	mov.w	r1, #256	; 0x100
 800109a:	484b      	ldr	r0, [pc, #300]	; (80011c8 <L3GD20_loop+0x294>)
 800109c:	f001 ff5c 	bl	8002f58 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x29|0x80;
 80010a0:	4b4a      	ldr	r3, [pc, #296]	; (80011cc <L3GD20_loop+0x298>)
 80010a2:	22a9      	movs	r2, #169	; 0xa9
 80010a4:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(&hspi1,spiTxBuf,1,50);
 80010a6:	2332      	movs	r3, #50	; 0x32
 80010a8:	2201      	movs	r2, #1
 80010aa:	4948      	ldr	r1, [pc, #288]	; (80011cc <L3GD20_loop+0x298>)
 80010ac:	4848      	ldr	r0, [pc, #288]	; (80011d0 <L3GD20_loop+0x29c>)
 80010ae:	f002 fc68 	bl	8003982 <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi1,&spiRxBuf[2],1,50);
 80010b2:	2332      	movs	r3, #50	; 0x32
 80010b4:	2201      	movs	r2, #1
 80010b6:	4948      	ldr	r1, [pc, #288]	; (80011d8 <L3GD20_loop+0x2a4>)
 80010b8:	4845      	ldr	r0, [pc, #276]	; (80011d0 <L3GD20_loop+0x29c>)
 80010ba:	f002 fd9e 	bl	8003bfa <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,GPIO_PIN_SET);
 80010be:	2201      	movs	r2, #1
 80010c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010c4:	4840      	ldr	r0, [pc, #256]	; (80011c8 <L3GD20_loop+0x294>)
 80010c6:	f001 ff47 	bl	8002f58 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,GPIO_PIN_RESET);
 80010ca:	2200      	movs	r2, #0
 80010cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010d0:	483d      	ldr	r0, [pc, #244]	; (80011c8 <L3GD20_loop+0x294>)
 80010d2:	f001 ff41 	bl	8002f58 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2a|0x80;
 80010d6:	4b3d      	ldr	r3, [pc, #244]	; (80011cc <L3GD20_loop+0x298>)
 80010d8:	22aa      	movs	r2, #170	; 0xaa
 80010da:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(&hspi1,spiTxBuf,1,50);
 80010dc:	2332      	movs	r3, #50	; 0x32
 80010de:	2201      	movs	r2, #1
 80010e0:	493a      	ldr	r1, [pc, #232]	; (80011cc <L3GD20_loop+0x298>)
 80010e2:	483b      	ldr	r0, [pc, #236]	; (80011d0 <L3GD20_loop+0x29c>)
 80010e4:	f002 fc4d 	bl	8003982 <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi1,&spiRxBuf[3],1,50);
 80010e8:	2332      	movs	r3, #50	; 0x32
 80010ea:	2201      	movs	r2, #1
 80010ec:	493b      	ldr	r1, [pc, #236]	; (80011dc <L3GD20_loop+0x2a8>)
 80010ee:	4838      	ldr	r0, [pc, #224]	; (80011d0 <L3GD20_loop+0x29c>)
 80010f0:	f002 fd83 	bl	8003bfa <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,GPIO_PIN_SET);
 80010f4:	2201      	movs	r2, #1
 80010f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010fa:	4833      	ldr	r0, [pc, #204]	; (80011c8 <L3GD20_loop+0x294>)
 80010fc:	f001 ff2c 	bl	8002f58 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,GPIO_PIN_RESET);
 8001100:	2200      	movs	r2, #0
 8001102:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001106:	4830      	ldr	r0, [pc, #192]	; (80011c8 <L3GD20_loop+0x294>)
 8001108:	f001 ff26 	bl	8002f58 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2b|0x80;
 800110c:	4b2f      	ldr	r3, [pc, #188]	; (80011cc <L3GD20_loop+0x298>)
 800110e:	22ab      	movs	r2, #171	; 0xab
 8001110:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(&hspi1,spiTxBuf,1,50);
 8001112:	2332      	movs	r3, #50	; 0x32
 8001114:	2201      	movs	r2, #1
 8001116:	492d      	ldr	r1, [pc, #180]	; (80011cc <L3GD20_loop+0x298>)
 8001118:	482d      	ldr	r0, [pc, #180]	; (80011d0 <L3GD20_loop+0x29c>)
 800111a:	f002 fc32 	bl	8003982 <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi1,&spiRxBuf[4],1,50);
 800111e:	2332      	movs	r3, #50	; 0x32
 8001120:	2201      	movs	r2, #1
 8001122:	492f      	ldr	r1, [pc, #188]	; (80011e0 <L3GD20_loop+0x2ac>)
 8001124:	482a      	ldr	r0, [pc, #168]	; (80011d0 <L3GD20_loop+0x29c>)
 8001126:	f002 fd68 	bl	8003bfa <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,GPIO_PIN_SET);
 800112a:	2201      	movs	r2, #1
 800112c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001130:	4825      	ldr	r0, [pc, #148]	; (80011c8 <L3GD20_loop+0x294>)
 8001132:	f001 ff11 	bl	8002f58 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,GPIO_PIN_RESET);
 8001136:	2200      	movs	r2, #0
 8001138:	f44f 7180 	mov.w	r1, #256	; 0x100
 800113c:	4822      	ldr	r0, [pc, #136]	; (80011c8 <L3GD20_loop+0x294>)
 800113e:	f001 ff0b 	bl	8002f58 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2c|0x80;
 8001142:	4b22      	ldr	r3, [pc, #136]	; (80011cc <L3GD20_loop+0x298>)
 8001144:	22ac      	movs	r2, #172	; 0xac
 8001146:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(&hspi1,spiTxBuf,1,50);
 8001148:	2332      	movs	r3, #50	; 0x32
 800114a:	2201      	movs	r2, #1
 800114c:	491f      	ldr	r1, [pc, #124]	; (80011cc <L3GD20_loop+0x298>)
 800114e:	4820      	ldr	r0, [pc, #128]	; (80011d0 <L3GD20_loop+0x29c>)
 8001150:	f002 fc17 	bl	8003982 <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi1,&spiRxBuf[5],1,50);
 8001154:	2332      	movs	r3, #50	; 0x32
 8001156:	2201      	movs	r2, #1
 8001158:	4922      	ldr	r1, [pc, #136]	; (80011e4 <L3GD20_loop+0x2b0>)
 800115a:	481d      	ldr	r0, [pc, #116]	; (80011d0 <L3GD20_loop+0x29c>)
 800115c:	f002 fd4d 	bl	8003bfa <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,GPIO_PIN_SET);
 8001160:	2201      	movs	r2, #1
 8001162:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001166:	4818      	ldr	r0, [pc, #96]	; (80011c8 <L3GD20_loop+0x294>)
 8001168:	f001 fef6 	bl	8002f58 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,GPIO_PIN_RESET);
 800116c:	2200      	movs	r2, #0
 800116e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001172:	4815      	ldr	r0, [pc, #84]	; (80011c8 <L3GD20_loop+0x294>)
 8001174:	f001 fef0 	bl	8002f58 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2d|0x80;
 8001178:	4b14      	ldr	r3, [pc, #80]	; (80011cc <L3GD20_loop+0x298>)
 800117a:	22ad      	movs	r2, #173	; 0xad
 800117c:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(&hspi1,spiTxBuf,1,50);
 800117e:	2332      	movs	r3, #50	; 0x32
 8001180:	2201      	movs	r2, #1
 8001182:	4912      	ldr	r1, [pc, #72]	; (80011cc <L3GD20_loop+0x298>)
 8001184:	4812      	ldr	r0, [pc, #72]	; (80011d0 <L3GD20_loop+0x29c>)
 8001186:	f002 fbfc 	bl	8003982 <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi1,&spiRxBuf[6],1,50);
 800118a:	2332      	movs	r3, #50	; 0x32
 800118c:	2201      	movs	r2, #1
 800118e:	4916      	ldr	r1, [pc, #88]	; (80011e8 <L3GD20_loop+0x2b4>)
 8001190:	480f      	ldr	r0, [pc, #60]	; (80011d0 <L3GD20_loop+0x29c>)
 8001192:	f002 fd32 	bl	8003bfa <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,GPIO_PIN_SET);
 8001196:	2201      	movs	r2, #1
 8001198:	f44f 7180 	mov.w	r1, #256	; 0x100
 800119c:	480a      	ldr	r0, [pc, #40]	; (80011c8 <L3GD20_loop+0x294>)
 800119e:	f001 fedb 	bl	8002f58 <HAL_GPIO_WritePin>
						currentState=L3GD20_second;
 80011a2:	4b07      	ldr	r3, [pc, #28]	; (80011c0 <L3GD20_loop+0x28c>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	701a      	strb	r2, [r3, #0]
						dataReadyFlag=L3GD20_DATA_NOT_READY;
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <L3GD20_loop+0x290>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	701a      	strb	r2, [r3, #0]
				break;
 80011ae:	e2c7      	b.n	8001740 <L3GD20_loop+0x80c>
 80011b0:	200030c8 	.word	0x200030c8
 80011b4:	20002fcc 	.word	0x20002fcc
 80011b8:	20002fc4 	.word	0x20002fc4
 80011bc:	20002fc8 	.word	0x20002fc8
 80011c0:	20000089 	.word	0x20000089
 80011c4:	20000000 	.word	0x20000000
 80011c8:	40020800 	.word	0x40020800
 80011cc:	20002fb8 	.word	0x20002fb8
 80011d0:	20003018 	.word	0x20003018
 80011d4:	20002fbd 	.word	0x20002fbd
 80011d8:	20002fbe 	.word	0x20002fbe
 80011dc:	20002fbf 	.word	0x20002fbf
 80011e0:	20002fc0 	.word	0x20002fc0
 80011e4:	20002fc1 	.word	0x20002fc1
 80011e8:	20002fc2 	.word	0x20002fc2
				Raw_x=(spiRxBuf[2]<<8)|spiRxBuf[1];
 80011ec:	4b9d      	ldr	r3, [pc, #628]	; (8001464 <L3GD20_loop+0x530>)
 80011ee:	789b      	ldrb	r3, [r3, #2]
 80011f0:	021b      	lsls	r3, r3, #8
 80011f2:	b21a      	sxth	r2, r3
 80011f4:	4b9b      	ldr	r3, [pc, #620]	; (8001464 <L3GD20_loop+0x530>)
 80011f6:	785b      	ldrb	r3, [r3, #1]
 80011f8:	b21b      	sxth	r3, r3
 80011fa:	4313      	orrs	r3, r2
 80011fc:	b21b      	sxth	r3, r3
 80011fe:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
				Raw_y=(spiRxBuf[4]<<8)|spiRxBuf[3];
 8001202:	4b98      	ldr	r3, [pc, #608]	; (8001464 <L3GD20_loop+0x530>)
 8001204:	791b      	ldrb	r3, [r3, #4]
 8001206:	021b      	lsls	r3, r3, #8
 8001208:	b21a      	sxth	r2, r3
 800120a:	4b96      	ldr	r3, [pc, #600]	; (8001464 <L3GD20_loop+0x530>)
 800120c:	78db      	ldrb	r3, [r3, #3]
 800120e:	b21b      	sxth	r3, r3
 8001210:	4313      	orrs	r3, r2
 8001212:	b21b      	sxth	r3, r3
 8001214:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
				Raw_z=(spiRxBuf[6]<<8)|spiRxBuf[5];
 8001218:	4b92      	ldr	r3, [pc, #584]	; (8001464 <L3GD20_loop+0x530>)
 800121a:	799b      	ldrb	r3, [r3, #6]
 800121c:	021b      	lsls	r3, r3, #8
 800121e:	b21a      	sxth	r2, r3
 8001220:	4b90      	ldr	r3, [pc, #576]	; (8001464 <L3GD20_loop+0x530>)
 8001222:	795b      	ldrb	r3, [r3, #5]
 8001224:	b21b      	sxth	r3, r3
 8001226:	4313      	orrs	r3, r2
 8001228:	b21b      	sxth	r3, r3
 800122a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
			if(currentcalistate==L3GD20_calibrated)
 800122e:	4b8e      	ldr	r3, [pc, #568]	; (8001468 <L3GD20_loop+0x534>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b02      	cmp	r3, #2
 8001234:	f040 80dc 	bne.w	80013f0 <L3GD20_loop+0x4bc>
				HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001238:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800123c:	488b      	ldr	r0, [pc, #556]	; (800146c <L3GD20_loop+0x538>)
 800123e:	f001 fea4 	bl	8002f8a <HAL_GPIO_TogglePin>
				angleRate_x=(float) (Raw_x - (offset_x))*L3GD20_SENSITIVITY;
 8001242:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001246:	b21b      	sxth	r3, r3
 8001248:	461a      	mov	r2, r3
 800124a:	4b89      	ldr	r3, [pc, #548]	; (8001470 <L3GD20_loop+0x53c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	ee07 3a90 	vmov	s15, r3
 8001254:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001258:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8001474 <L3GD20_loop+0x540>
 800125c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001260:	4b85      	ldr	r3, [pc, #532]	; (8001478 <L3GD20_loop+0x544>)
 8001262:	edc3 7a00 	vstr	s15, [r3]
				angleRate_y=(float) (Raw_y - (offset_y))*L3GD20_SENSITIVITY;
 8001266:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800126a:	b21b      	sxth	r3, r3
 800126c:	461a      	mov	r2, r3
 800126e:	4b83      	ldr	r3, [pc, #524]	; (800147c <L3GD20_loop+0x548>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	ee07 3a90 	vmov	s15, r3
 8001278:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800127c:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8001474 <L3GD20_loop+0x540>
 8001280:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001284:	4b7e      	ldr	r3, [pc, #504]	; (8001480 <L3GD20_loop+0x54c>)
 8001286:	edc3 7a00 	vstr	s15, [r3]
				angleRate_z=(float) (Raw_z - (offset_z))*L3GD20_SENSITIVITY;
 800128a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800128e:	b21b      	sxth	r3, r3
 8001290:	461a      	mov	r2, r3
 8001292:	4b7c      	ldr	r3, [pc, #496]	; (8001484 <L3GD20_loop+0x550>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	ee07 3a90 	vmov	s15, r3
 800129c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012a0:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8001474 <L3GD20_loop+0x540>
 80012a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012a8:	4b77      	ldr	r3, [pc, #476]	; (8001488 <L3GD20_loop+0x554>)
 80012aa:	edc3 7a00 	vstr	s15, [r3]
				if((angleRate_x>Noise_X)||(angleRate_x<-Noise_X))
 80012ae:	4b72      	ldr	r3, [pc, #456]	; (8001478 <L3GD20_loop+0x544>)
 80012b0:	ed93 7a00 	vldr	s14, [r3]
 80012b4:	4b75      	ldr	r3, [pc, #468]	; (800148c <L3GD20_loop+0x558>)
 80012b6:	edd3 7a00 	vldr	s15, [r3]
 80012ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c2:	dc0c      	bgt.n	80012de <L3GD20_loop+0x3aa>
 80012c4:	4b71      	ldr	r3, [pc, #452]	; (800148c <L3GD20_loop+0x558>)
 80012c6:	edd3 7a00 	vldr	s15, [r3]
 80012ca:	eeb1 7a67 	vneg.f32	s14, s15
 80012ce:	4b6a      	ldr	r3, [pc, #424]	; (8001478 <L3GD20_loop+0x544>)
 80012d0:	edd3 7a00 	vldr	s15, [r3]
 80012d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012dc:	dd1c      	ble.n	8001318 <L3GD20_loop+0x3e4>
					Angle_X+=((angleRate_x+LastAngleRate_X)*timeDifference)/(2.0f);
 80012de:	4b66      	ldr	r3, [pc, #408]	; (8001478 <L3GD20_loop+0x544>)
 80012e0:	ed93 7a00 	vldr	s14, [r3]
 80012e4:	4b6a      	ldr	r3, [pc, #424]	; (8001490 <L3GD20_loop+0x55c>)
 80012e6:	edd3 7a00 	vldr	s15, [r3]
 80012ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012ee:	4b69      	ldr	r3, [pc, #420]	; (8001494 <L3GD20_loop+0x560>)
 80012f0:	edd3 7a00 	vldr	s15, [r3]
 80012f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012f8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80012fc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001300:	4b65      	ldr	r3, [pc, #404]	; (8001498 <L3GD20_loop+0x564>)
 8001302:	edd3 7a00 	vldr	s15, [r3]
 8001306:	ee77 7a27 	vadd.f32	s15, s14, s15
 800130a:	4b63      	ldr	r3, [pc, #396]	; (8001498 <L3GD20_loop+0x564>)
 800130c:	edc3 7a00 	vstr	s15, [r3]
					LastAngleRate_X=angleRate_x;
 8001310:	4b59      	ldr	r3, [pc, #356]	; (8001478 <L3GD20_loop+0x544>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a5e      	ldr	r2, [pc, #376]	; (8001490 <L3GD20_loop+0x55c>)
 8001316:	6013      	str	r3, [r2, #0]
				if((angleRate_y>Noise_Y)||(angleRate_y<-Noise_Y))
 8001318:	4b59      	ldr	r3, [pc, #356]	; (8001480 <L3GD20_loop+0x54c>)
 800131a:	ed93 7a00 	vldr	s14, [r3]
 800131e:	4b5f      	ldr	r3, [pc, #380]	; (800149c <L3GD20_loop+0x568>)
 8001320:	edd3 7a00 	vldr	s15, [r3]
 8001324:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800132c:	dc0c      	bgt.n	8001348 <L3GD20_loop+0x414>
 800132e:	4b5b      	ldr	r3, [pc, #364]	; (800149c <L3GD20_loop+0x568>)
 8001330:	edd3 7a00 	vldr	s15, [r3]
 8001334:	eeb1 7a67 	vneg.f32	s14, s15
 8001338:	4b51      	ldr	r3, [pc, #324]	; (8001480 <L3GD20_loop+0x54c>)
 800133a:	edd3 7a00 	vldr	s15, [r3]
 800133e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001346:	dd1c      	ble.n	8001382 <L3GD20_loop+0x44e>
					Angle_Y+=((angleRate_y+LastAngleRate_Y)*timeDifference)/(2.0f);
 8001348:	4b4d      	ldr	r3, [pc, #308]	; (8001480 <L3GD20_loop+0x54c>)
 800134a:	ed93 7a00 	vldr	s14, [r3]
 800134e:	4b54      	ldr	r3, [pc, #336]	; (80014a0 <L3GD20_loop+0x56c>)
 8001350:	edd3 7a00 	vldr	s15, [r3]
 8001354:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001358:	4b4e      	ldr	r3, [pc, #312]	; (8001494 <L3GD20_loop+0x560>)
 800135a:	edd3 7a00 	vldr	s15, [r3]
 800135e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001362:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001366:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800136a:	4b4e      	ldr	r3, [pc, #312]	; (80014a4 <L3GD20_loop+0x570>)
 800136c:	edd3 7a00 	vldr	s15, [r3]
 8001370:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001374:	4b4b      	ldr	r3, [pc, #300]	; (80014a4 <L3GD20_loop+0x570>)
 8001376:	edc3 7a00 	vstr	s15, [r3]
					LastAngleRate_Y=angleRate_y;
 800137a:	4b41      	ldr	r3, [pc, #260]	; (8001480 <L3GD20_loop+0x54c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a48      	ldr	r2, [pc, #288]	; (80014a0 <L3GD20_loop+0x56c>)
 8001380:	6013      	str	r3, [r2, #0]
				if((angleRate_z>Noise_Z)||(angleRate_z<-Noise_Z))
 8001382:	4b41      	ldr	r3, [pc, #260]	; (8001488 <L3GD20_loop+0x554>)
 8001384:	ed93 7a00 	vldr	s14, [r3]
 8001388:	4b47      	ldr	r3, [pc, #284]	; (80014a8 <L3GD20_loop+0x574>)
 800138a:	edd3 7a00 	vldr	s15, [r3]
 800138e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001396:	dc0d      	bgt.n	80013b4 <L3GD20_loop+0x480>
 8001398:	4b43      	ldr	r3, [pc, #268]	; (80014a8 <L3GD20_loop+0x574>)
 800139a:	edd3 7a00 	vldr	s15, [r3]
 800139e:	eeb1 7a67 	vneg.f32	s14, s15
 80013a2:	4b39      	ldr	r3, [pc, #228]	; (8001488 <L3GD20_loop+0x554>)
 80013a4:	edd3 7a00 	vldr	s15, [r3]
 80013a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b0:	f340 81bf 	ble.w	8001732 <L3GD20_loop+0x7fe>
					Angle_Z+=((angleRate_z+LastAngleRate_Z)*timeDifference)/(2.0f);
 80013b4:	4b34      	ldr	r3, [pc, #208]	; (8001488 <L3GD20_loop+0x554>)
 80013b6:	ed93 7a00 	vldr	s14, [r3]
 80013ba:	4b3c      	ldr	r3, [pc, #240]	; (80014ac <L3GD20_loop+0x578>)
 80013bc:	edd3 7a00 	vldr	s15, [r3]
 80013c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013c4:	4b33      	ldr	r3, [pc, #204]	; (8001494 <L3GD20_loop+0x560>)
 80013c6:	edd3 7a00 	vldr	s15, [r3]
 80013ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ce:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80013d2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80013d6:	4b36      	ldr	r3, [pc, #216]	; (80014b0 <L3GD20_loop+0x57c>)
 80013d8:	edd3 7a00 	vldr	s15, [r3]
 80013dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013e0:	4b33      	ldr	r3, [pc, #204]	; (80014b0 <L3GD20_loop+0x57c>)
 80013e2:	edc3 7a00 	vstr	s15, [r3]
					LastAngleRate_Z=angleRate_z;
 80013e6:	4b28      	ldr	r3, [pc, #160]	; (8001488 <L3GD20_loop+0x554>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a30      	ldr	r2, [pc, #192]	; (80014ac <L3GD20_loop+0x578>)
 80013ec:	6013      	str	r3, [r2, #0]
 80013ee:	e1a0      	b.n	8001732 <L3GD20_loop+0x7fe>
				switch(currentcalistate)
 80013f0:	4b1d      	ldr	r3, [pc, #116]	; (8001468 <L3GD20_loop+0x534>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	f000 8197 	beq.w	8001728 <L3GD20_loop+0x7f4>
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	f300 8196 	bgt.w	800172c <L3GD20_loop+0x7f8>
 8001400:	2b00      	cmp	r3, #0
 8001402:	d002      	beq.n	800140a <L3GD20_loop+0x4d6>
 8001404:	2b01      	cmp	r3, #1
 8001406:	d02a      	beq.n	800145e <L3GD20_loop+0x52a>
						break;
 8001408:	e190      	b.n	800172c <L3GD20_loop+0x7f8>
						calibrationBuffer_X[caliCounter]=Raw_x;
 800140a:	4b2a      	ldr	r3, [pc, #168]	; (80014b4 <L3GD20_loop+0x580>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8001412:	b211      	sxth	r1, r2
 8001414:	4a28      	ldr	r2, [pc, #160]	; (80014b8 <L3GD20_loop+0x584>)
 8001416:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						calibrationBuffer_Y[caliCounter]=Raw_y;
 800141a:	4b26      	ldr	r3, [pc, #152]	; (80014b4 <L3GD20_loop+0x580>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8001422:	b211      	sxth	r1, r2
 8001424:	4a25      	ldr	r2, [pc, #148]	; (80014bc <L3GD20_loop+0x588>)
 8001426:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						calibrationBuffer_Z[caliCounter]=Raw_z;
 800142a:	4b22      	ldr	r3, [pc, #136]	; (80014b4 <L3GD20_loop+0x580>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8001432:	b211      	sxth	r1, r2
 8001434:	4a22      	ldr	r2, [pc, #136]	; (80014c0 <L3GD20_loop+0x58c>)
 8001436:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						caliCounter++;
 800143a:	4b1e      	ldr	r3, [pc, #120]	; (80014b4 <L3GD20_loop+0x580>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	3301      	adds	r3, #1
 8001440:	4a1c      	ldr	r2, [pc, #112]	; (80014b4 <L3GD20_loop+0x580>)
 8001442:	6013      	str	r3, [r2, #0]
						if(caliCounter>=CALIBRATION_BUFFER_LENGTH)
 8001444:	4b1b      	ldr	r3, [pc, #108]	; (80014b4 <L3GD20_loop+0x580>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800144c:	f0c0 8170 	bcc.w	8001730 <L3GD20_loop+0x7fc>
							caliCounter=0;
 8001450:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <L3GD20_loop+0x580>)
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
							currentcalistate=L3GD20_process_calibration_samples;
 8001456:	4b04      	ldr	r3, [pc, #16]	; (8001468 <L3GD20_loop+0x534>)
 8001458:	2201      	movs	r2, #1
 800145a:	701a      	strb	r2, [r3, #0]
						break;
 800145c:	e168      	b.n	8001730 <L3GD20_loop+0x7fc>
						for(uint32_t idx=0; idx<CALIBRATION_BUFFER_LENGTH;idx++)
 800145e:	2300      	movs	r3, #0
 8001460:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001462:	e0a0      	b.n	80015a6 <L3GD20_loop+0x672>
 8001464:	20002fbc 	.word	0x20002fbc
 8001468:	20000088 	.word	0x20000088
 800146c:	40020000 	.word	0x40020000
 8001470:	20000098 	.word	0x20000098
 8001474:	3d8f5c29 	.word	0x3d8f5c29
 8001478:	2000008c 	.word	0x2000008c
 800147c:	2000009c 	.word	0x2000009c
 8001480:	20000090 	.word	0x20000090
 8001484:	200000a0 	.word	0x200000a0
 8001488:	20000094 	.word	0x20000094
 800148c:	200000a4 	.word	0x200000a4
 8001490:	200000bc 	.word	0x200000bc
 8001494:	20002fc8 	.word	0x20002fc8
 8001498:	200000b0 	.word	0x200000b0
 800149c:	200000a8 	.word	0x200000a8
 80014a0:	200000c0 	.word	0x200000c0
 80014a4:	200000b4 	.word	0x200000b4
 80014a8:	200000ac 	.word	0x200000ac
 80014ac:	200000c4 	.word	0x200000c4
 80014b0:	200000b8 	.word	0x200000b8
 80014b4:	200000d4 	.word	0x200000d4
 80014b8:	200000d8 	.word	0x200000d8
 80014bc:	20001078 	.word	0x20001078
 80014c0:	20002018 	.word	0x20002018
								tempSum_X=tempSum_X-averageWindow_X[windowPosition]+calibrationBuffer_X[idx];
 80014c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	3360      	adds	r3, #96	; 0x60
 80014ca:	443b      	add	r3, r7
 80014cc:	f933 3c34 	ldrsh.w	r3, [r3, #-52]
 80014d0:	461a      	mov	r2, r3
 80014d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014d4:	1a9b      	subs	r3, r3, r2
 80014d6:	499d      	ldr	r1, [pc, #628]	; (800174c <L3GD20_loop+0x818>)
 80014d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80014da:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 80014de:	4413      	add	r3, r2
 80014e0:	65bb      	str	r3, [r7, #88]	; 0x58
								tempSum_Y=tempSum_Y-averageWindow_Y[windowPosition]+calibrationBuffer_Y[idx];
 80014e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	3360      	adds	r3, #96	; 0x60
 80014e8:	443b      	add	r3, r7
 80014ea:	f933 3c48 	ldrsh.w	r3, [r3, #-72]
 80014ee:	461a      	mov	r2, r3
 80014f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014f2:	1a9b      	subs	r3, r3, r2
 80014f4:	4996      	ldr	r1, [pc, #600]	; (8001750 <L3GD20_loop+0x81c>)
 80014f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80014f8:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 80014fc:	4413      	add	r3, r2
 80014fe:	657b      	str	r3, [r7, #84]	; 0x54
								tempSum_Z=tempSum_Z-averageWindow_Z[windowPosition]+calibrationBuffer_Z[idx];
 8001500:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	3360      	adds	r3, #96	; 0x60
 8001506:	443b      	add	r3, r7
 8001508:	f933 3c5c 	ldrsh.w	r3, [r3, #-92]
 800150c:	461a      	mov	r2, r3
 800150e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001510:	1a9b      	subs	r3, r3, r2
 8001512:	4990      	ldr	r1, [pc, #576]	; (8001754 <L3GD20_loop+0x820>)
 8001514:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001516:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800151a:	4413      	add	r3, r2
 800151c:	653b      	str	r3, [r7, #80]	; 0x50
								averageWindow_X[windowPosition]=calibrationBuffer_X[idx];
 800151e:	4a8b      	ldr	r2, [pc, #556]	; (800174c <L3GD20_loop+0x818>)
 8001520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001522:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8001526:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	3360      	adds	r3, #96	; 0x60
 800152c:	443b      	add	r3, r7
 800152e:	f823 2c34 	strh.w	r2, [r3, #-52]
								averageWindow_Y[windowPosition]=calibrationBuffer_Y[idx];
 8001532:	4a87      	ldr	r2, [pc, #540]	; (8001750 <L3GD20_loop+0x81c>)
 8001534:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001536:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800153a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	3360      	adds	r3, #96	; 0x60
 8001540:	443b      	add	r3, r7
 8001542:	f823 2c48 	strh.w	r2, [r3, #-72]
								averageWindow_Z[windowPosition]=calibrationBuffer_Z[idx];
 8001546:	4a83      	ldr	r2, [pc, #524]	; (8001754 <L3GD20_loop+0x820>)
 8001548:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800154a:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800154e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	3360      	adds	r3, #96	; 0x60
 8001554:	443b      	add	r3, r7
 8001556:	f823 2c5c 	strh.w	r2, [r3, #-92]
								offset_x=tempSum_X/(int32_t)AVERAGE_WINDOW_SIZE;
 800155a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800155c:	4a7e      	ldr	r2, [pc, #504]	; (8001758 <L3GD20_loop+0x824>)
 800155e:	fb82 1203 	smull	r1, r2, r2, r3
 8001562:	1092      	asrs	r2, r2, #2
 8001564:	17db      	asrs	r3, r3, #31
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	4a7c      	ldr	r2, [pc, #496]	; (800175c <L3GD20_loop+0x828>)
 800156a:	6013      	str	r3, [r2, #0]
								offset_y=tempSum_Y/(int32_t)AVERAGE_WINDOW_SIZE;
 800156c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800156e:	4a7a      	ldr	r2, [pc, #488]	; (8001758 <L3GD20_loop+0x824>)
 8001570:	fb82 1203 	smull	r1, r2, r2, r3
 8001574:	1092      	asrs	r2, r2, #2
 8001576:	17db      	asrs	r3, r3, #31
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	4a79      	ldr	r2, [pc, #484]	; (8001760 <L3GD20_loop+0x82c>)
 800157c:	6013      	str	r3, [r2, #0]
								offset_z=tempSum_Z/(int32_t)AVERAGE_WINDOW_SIZE;
 800157e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001580:	4a75      	ldr	r2, [pc, #468]	; (8001758 <L3GD20_loop+0x824>)
 8001582:	fb82 1203 	smull	r1, r2, r2, r3
 8001586:	1092      	asrs	r2, r2, #2
 8001588:	17db      	asrs	r3, r3, #31
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	4a75      	ldr	r2, [pc, #468]	; (8001764 <L3GD20_loop+0x830>)
 800158e:	6013      	str	r3, [r2, #0]
								windowPosition++;
 8001590:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001592:	3301      	adds	r3, #1
 8001594:	65fb      	str	r3, [r7, #92]	; 0x5c
								if(windowPosition>=AVERAGE_WINDOW_SIZE)
 8001596:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001598:	2b09      	cmp	r3, #9
 800159a:	d901      	bls.n	80015a0 <L3GD20_loop+0x66c>
									windowPosition=0;
 800159c:	2300      	movs	r3, #0
 800159e:	65fb      	str	r3, [r7, #92]	; 0x5c
						for(uint32_t idx=0; idx<CALIBRATION_BUFFER_LENGTH;idx++)
 80015a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015a2:	3301      	adds	r3, #1
 80015a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80015a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015a8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80015ac:	d38a      	bcc.n	80014c4 <L3GD20_loop+0x590>
							for(uint32_t idx=0;idx<CALIBRATION_BUFFER_LENGTH;idx++)
 80015ae:	2300      	movs	r3, #0
 80015b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80015b2:	e089      	b.n	80016c8 <L3GD20_loop+0x794>
								if(((int32_t)calibrationBuffer_X[idx]-offset_x)>TempNoise_X)
 80015b4:	4a65      	ldr	r2, [pc, #404]	; (800174c <L3GD20_loop+0x818>)
 80015b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015b8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80015bc:	461a      	mov	r2, r3
 80015be:	4b67      	ldr	r3, [pc, #412]	; (800175c <L3GD20_loop+0x828>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	1ad2      	subs	r2, r2, r3
 80015c4:	4b68      	ldr	r3, [pc, #416]	; (8001768 <L3GD20_loop+0x834>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	dd0a      	ble.n	80015e2 <L3GD20_loop+0x6ae>
									TempNoise_X=(int32_t)calibrationBuffer_X[idx]-offset_x;
 80015cc:	4a5f      	ldr	r2, [pc, #380]	; (800174c <L3GD20_loop+0x818>)
 80015ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015d0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80015d4:	461a      	mov	r2, r3
 80015d6:	4b61      	ldr	r3, [pc, #388]	; (800175c <L3GD20_loop+0x828>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	4a62      	ldr	r2, [pc, #392]	; (8001768 <L3GD20_loop+0x834>)
 80015de:	6013      	str	r3, [r2, #0]
 80015e0:	e015      	b.n	800160e <L3GD20_loop+0x6da>
								else if(((int32_t)calibrationBuffer_X[idx]-offset_x)<-TempNoise_X)
 80015e2:	4a5a      	ldr	r2, [pc, #360]	; (800174c <L3GD20_loop+0x818>)
 80015e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015e6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80015ea:	461a      	mov	r2, r3
 80015ec:	4b5b      	ldr	r3, [pc, #364]	; (800175c <L3GD20_loop+0x828>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	1ad2      	subs	r2, r2, r3
 80015f2:	4b5d      	ldr	r3, [pc, #372]	; (8001768 <L3GD20_loop+0x834>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	425b      	negs	r3, r3
 80015f8:	429a      	cmp	r2, r3
 80015fa:	da08      	bge.n	800160e <L3GD20_loop+0x6da>
									TempNoise_X=-((int32_t)calibrationBuffer_X[idx]-offset_x);
 80015fc:	4b57      	ldr	r3, [pc, #348]	; (800175c <L3GD20_loop+0x828>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4952      	ldr	r1, [pc, #328]	; (800174c <L3GD20_loop+0x818>)
 8001602:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001604:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8001608:	1a9b      	subs	r3, r3, r2
 800160a:	4a57      	ldr	r2, [pc, #348]	; (8001768 <L3GD20_loop+0x834>)
 800160c:	6013      	str	r3, [r2, #0]
								if(((int32_t)calibrationBuffer_Y[idx]-offset_y)>TempNoise_Y)
 800160e:	4a50      	ldr	r2, [pc, #320]	; (8001750 <L3GD20_loop+0x81c>)
 8001610:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001612:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001616:	461a      	mov	r2, r3
 8001618:	4b51      	ldr	r3, [pc, #324]	; (8001760 <L3GD20_loop+0x82c>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	1ad2      	subs	r2, r2, r3
 800161e:	4b53      	ldr	r3, [pc, #332]	; (800176c <L3GD20_loop+0x838>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	429a      	cmp	r2, r3
 8001624:	dd0a      	ble.n	800163c <L3GD20_loop+0x708>
									TempNoise_Y=(int32_t)calibrationBuffer_Y[idx]-offset_y;
 8001626:	4a4a      	ldr	r2, [pc, #296]	; (8001750 <L3GD20_loop+0x81c>)
 8001628:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800162a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800162e:	461a      	mov	r2, r3
 8001630:	4b4b      	ldr	r3, [pc, #300]	; (8001760 <L3GD20_loop+0x82c>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	4a4d      	ldr	r2, [pc, #308]	; (800176c <L3GD20_loop+0x838>)
 8001638:	6013      	str	r3, [r2, #0]
 800163a:	e015      	b.n	8001668 <L3GD20_loop+0x734>
								else if(((int32_t)calibrationBuffer_Y[idx]-offset_y)<-TempNoise_Y)
 800163c:	4a44      	ldr	r2, [pc, #272]	; (8001750 <L3GD20_loop+0x81c>)
 800163e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001640:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001644:	461a      	mov	r2, r3
 8001646:	4b46      	ldr	r3, [pc, #280]	; (8001760 <L3GD20_loop+0x82c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	1ad2      	subs	r2, r2, r3
 800164c:	4b47      	ldr	r3, [pc, #284]	; (800176c <L3GD20_loop+0x838>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	425b      	negs	r3, r3
 8001652:	429a      	cmp	r2, r3
 8001654:	da08      	bge.n	8001668 <L3GD20_loop+0x734>
									TempNoise_Y=-((int32_t)calibrationBuffer_Y[idx]-offset_y);
 8001656:	4b42      	ldr	r3, [pc, #264]	; (8001760 <L3GD20_loop+0x82c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	493d      	ldr	r1, [pc, #244]	; (8001750 <L3GD20_loop+0x81c>)
 800165c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800165e:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8001662:	1a9b      	subs	r3, r3, r2
 8001664:	4a41      	ldr	r2, [pc, #260]	; (800176c <L3GD20_loop+0x838>)
 8001666:	6013      	str	r3, [r2, #0]
								if(((int32_t)calibrationBuffer_Z[idx]-offset_z)>TempNoise_Z)
 8001668:	4a3a      	ldr	r2, [pc, #232]	; (8001754 <L3GD20_loop+0x820>)
 800166a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800166c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001670:	461a      	mov	r2, r3
 8001672:	4b3c      	ldr	r3, [pc, #240]	; (8001764 <L3GD20_loop+0x830>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	1ad2      	subs	r2, r2, r3
 8001678:	4b3d      	ldr	r3, [pc, #244]	; (8001770 <L3GD20_loop+0x83c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	429a      	cmp	r2, r3
 800167e:	dd0a      	ble.n	8001696 <L3GD20_loop+0x762>
									TempNoise_Z=(int32_t)calibrationBuffer_Z[idx]-offset_z;
 8001680:	4a34      	ldr	r2, [pc, #208]	; (8001754 <L3GD20_loop+0x820>)
 8001682:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001684:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001688:	461a      	mov	r2, r3
 800168a:	4b36      	ldr	r3, [pc, #216]	; (8001764 <L3GD20_loop+0x830>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	4a37      	ldr	r2, [pc, #220]	; (8001770 <L3GD20_loop+0x83c>)
 8001692:	6013      	str	r3, [r2, #0]
 8001694:	e015      	b.n	80016c2 <L3GD20_loop+0x78e>
								else if(((int32_t)calibrationBuffer_Z[idx]-offset_z)<-TempNoise_Z)
 8001696:	4a2f      	ldr	r2, [pc, #188]	; (8001754 <L3GD20_loop+0x820>)
 8001698:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800169a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800169e:	461a      	mov	r2, r3
 80016a0:	4b30      	ldr	r3, [pc, #192]	; (8001764 <L3GD20_loop+0x830>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	1ad2      	subs	r2, r2, r3
 80016a6:	4b32      	ldr	r3, [pc, #200]	; (8001770 <L3GD20_loop+0x83c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	425b      	negs	r3, r3
 80016ac:	429a      	cmp	r2, r3
 80016ae:	da08      	bge.n	80016c2 <L3GD20_loop+0x78e>
									TempNoise_Z=-((int32_t)calibrationBuffer_Z[idx]-offset_z);
 80016b0:	4b2c      	ldr	r3, [pc, #176]	; (8001764 <L3GD20_loop+0x830>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4927      	ldr	r1, [pc, #156]	; (8001754 <L3GD20_loop+0x820>)
 80016b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80016b8:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 80016bc:	1a9b      	subs	r3, r3, r2
 80016be:	4a2c      	ldr	r2, [pc, #176]	; (8001770 <L3GD20_loop+0x83c>)
 80016c0:	6013      	str	r3, [r2, #0]
							for(uint32_t idx=0;idx<CALIBRATION_BUFFER_LENGTH;idx++)
 80016c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016c4:	3301      	adds	r3, #1
 80016c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80016c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016ca:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80016ce:	f4ff af71 	bcc.w	80015b4 <L3GD20_loop+0x680>
							Noise_X=(float)TempNoise_X*L3GD20_SENSITIVITY;
 80016d2:	4b25      	ldr	r3, [pc, #148]	; (8001768 <L3GD20_loop+0x834>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	ee07 3a90 	vmov	s15, r3
 80016da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016de:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001774 <L3GD20_loop+0x840>
 80016e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016e6:	4b24      	ldr	r3, [pc, #144]	; (8001778 <L3GD20_loop+0x844>)
 80016e8:	edc3 7a00 	vstr	s15, [r3]
							Noise_Y=(float)TempNoise_Y*L3GD20_SENSITIVITY;
 80016ec:	4b1f      	ldr	r3, [pc, #124]	; (800176c <L3GD20_loop+0x838>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	ee07 3a90 	vmov	s15, r3
 80016f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016f8:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001774 <L3GD20_loop+0x840>
 80016fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001700:	4b1e      	ldr	r3, [pc, #120]	; (800177c <L3GD20_loop+0x848>)
 8001702:	edc3 7a00 	vstr	s15, [r3]
							Noise_Z=(float)TempNoise_Z*L3GD20_SENSITIVITY;
 8001706:	4b1a      	ldr	r3, [pc, #104]	; (8001770 <L3GD20_loop+0x83c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	ee07 3a90 	vmov	s15, r3
 800170e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001712:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001774 <L3GD20_loop+0x840>
 8001716:	ee67 7a87 	vmul.f32	s15, s15, s14
 800171a:	4b19      	ldr	r3, [pc, #100]	; (8001780 <L3GD20_loop+0x84c>)
 800171c:	edc3 7a00 	vstr	s15, [r3]
							currentcalistate=L3GD20_calibrated;
 8001720:	4b18      	ldr	r3, [pc, #96]	; (8001784 <L3GD20_loop+0x850>)
 8001722:	2202      	movs	r2, #2
 8001724:	701a      	strb	r2, [r3, #0]
							break;
 8001726:	e004      	b.n	8001732 <L3GD20_loop+0x7fe>
						break;
 8001728:	bf00      	nop
 800172a:	e002      	b.n	8001732 <L3GD20_loop+0x7fe>
						break;
 800172c:	bf00      	nop
 800172e:	e000      	b.n	8001732 <L3GD20_loop+0x7fe>
						break;
 8001730:	bf00      	nop
			currentState=L3GD20_fisrt;
 8001732:	4b15      	ldr	r3, [pc, #84]	; (8001788 <L3GD20_loop+0x854>)
 8001734:	2200      	movs	r2, #0
 8001736:	701a      	strb	r2, [r3, #0]
			dataReadyFlag=L3GD20_DATA_READY;
 8001738:	4b14      	ldr	r3, [pc, #80]	; (800178c <L3GD20_loop+0x858>)
 800173a:	2201      	movs	r2, #1
 800173c:	701a      	strb	r2, [r3, #0]
			break;
 800173e:	e000      	b.n	8001742 <L3GD20_loop+0x80e>
				break;
 8001740:	bf00      	nop

		}
}
 8001742:	bf00      	nop
 8001744:	3760      	adds	r7, #96	; 0x60
 8001746:	46bd      	mov	sp, r7
 8001748:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800174c:	200000d8 	.word	0x200000d8
 8001750:	20001078 	.word	0x20001078
 8001754:	20002018 	.word	0x20002018
 8001758:	66666667 	.word	0x66666667
 800175c:	20000098 	.word	0x20000098
 8001760:	2000009c 	.word	0x2000009c
 8001764:	200000a0 	.word	0x200000a0
 8001768:	200000c8 	.word	0x200000c8
 800176c:	200000cc 	.word	0x200000cc
 8001770:	200000d0 	.word	0x200000d0
 8001774:	3d8f5c29 	.word	0x3d8f5c29
 8001778:	200000a4 	.word	0x200000a4
 800177c:	200000a8 	.word	0x200000a8
 8001780:	200000ac 	.word	0x200000ac
 8001784:	20000088 	.word	0x20000088
 8001788:	20000089 	.word	0x20000089
 800178c:	20000000 	.word	0x20000000

08001790 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001794:	f000 fe66 	bl	8002464 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001798:	f000 f838 	bl	800180c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  ITM_Port32(31)=1;
 800179c:	4b16      	ldr	r3, [pc, #88]	; (80017f8 <main+0x68>)
 800179e:	2201      	movs	r2, #1
 80017a0:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017a2:	f000 fa6b 	bl	8001c7c <MX_GPIO_Init>
  MX_SPI1_Init();
 80017a6:	f000 f8e1 	bl	800196c <MX_SPI1_Init>
  MX_TIM4_Init();
 80017aa:	f000 f9a5 	bl	8001af8 <MX_TIM4_Init>
  MX_ADC1_Init();
 80017ae:	f000 f88b 	bl	80018c8 <MX_ADC1_Init>
  MX_SPI2_Init();
 80017b2:	f000 f911 	bl	80019d8 <MX_SPI2_Init>
  MX_TIM2_Init();
 80017b6:	f000 f947 	bl	8001a48 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80017ba:	f000 fa35 	bl	8001c28 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("hello world\r\n");
 80017be:	480f      	ldr	r0, [pc, #60]	; (80017fc <main+0x6c>)
 80017c0:	f003 ffd6 	bl	8005770 <puts>
  ITM_Port32(31)=2;
 80017c4:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <main+0x68>)
 80017c6:	2202      	movs	r2, #2
 80017c8:	601a      	str	r2, [r3, #0]


  L3GD20_Init();
 80017ca:	f7ff faed 	bl	8000da8 <L3GD20_Init>

//  UartInit();
//  GyroInit();

  /* USER CODE END 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80017ce:	480c      	ldr	r0, [pc, #48]	; (8001800 <main+0x70>)
 80017d0:	f002 fe46 	bl	8004460 <HAL_TIM_Base_Start_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  	z = DisplayAxisValues();
//	  	HAL_Delay(100);
		L3GD20_loop();
 80017d4:	f7ff fbae 	bl	8000f34 <L3GD20_loop>
		HAL_Delay(1);
 80017d8:	2001      	movs	r0, #1
 80017da:	f000 feb5 	bl	8002548 <HAL_Delay>
//		HAL_Delay(100); /* Insert delay 100 ms */
//		HAL_GPIO_TogglePin(LED10_GPIO_Port, LED10_Pin);
//		HAL_Delay(100); /* Insert delay 100 ms */
//		HAL_GPIO_TogglePin(LED11_GPIO_Port, LED11_Pin);
//		HAL_Delay(100); /* Insert delay 100 ms */
		printf("i value : %i\r\n",i);
 80017de:	4b09      	ldr	r3, [pc, #36]	; (8001804 <main+0x74>)
 80017e0:	881b      	ldrh	r3, [r3, #0]
 80017e2:	4619      	mov	r1, r3
 80017e4:	4808      	ldr	r0, [pc, #32]	; (8001808 <main+0x78>)
 80017e6:	f003 ff5d 	bl	80056a4 <iprintf>
		i=i+1;
 80017ea:	4b06      	ldr	r3, [pc, #24]	; (8001804 <main+0x74>)
 80017ec:	881b      	ldrh	r3, [r3, #0]
 80017ee:	3301      	adds	r3, #1
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	4b04      	ldr	r3, [pc, #16]	; (8001804 <main+0x74>)
 80017f4:	801a      	strh	r2, [r3, #0]
		L3GD20_loop();
 80017f6:	e7ed      	b.n	80017d4 <main+0x44>
 80017f8:	e000007c 	.word	0xe000007c
 80017fc:	08006458 	.word	0x08006458
 8001800:	200030c8 	.word	0x200030c8
 8001804:	2000319c 	.word	0x2000319c
 8001808:	08006468 	.word	0x08006468

0800180c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b094      	sub	sp, #80	; 0x50
 8001810:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001812:	f107 0320 	add.w	r3, r7, #32
 8001816:	2230      	movs	r2, #48	; 0x30
 8001818:	2100      	movs	r1, #0
 800181a:	4618      	mov	r0, r3
 800181c:	f004 f888 	bl	8005930 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001820:	f107 030c 	add.w	r3, r7, #12
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
 800182e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001830:	2300      	movs	r3, #0
 8001832:	60bb      	str	r3, [r7, #8]
 8001834:	4b22      	ldr	r3, [pc, #136]	; (80018c0 <SystemClock_Config+0xb4>)
 8001836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001838:	4a21      	ldr	r2, [pc, #132]	; (80018c0 <SystemClock_Config+0xb4>)
 800183a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800183e:	6413      	str	r3, [r2, #64]	; 0x40
 8001840:	4b1f      	ldr	r3, [pc, #124]	; (80018c0 <SystemClock_Config+0xb4>)
 8001842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001848:	60bb      	str	r3, [r7, #8]
 800184a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800184c:	2300      	movs	r3, #0
 800184e:	607b      	str	r3, [r7, #4]
 8001850:	4b1c      	ldr	r3, [pc, #112]	; (80018c4 <SystemClock_Config+0xb8>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a1b      	ldr	r2, [pc, #108]	; (80018c4 <SystemClock_Config+0xb8>)
 8001856:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800185a:	6013      	str	r3, [r2, #0]
 800185c:	4b19      	ldr	r3, [pc, #100]	; (80018c4 <SystemClock_Config+0xb8>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001864:	607b      	str	r3, [r7, #4]
 8001866:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001868:	2302      	movs	r3, #2
 800186a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800186c:	2301      	movs	r3, #1
 800186e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001870:	2310      	movs	r3, #16
 8001872:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001874:	2300      	movs	r3, #0
 8001876:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001878:	f107 0320 	add.w	r3, r7, #32
 800187c:	4618      	mov	r0, r3
 800187e:	f001 fb9f 	bl	8002fc0 <HAL_RCC_OscConfig>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001888:	f000 fad0 	bl	8001e2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800188c:	230f      	movs	r3, #15
 800188e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001890:	2300      	movs	r3, #0
 8001892:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001898:	2300      	movs	r3, #0
 800189a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800189c:	2300      	movs	r3, #0
 800189e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80018a0:	f107 030c 	add.w	r3, r7, #12
 80018a4:	2100      	movs	r1, #0
 80018a6:	4618      	mov	r0, r3
 80018a8:	f001 fe02 	bl	80034b0 <HAL_RCC_ClockConfig>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80018b2:	f000 fabb 	bl	8001e2c <Error_Handler>
  }
}
 80018b6:	bf00      	nop
 80018b8:	3750      	adds	r7, #80	; 0x50
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40023800 	.word	0x40023800
 80018c4:	40007000 	.word	0x40007000

080018c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018ce:	463b      	mov	r3, r7
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80018da:	4b21      	ldr	r3, [pc, #132]	; (8001960 <MX_ADC1_Init+0x98>)
 80018dc:	4a21      	ldr	r2, [pc, #132]	; (8001964 <MX_ADC1_Init+0x9c>)
 80018de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80018e0:	4b1f      	ldr	r3, [pc, #124]	; (8001960 <MX_ADC1_Init+0x98>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80018e6:	4b1e      	ldr	r3, [pc, #120]	; (8001960 <MX_ADC1_Init+0x98>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80018ec:	4b1c      	ldr	r3, [pc, #112]	; (8001960 <MX_ADC1_Init+0x98>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80018f2:	4b1b      	ldr	r3, [pc, #108]	; (8001960 <MX_ADC1_Init+0x98>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018f8:	4b19      	ldr	r3, [pc, #100]	; (8001960 <MX_ADC1_Init+0x98>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001900:	4b17      	ldr	r3, [pc, #92]	; (8001960 <MX_ADC1_Init+0x98>)
 8001902:	2200      	movs	r2, #0
 8001904:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001906:	4b16      	ldr	r3, [pc, #88]	; (8001960 <MX_ADC1_Init+0x98>)
 8001908:	4a17      	ldr	r2, [pc, #92]	; (8001968 <MX_ADC1_Init+0xa0>)
 800190a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800190c:	4b14      	ldr	r3, [pc, #80]	; (8001960 <MX_ADC1_Init+0x98>)
 800190e:	2200      	movs	r2, #0
 8001910:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001912:	4b13      	ldr	r3, [pc, #76]	; (8001960 <MX_ADC1_Init+0x98>)
 8001914:	2201      	movs	r2, #1
 8001916:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001918:	4b11      	ldr	r3, [pc, #68]	; (8001960 <MX_ADC1_Init+0x98>)
 800191a:	2200      	movs	r2, #0
 800191c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001920:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <MX_ADC1_Init+0x98>)
 8001922:	2201      	movs	r2, #1
 8001924:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001926:	480e      	ldr	r0, [pc, #56]	; (8001960 <MX_ADC1_Init+0x98>)
 8001928:	f000 fe32 	bl	8002590 <HAL_ADC_Init>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001932:	f000 fa7b 	bl	8001e2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001936:	2304      	movs	r3, #4
 8001938:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800193a:	2301      	movs	r3, #1
 800193c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800193e:	2300      	movs	r3, #0
 8001940:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001942:	463b      	mov	r3, r7
 8001944:	4619      	mov	r1, r3
 8001946:	4806      	ldr	r0, [pc, #24]	; (8001960 <MX_ADC1_Init+0x98>)
 8001948:	f000 fe66 	bl	8002618 <HAL_ADC_ConfigChannel>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001952:	f000 fa6b 	bl	8001e2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001956:	bf00      	nop
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20002fd0 	.word	0x20002fd0
 8001964:	40012000 	.word	0x40012000
 8001968:	0f000001 	.word	0x0f000001

0800196c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001970:	4b17      	ldr	r3, [pc, #92]	; (80019d0 <MX_SPI1_Init+0x64>)
 8001972:	4a18      	ldr	r2, [pc, #96]	; (80019d4 <MX_SPI1_Init+0x68>)
 8001974:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001976:	4b16      	ldr	r3, [pc, #88]	; (80019d0 <MX_SPI1_Init+0x64>)
 8001978:	f44f 7282 	mov.w	r2, #260	; 0x104
 800197c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800197e:	4b14      	ldr	r3, [pc, #80]	; (80019d0 <MX_SPI1_Init+0x64>)
 8001980:	2200      	movs	r2, #0
 8001982:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001984:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <MX_SPI1_Init+0x64>)
 8001986:	2200      	movs	r2, #0
 8001988:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800198a:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <MX_SPI1_Init+0x64>)
 800198c:	2200      	movs	r2, #0
 800198e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001990:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <MX_SPI1_Init+0x64>)
 8001992:	2200      	movs	r2, #0
 8001994:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001996:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <MX_SPI1_Init+0x64>)
 8001998:	f44f 7200 	mov.w	r2, #512	; 0x200
 800199c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800199e:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <MX_SPI1_Init+0x64>)
 80019a0:	2218      	movs	r2, #24
 80019a2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019a4:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <MX_SPI1_Init+0x64>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019aa:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <MX_SPI1_Init+0x64>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019b0:	4b07      	ldr	r3, [pc, #28]	; (80019d0 <MX_SPI1_Init+0x64>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80019b6:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <MX_SPI1_Init+0x64>)
 80019b8:	220a      	movs	r2, #10
 80019ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019bc:	4804      	ldr	r0, [pc, #16]	; (80019d0 <MX_SPI1_Init+0x64>)
 80019be:	f001 ff57 	bl	8003870 <HAL_SPI_Init>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80019c8:	f000 fa30 	bl	8001e2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019cc:	bf00      	nop
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	20003018 	.word	0x20003018
 80019d4:	40013000 	.word	0x40013000

080019d8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80019dc:	4b18      	ldr	r3, [pc, #96]	; (8001a40 <MX_SPI2_Init+0x68>)
 80019de:	4a19      	ldr	r2, [pc, #100]	; (8001a44 <MX_SPI2_Init+0x6c>)
 80019e0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80019e2:	4b17      	ldr	r3, [pc, #92]	; (8001a40 <MX_SPI2_Init+0x68>)
 80019e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019e8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80019ea:	4b15      	ldr	r3, [pc, #84]	; (8001a40 <MX_SPI2_Init+0x68>)
 80019ec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80019f0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80019f2:	4b13      	ldr	r3, [pc, #76]	; (8001a40 <MX_SPI2_Init+0x68>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019f8:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <MX_SPI2_Init+0x68>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019fe:	4b10      	ldr	r3, [pc, #64]	; (8001a40 <MX_SPI2_Init+0x68>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a04:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <MX_SPI2_Init+0x68>)
 8001a06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a0a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a0c:	4b0c      	ldr	r3, [pc, #48]	; (8001a40 <MX_SPI2_Init+0x68>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a12:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <MX_SPI2_Init+0x68>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a18:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <MX_SPI2_Init+0x68>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a1e:	4b08      	ldr	r3, [pc, #32]	; (8001a40 <MX_SPI2_Init+0x68>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001a24:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <MX_SPI2_Init+0x68>)
 8001a26:	220a      	movs	r2, #10
 8001a28:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a2a:	4805      	ldr	r0, [pc, #20]	; (8001a40 <MX_SPI2_Init+0x68>)
 8001a2c:	f001 ff20 	bl	8003870 <HAL_SPI_Init>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8001a36:	f000 f9f9 	bl	8001e2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20003070 	.word	0x20003070
 8001a44:	40003800 	.word	0x40003800

08001a48 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b08a      	sub	sp, #40	; 0x28
 8001a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a4e:	f107 0320 	add.w	r3, r7, #32
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a58:	1d3b      	adds	r3, r7, #4
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	605a      	str	r2, [r3, #4]
 8001a60:	609a      	str	r2, [r3, #8]
 8001a62:	60da      	str	r2, [r3, #12]
 8001a64:	611a      	str	r2, [r3, #16]
 8001a66:	615a      	str	r2, [r3, #20]
 8001a68:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a6a:	4b22      	ldr	r3, [pc, #136]	; (8001af4 <MX_TIM2_Init+0xac>)
 8001a6c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a70:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a72:	4b20      	ldr	r3, [pc, #128]	; (8001af4 <MX_TIM2_Init+0xac>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a78:	4b1e      	ldr	r3, [pc, #120]	; (8001af4 <MX_TIM2_Init+0xac>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001a7e:	4b1d      	ldr	r3, [pc, #116]	; (8001af4 <MX_TIM2_Init+0xac>)
 8001a80:	f04f 32ff 	mov.w	r2, #4294967295
 8001a84:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a86:	4b1b      	ldr	r3, [pc, #108]	; (8001af4 <MX_TIM2_Init+0xac>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a8c:	4b19      	ldr	r3, [pc, #100]	; (8001af4 <MX_TIM2_Init+0xac>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a92:	4818      	ldr	r0, [pc, #96]	; (8001af4 <MX_TIM2_Init+0xac>)
 8001a94:	f002 fd54 	bl	8004540 <HAL_TIM_PWM_Init>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001a9e:	f000 f9c5 	bl	8001e2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001aaa:	f107 0320 	add.w	r3, r7, #32
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4810      	ldr	r0, [pc, #64]	; (8001af4 <MX_TIM2_Init+0xac>)
 8001ab2:	f003 fa09 	bl	8004ec8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001abc:	f000 f9b6 	bl	8001e2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ac0:	2360      	movs	r3, #96	; 0x60
 8001ac2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001acc:	2300      	movs	r3, #0
 8001ace:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ad0:	1d3b      	adds	r3, r7, #4
 8001ad2:	2208      	movs	r2, #8
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4807      	ldr	r0, [pc, #28]	; (8001af4 <MX_TIM2_Init+0xac>)
 8001ad8:	f002 fd82 	bl	80045e0 <HAL_TIM_PWM_ConfigChannel>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001ae2:	f000 f9a3 	bl	8001e2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001ae6:	4803      	ldr	r0, [pc, #12]	; (8001af4 <MX_TIM2_Init+0xac>)
 8001ae8:	f000 fb0a 	bl	8002100 <HAL_TIM_MspPostInit>

}
 8001aec:	bf00      	nop
 8001aee:	3728      	adds	r7, #40	; 0x28
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	200030c8 	.word	0x200030c8

08001af8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08e      	sub	sp, #56	; 0x38
 8001afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001afe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	605a      	str	r2, [r3, #4]
 8001b08:	609a      	str	r2, [r3, #8]
 8001b0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b0c:	f107 0320 	add.w	r3, r7, #32
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b16:	1d3b      	adds	r3, r7, #4
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	605a      	str	r2, [r3, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
 8001b20:	60da      	str	r2, [r3, #12]
 8001b22:	611a      	str	r2, [r3, #16]
 8001b24:	615a      	str	r2, [r3, #20]
 8001b26:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b28:	4b3d      	ldr	r3, [pc, #244]	; (8001c20 <MX_TIM4_Init+0x128>)
 8001b2a:	4a3e      	ldr	r2, [pc, #248]	; (8001c24 <MX_TIM4_Init+0x12c>)
 8001b2c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001b2e:	4b3c      	ldr	r3, [pc, #240]	; (8001c20 <MX_TIM4_Init+0x128>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b34:	4b3a      	ldr	r3, [pc, #232]	; (8001c20 <MX_TIM4_Init+0x128>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001b3a:	4b39      	ldr	r3, [pc, #228]	; (8001c20 <MX_TIM4_Init+0x128>)
 8001b3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b40:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b42:	4b37      	ldr	r3, [pc, #220]	; (8001c20 <MX_TIM4_Init+0x128>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b48:	4b35      	ldr	r3, [pc, #212]	; (8001c20 <MX_TIM4_Init+0x128>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b4e:	4834      	ldr	r0, [pc, #208]	; (8001c20 <MX_TIM4_Init+0x128>)
 8001b50:	f002 fc36 	bl	80043c0 <HAL_TIM_Base_Init>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001b5a:	f000 f967 	bl	8001e2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b62:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b68:	4619      	mov	r1, r3
 8001b6a:	482d      	ldr	r0, [pc, #180]	; (8001c20 <MX_TIM4_Init+0x128>)
 8001b6c:	f002 fdfa 	bl	8004764 <HAL_TIM_ConfigClockSource>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001b76:	f000 f959 	bl	8001e2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001b7a:	4829      	ldr	r0, [pc, #164]	; (8001c20 <MX_TIM4_Init+0x128>)
 8001b7c:	f002 fce0 	bl	8004540 <HAL_TIM_PWM_Init>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001b86:	f000 f951 	bl	8001e2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b92:	f107 0320 	add.w	r3, r7, #32
 8001b96:	4619      	mov	r1, r3
 8001b98:	4821      	ldr	r0, [pc, #132]	; (8001c20 <MX_TIM4_Init+0x128>)
 8001b9a:	f003 f995 	bl	8004ec8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001ba4:	f000 f942 	bl	8001e2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ba8:	2360      	movs	r3, #96	; 0x60
 8001baa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001bac:	2300      	movs	r3, #0
 8001bae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bb8:	1d3b      	adds	r3, r7, #4
 8001bba:	2200      	movs	r2, #0
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4818      	ldr	r0, [pc, #96]	; (8001c20 <MX_TIM4_Init+0x128>)
 8001bc0:	f002 fd0e 	bl	80045e0 <HAL_TIM_PWM_ConfigChannel>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001bca:	f000 f92f 	bl	8001e2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bce:	1d3b      	adds	r3, r7, #4
 8001bd0:	2204      	movs	r2, #4
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4812      	ldr	r0, [pc, #72]	; (8001c20 <MX_TIM4_Init+0x128>)
 8001bd6:	f002 fd03 	bl	80045e0 <HAL_TIM_PWM_ConfigChannel>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001be0:	f000 f924 	bl	8001e2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001be4:	1d3b      	adds	r3, r7, #4
 8001be6:	2208      	movs	r2, #8
 8001be8:	4619      	mov	r1, r3
 8001bea:	480d      	ldr	r0, [pc, #52]	; (8001c20 <MX_TIM4_Init+0x128>)
 8001bec:	f002 fcf8 	bl	80045e0 <HAL_TIM_PWM_ConfigChannel>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8001bf6:	f000 f919 	bl	8001e2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001bfa:	1d3b      	adds	r3, r7, #4
 8001bfc:	220c      	movs	r2, #12
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4807      	ldr	r0, [pc, #28]	; (8001c20 <MX_TIM4_Init+0x128>)
 8001c02:	f002 fced 	bl	80045e0 <HAL_TIM_PWM_ConfigChannel>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8001c0c:	f000 f90e 	bl	8001e2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001c10:	4803      	ldr	r0, [pc, #12]	; (8001c20 <MX_TIM4_Init+0x128>)
 8001c12:	f000 fa75 	bl	8002100 <HAL_TIM_MspPostInit>

}
 8001c16:	bf00      	nop
 8001c18:	3738      	adds	r7, #56	; 0x38
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20003110 	.word	0x20003110
 8001c24:	40000800 	.word	0x40000800

08001c28 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c2c:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <MX_USART1_UART_Init+0x4c>)
 8001c2e:	4a12      	ldr	r2, [pc, #72]	; (8001c78 <MX_USART1_UART_Init+0x50>)
 8001c30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c32:	4b10      	ldr	r3, [pc, #64]	; (8001c74 <MX_USART1_UART_Init+0x4c>)
 8001c34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c3a:	4b0e      	ldr	r3, [pc, #56]	; (8001c74 <MX_USART1_UART_Init+0x4c>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c40:	4b0c      	ldr	r3, [pc, #48]	; (8001c74 <MX_USART1_UART_Init+0x4c>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c46:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <MX_USART1_UART_Init+0x4c>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c4c:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <MX_USART1_UART_Init+0x4c>)
 8001c4e:	220c      	movs	r2, #12
 8001c50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c52:	4b08      	ldr	r3, [pc, #32]	; (8001c74 <MX_USART1_UART_Init+0x4c>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c58:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <MX_USART1_UART_Init+0x4c>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c5e:	4805      	ldr	r0, [pc, #20]	; (8001c74 <MX_USART1_UART_Init+0x4c>)
 8001c60:	f003 f9ae 	bl	8004fc0 <HAL_UART_Init>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c6a:	f000 f8df 	bl	8001e2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20003158 	.word	0x20003158
 8001c78:	40011000 	.word	0x40011000

08001c7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b08a      	sub	sp, #40	; 0x28
 8001c80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c82:	f107 0314 	add.w	r3, r7, #20
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	605a      	str	r2, [r3, #4]
 8001c8c:	609a      	str	r2, [r3, #8]
 8001c8e:	60da      	str	r2, [r3, #12]
 8001c90:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	613b      	str	r3, [r7, #16]
 8001c96:	4b60      	ldr	r3, [pc, #384]	; (8001e18 <MX_GPIO_Init+0x19c>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	4a5f      	ldr	r2, [pc, #380]	; (8001e18 <MX_GPIO_Init+0x19c>)
 8001c9c:	f043 0304 	orr.w	r3, r3, #4
 8001ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca2:	4b5d      	ldr	r3, [pc, #372]	; (8001e18 <MX_GPIO_Init+0x19c>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	f003 0304 	and.w	r3, r3, #4
 8001caa:	613b      	str	r3, [r7, #16]
 8001cac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	4b59      	ldr	r3, [pc, #356]	; (8001e18 <MX_GPIO_Init+0x19c>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	4a58      	ldr	r2, [pc, #352]	; (8001e18 <MX_GPIO_Init+0x19c>)
 8001cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cbe:	4b56      	ldr	r3, [pc, #344]	; (8001e18 <MX_GPIO_Init+0x19c>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60bb      	str	r3, [r7, #8]
 8001cce:	4b52      	ldr	r3, [pc, #328]	; (8001e18 <MX_GPIO_Init+0x19c>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	4a51      	ldr	r2, [pc, #324]	; (8001e18 <MX_GPIO_Init+0x19c>)
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cda:	4b4f      	ldr	r3, [pc, #316]	; (8001e18 <MX_GPIO_Init+0x19c>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	60bb      	str	r3, [r7, #8]
 8001ce4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	607b      	str	r3, [r7, #4]
 8001cea:	4b4b      	ldr	r3, [pc, #300]	; (8001e18 <MX_GPIO_Init+0x19c>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	4a4a      	ldr	r2, [pc, #296]	; (8001e18 <MX_GPIO_Init+0x19c>)
 8001cf0:	f043 0302 	orr.w	r3, r3, #2
 8001cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf6:	4b48      	ldr	r3, [pc, #288]	; (8001e18 <MX_GPIO_Init+0x19c>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	607b      	str	r3, [r7, #4]
 8001d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	603b      	str	r3, [r7, #0]
 8001d06:	4b44      	ldr	r3, [pc, #272]	; (8001e18 <MX_GPIO_Init+0x19c>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	4a43      	ldr	r2, [pc, #268]	; (8001e18 <MX_GPIO_Init+0x19c>)
 8001d0c:	f043 0308 	orr.w	r3, r3, #8
 8001d10:	6313      	str	r3, [r2, #48]	; 0x30
 8001d12:	4b41      	ldr	r3, [pc, #260]	; (8001e18 <MX_GPIO_Init+0x19c>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	f003 0308 	and.w	r3, r3, #8
 8001d1a:	603b      	str	r3, [r7, #0]
 8001d1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED10_Pin|RF_EMITTER_Pin|D_C_Pin|DIAGONAL_EMITTER_Pin
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f641 51e7 	movw	r1, #7655	; 0x1de7
 8001d24:	483d      	ldr	r0, [pc, #244]	; (8001e1c <MX_GPIO_Init+0x1a0>)
 8001d26:	f001 f917 	bl	8002f58 <HAL_GPIO_WritePin>
                          |CE_Pin|LF_EMITTER_Pin|CS_Pin|LED3_Pin
                          |LED4_Pin|LED5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED11_Pin|LED9_Pin|LED8_Pin, GPIO_PIN_RESET);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f641 0110 	movw	r1, #6160	; 0x1810
 8001d30:	483b      	ldr	r0, [pc, #236]	; (8001e20 <MX_GPIO_Init+0x1a4>)
 8001d32:	f001 f911 	bl	8002f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED7_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001d36:	2200      	movs	r2, #0
 8001d38:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 8001d3c:	4839      	ldr	r0, [pc, #228]	; (8001e24 <MX_GPIO_Init+0x1a8>)
 8001d3e:	f001 f90b 	bl	8002f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 8001d42:	2200      	movs	r2, #0
 8001d44:	2104      	movs	r1, #4
 8001d46:	4838      	ldr	r0, [pc, #224]	; (8001e28 <MX_GPIO_Init+0x1ac>)
 8001d48:	f001 f906 	bl	8002f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TB1_Pin */
  GPIO_InitStruct.Pin = TB1_Pin;
 8001d4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d52:	2300      	movs	r3, #0
 8001d54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TB1_GPIO_Port, &GPIO_InitStruct);
 8001d5a:	f107 0314 	add.w	r3, r7, #20
 8001d5e:	4619      	mov	r1, r3
 8001d60:	482e      	ldr	r0, [pc, #184]	; (8001e1c <MX_GPIO_Init+0x1a0>)
 8001d62:	f000 ff5d 	bl	8002c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED10_Pin RF_EMITTER_Pin D_C_Pin DIAGONAL_EMITTER_Pin
                           CE_Pin LF_EMITTER_Pin CS_Pin LED3_Pin
                           LED4_Pin LED5_Pin */
  GPIO_InitStruct.Pin = LED10_Pin|RF_EMITTER_Pin|D_C_Pin|DIAGONAL_EMITTER_Pin
 8001d66:	f641 53e7 	movw	r3, #7655	; 0x1de7
 8001d6a:	617b      	str	r3, [r7, #20]
                          |CE_Pin|LF_EMITTER_Pin|CS_Pin|LED3_Pin
                          |LED4_Pin|LED5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d74:	2300      	movs	r3, #0
 8001d76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d78:	f107 0314 	add.w	r3, r7, #20
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4827      	ldr	r0, [pc, #156]	; (8001e1c <MX_GPIO_Init+0x1a0>)
 8001d80:	f000 ff4e 	bl	8002c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : RENCHA_Pin RENCHB_Pin DRDY_Pin LENCHA_Pin */
  GPIO_InitStruct.Pin = RENCHA_Pin|RENCHB_Pin|DRDY_Pin|LENCHA_Pin;
 8001d84:	f248 030b 	movw	r3, #32779	; 0x800b
 8001d88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d92:	f107 0314 	add.w	r3, r7, #20
 8001d96:	4619      	mov	r1, r3
 8001d98:	4822      	ldr	r0, [pc, #136]	; (8001e24 <MX_GPIO_Init+0x1a8>)
 8001d9a:	f000 ff41 	bl	8002c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 INT_Pin MISO_Pin LENCHB_Pin
                           BOOT0_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|INT_Pin|MISO_Pin|LENCHB_Pin
 8001d9e:	f244 432c 	movw	r3, #17452	; 0x442c
 8001da2:	617b      	str	r3, [r7, #20]
                          |BOOT0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001da4:	2300      	movs	r3, #0
 8001da6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dac:	f107 0314 	add.w	r3, r7, #20
 8001db0:	4619      	mov	r1, r3
 8001db2:	481b      	ldr	r0, [pc, #108]	; (8001e20 <MX_GPIO_Init+0x1a4>)
 8001db4:	f000 ff34 	bl	8002c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED11_Pin LED9_Pin LED8_Pin */
  GPIO_InitStruct.Pin = LED11_Pin|LED9_Pin|LED8_Pin;
 8001db8:	f641 0310 	movw	r3, #6160	; 0x1810
 8001dbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dca:	f107 0314 	add.w	r3, r7, #20
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4813      	ldr	r0, [pc, #76]	; (8001e20 <MX_GPIO_Init+0x1a4>)
 8001dd2:	f000 ff25 	bl	8002c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED7_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED7_Pin|LED1_Pin|LED2_Pin;
 8001dd6:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001dda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de0:	2300      	movs	r3, #0
 8001de2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de4:	2300      	movs	r3, #0
 8001de6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de8:	f107 0314 	add.w	r3, r7, #20
 8001dec:	4619      	mov	r1, r3
 8001dee:	480d      	ldr	r0, [pc, #52]	; (8001e24 <MX_GPIO_Init+0x1a8>)
 8001df0:	f000 ff16 	bl	8002c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED6_Pin */
  GPIO_InitStruct.Pin = LED6_Pin;
 8001df4:	2304      	movs	r3, #4
 8001df6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e00:	2300      	movs	r3, #0
 8001e02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED6_GPIO_Port, &GPIO_InitStruct);
 8001e04:	f107 0314 	add.w	r3, r7, #20
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4807      	ldr	r0, [pc, #28]	; (8001e28 <MX_GPIO_Init+0x1ac>)
 8001e0c:	f000 ff08 	bl	8002c20 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e10:	bf00      	nop
 8001e12:	3728      	adds	r7, #40	; 0x28
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	40020800 	.word	0x40020800
 8001e20:	40020400 	.word	0x40020400
 8001e24:	40020000 	.word	0x40020000
 8001e28:	40020c00 	.word	0x40020c00

08001e2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e30:	b672      	cpsid	i
}
 8001e32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e34:	e7fe      	b.n	8001e34 <Error_Handler+0x8>
	...

08001e38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	607b      	str	r3, [r7, #4]
 8001e42:	4b10      	ldr	r3, [pc, #64]	; (8001e84 <HAL_MspInit+0x4c>)
 8001e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e46:	4a0f      	ldr	r2, [pc, #60]	; (8001e84 <HAL_MspInit+0x4c>)
 8001e48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e4e:	4b0d      	ldr	r3, [pc, #52]	; (8001e84 <HAL_MspInit+0x4c>)
 8001e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e56:	607b      	str	r3, [r7, #4]
 8001e58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	603b      	str	r3, [r7, #0]
 8001e5e:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <HAL_MspInit+0x4c>)
 8001e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e62:	4a08      	ldr	r2, [pc, #32]	; (8001e84 <HAL_MspInit+0x4c>)
 8001e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e68:	6413      	str	r3, [r2, #64]	; 0x40
 8001e6a:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <HAL_MspInit+0x4c>)
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e72:	603b      	str	r3, [r7, #0]
 8001e74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e76:	bf00      	nop
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	40023800 	.word	0x40023800

08001e88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b08c      	sub	sp, #48	; 0x30
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e90:	f107 031c 	add.w	r3, r7, #28
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
 8001e9c:	60da      	str	r2, [r3, #12]
 8001e9e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a31      	ldr	r2, [pc, #196]	; (8001f6c <HAL_ADC_MspInit+0xe4>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d15b      	bne.n	8001f62 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61bb      	str	r3, [r7, #24]
 8001eae:	4b30      	ldr	r3, [pc, #192]	; (8001f70 <HAL_ADC_MspInit+0xe8>)
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb2:	4a2f      	ldr	r2, [pc, #188]	; (8001f70 <HAL_ADC_MspInit+0xe8>)
 8001eb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eba:	4b2d      	ldr	r3, [pc, #180]	; (8001f70 <HAL_ADC_MspInit+0xe8>)
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec2:	61bb      	str	r3, [r7, #24]
 8001ec4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	617b      	str	r3, [r7, #20]
 8001eca:	4b29      	ldr	r3, [pc, #164]	; (8001f70 <HAL_ADC_MspInit+0xe8>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	4a28      	ldr	r2, [pc, #160]	; (8001f70 <HAL_ADC_MspInit+0xe8>)
 8001ed0:	f043 0304 	orr.w	r3, r3, #4
 8001ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed6:	4b26      	ldr	r3, [pc, #152]	; (8001f70 <HAL_ADC_MspInit+0xe8>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	f003 0304 	and.w	r3, r3, #4
 8001ede:	617b      	str	r3, [r7, #20]
 8001ee0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	613b      	str	r3, [r7, #16]
 8001ee6:	4b22      	ldr	r3, [pc, #136]	; (8001f70 <HAL_ADC_MspInit+0xe8>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	4a21      	ldr	r2, [pc, #132]	; (8001f70 <HAL_ADC_MspInit+0xe8>)
 8001eec:	f043 0301 	orr.w	r3, r3, #1
 8001ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef2:	4b1f      	ldr	r3, [pc, #124]	; (8001f70 <HAL_ADC_MspInit+0xe8>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	613b      	str	r3, [r7, #16]
 8001efc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	60fb      	str	r3, [r7, #12]
 8001f02:	4b1b      	ldr	r3, [pc, #108]	; (8001f70 <HAL_ADC_MspInit+0xe8>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f06:	4a1a      	ldr	r2, [pc, #104]	; (8001f70 <HAL_ADC_MspInit+0xe8>)
 8001f08:	f043 0302 	orr.w	r3, r3, #2
 8001f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0e:	4b18      	ldr	r3, [pc, #96]	; (8001f70 <HAL_ADC_MspInit+0xe8>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PC4     ------> ADC1_IN14
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = VOL_METER_Pin|R_RECEIVER_Pin;
 8001f1a:	2318      	movs	r3, #24
 8001f1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f22:	2300      	movs	r3, #0
 8001f24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f26:	f107 031c 	add.w	r3, r7, #28
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4811      	ldr	r0, [pc, #68]	; (8001f74 <HAL_ADC_MspInit+0xec>)
 8001f2e:	f000 fe77 	bl	8002c20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RF_RECEIVER_Pin;
 8001f32:	2310      	movs	r3, #16
 8001f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f36:	2303      	movs	r3, #3
 8001f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RF_RECEIVER_GPIO_Port, &GPIO_InitStruct);
 8001f3e:	f107 031c 	add.w	r3, r7, #28
 8001f42:	4619      	mov	r1, r3
 8001f44:	480c      	ldr	r0, [pc, #48]	; (8001f78 <HAL_ADC_MspInit+0xf0>)
 8001f46:	f000 fe6b 	bl	8002c20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = L_RECEIVER_Pin|LF_RECEIVER_Pin;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f52:	2300      	movs	r3, #0
 8001f54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f56:	f107 031c 	add.w	r3, r7, #28
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4807      	ldr	r0, [pc, #28]	; (8001f7c <HAL_ADC_MspInit+0xf4>)
 8001f5e:	f000 fe5f 	bl	8002c20 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f62:	bf00      	nop
 8001f64:	3730      	adds	r7, #48	; 0x30
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40012000 	.word	0x40012000
 8001f70:	40023800 	.word	0x40023800
 8001f74:	40020800 	.word	0x40020800
 8001f78:	40020000 	.word	0x40020000
 8001f7c:	40020400 	.word	0x40020400

08001f80 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08c      	sub	sp, #48	; 0x30
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f88:	f107 031c 	add.w	r3, r7, #28
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	609a      	str	r2, [r3, #8]
 8001f94:	60da      	str	r2, [r3, #12]
 8001f96:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a32      	ldr	r2, [pc, #200]	; (8002068 <HAL_SPI_MspInit+0xe8>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d12c      	bne.n	8001ffc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61bb      	str	r3, [r7, #24]
 8001fa6:	4b31      	ldr	r3, [pc, #196]	; (800206c <HAL_SPI_MspInit+0xec>)
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001faa:	4a30      	ldr	r2, [pc, #192]	; (800206c <HAL_SPI_MspInit+0xec>)
 8001fac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fb2:	4b2e      	ldr	r3, [pc, #184]	; (800206c <HAL_SPI_MspInit+0xec>)
 8001fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fba:	61bb      	str	r3, [r7, #24]
 8001fbc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	617b      	str	r3, [r7, #20]
 8001fc2:	4b2a      	ldr	r3, [pc, #168]	; (800206c <HAL_SPI_MspInit+0xec>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	4a29      	ldr	r2, [pc, #164]	; (800206c <HAL_SPI_MspInit+0xec>)
 8001fc8:	f043 0301 	orr.w	r3, r3, #1
 8001fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fce:	4b27      	ldr	r3, [pc, #156]	; (800206c <HAL_SPI_MspInit+0xec>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	617b      	str	r3, [r7, #20]
 8001fd8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|SDO_Pin|SDI_Pin;
 8001fda:	23e0      	movs	r3, #224	; 0xe0
 8001fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fde:	2302      	movs	r3, #2
 8001fe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fea:	2305      	movs	r3, #5
 8001fec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fee:	f107 031c 	add.w	r3, r7, #28
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	481e      	ldr	r0, [pc, #120]	; (8002070 <HAL_SPI_MspInit+0xf0>)
 8001ff6:	f000 fe13 	bl	8002c20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001ffa:	e031      	b.n	8002060 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a1c      	ldr	r2, [pc, #112]	; (8002074 <HAL_SPI_MspInit+0xf4>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d12c      	bne.n	8002060 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	613b      	str	r3, [r7, #16]
 800200a:	4b18      	ldr	r3, [pc, #96]	; (800206c <HAL_SPI_MspInit+0xec>)
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	4a17      	ldr	r2, [pc, #92]	; (800206c <HAL_SPI_MspInit+0xec>)
 8002010:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002014:	6413      	str	r3, [r2, #64]	; 0x40
 8002016:	4b15      	ldr	r3, [pc, #84]	; (800206c <HAL_SPI_MspInit+0xec>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800201e:	613b      	str	r3, [r7, #16]
 8002020:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	4b11      	ldr	r3, [pc, #68]	; (800206c <HAL_SPI_MspInit+0xec>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	4a10      	ldr	r2, [pc, #64]	; (800206c <HAL_SPI_MspInit+0xec>)
 800202c:	f043 0302 	orr.w	r3, r3, #2
 8002030:	6313      	str	r3, [r2, #48]	; 0x30
 8002032:	4b0e      	ldr	r3, [pc, #56]	; (800206c <HAL_SPI_MspInit+0xec>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CLK_Pin|DATA_IN_Pin;
 800203e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002042:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002044:	2302      	movs	r3, #2
 8002046:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002048:	2300      	movs	r3, #0
 800204a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800204c:	2303      	movs	r3, #3
 800204e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002050:	2305      	movs	r3, #5
 8002052:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002054:	f107 031c 	add.w	r3, r7, #28
 8002058:	4619      	mov	r1, r3
 800205a:	4807      	ldr	r0, [pc, #28]	; (8002078 <HAL_SPI_MspInit+0xf8>)
 800205c:	f000 fde0 	bl	8002c20 <HAL_GPIO_Init>
}
 8002060:	bf00      	nop
 8002062:	3730      	adds	r7, #48	; 0x30
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40013000 	.word	0x40013000
 800206c:	40023800 	.word	0x40023800
 8002070:	40020000 	.word	0x40020000
 8002074:	40003800 	.word	0x40003800
 8002078:	40020400 	.word	0x40020400

0800207c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800208c:	d10d      	bne.n	80020aa <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	4b09      	ldr	r3, [pc, #36]	; (80020b8 <HAL_TIM_PWM_MspInit+0x3c>)
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	4a08      	ldr	r2, [pc, #32]	; (80020b8 <HAL_TIM_PWM_MspInit+0x3c>)
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	6413      	str	r3, [r2, #64]	; 0x40
 800209e:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <HAL_TIM_PWM_MspInit+0x3c>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80020aa:	bf00      	nop
 80020ac:	3714      	adds	r7, #20
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	40023800 	.word	0x40023800

080020bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a0b      	ldr	r2, [pc, #44]	; (80020f8 <HAL_TIM_Base_MspInit+0x3c>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d10d      	bne.n	80020ea <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	60fb      	str	r3, [r7, #12]
 80020d2:	4b0a      	ldr	r3, [pc, #40]	; (80020fc <HAL_TIM_Base_MspInit+0x40>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	4a09      	ldr	r2, [pc, #36]	; (80020fc <HAL_TIM_Base_MspInit+0x40>)
 80020d8:	f043 0304 	orr.w	r3, r3, #4
 80020dc:	6413      	str	r3, [r2, #64]	; 0x40
 80020de:	4b07      	ldr	r3, [pc, #28]	; (80020fc <HAL_TIM_Base_MspInit+0x40>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	f003 0304 	and.w	r3, r3, #4
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80020ea:	bf00      	nop
 80020ec:	3714      	adds	r7, #20
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	40000800 	.word	0x40000800
 80020fc:	40023800 	.word	0x40023800

08002100 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b08a      	sub	sp, #40	; 0x28
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002108:	f107 0314 	add.w	r3, r7, #20
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	605a      	str	r2, [r3, #4]
 8002112:	609a      	str	r2, [r3, #8]
 8002114:	60da      	str	r2, [r3, #12]
 8002116:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002120:	d11e      	bne.n	8002160 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	613b      	str	r3, [r7, #16]
 8002126:	4b22      	ldr	r3, [pc, #136]	; (80021b0 <HAL_TIM_MspPostInit+0xb0>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	4a21      	ldr	r2, [pc, #132]	; (80021b0 <HAL_TIM_MspPostInit+0xb0>)
 800212c:	f043 0301 	orr.w	r3, r3, #1
 8002130:	6313      	str	r3, [r2, #48]	; 0x30
 8002132:	4b1f      	ldr	r3, [pc, #124]	; (80021b0 <HAL_TIM_MspPostInit+0xb0>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	613b      	str	r3, [r7, #16]
 800213c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 800213e:	2304      	movs	r3, #4
 8002140:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002142:	2302      	movs	r3, #2
 8002144:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002146:	2300      	movs	r3, #0
 8002148:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214a:	2300      	movs	r3, #0
 800214c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800214e:	2301      	movs	r3, #1
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8002152:	f107 0314 	add.w	r3, r7, #20
 8002156:	4619      	mov	r1, r3
 8002158:	4816      	ldr	r0, [pc, #88]	; (80021b4 <HAL_TIM_MspPostInit+0xb4>)
 800215a:	f000 fd61 	bl	8002c20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800215e:	e023      	b.n	80021a8 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a14      	ldr	r2, [pc, #80]	; (80021b8 <HAL_TIM_MspPostInit+0xb8>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d11e      	bne.n	80021a8 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	4b10      	ldr	r3, [pc, #64]	; (80021b0 <HAL_TIM_MspPostInit+0xb0>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	4a0f      	ldr	r2, [pc, #60]	; (80021b0 <HAL_TIM_MspPostInit+0xb0>)
 8002174:	f043 0302 	orr.w	r3, r3, #2
 8002178:	6313      	str	r3, [r2, #48]	; 0x30
 800217a:	4b0d      	ldr	r3, [pc, #52]	; (80021b0 <HAL_TIM_MspPostInit+0xb0>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LPWMA_Pin|LPWMB_Pin|RPWMA_Pin|RPWMB_Pin;
 8002186:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800218a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218c:	2302      	movs	r3, #2
 800218e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002190:	2300      	movs	r3, #0
 8002192:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002194:	2300      	movs	r3, #0
 8002196:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002198:	2302      	movs	r3, #2
 800219a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800219c:	f107 0314 	add.w	r3, r7, #20
 80021a0:	4619      	mov	r1, r3
 80021a2:	4806      	ldr	r0, [pc, #24]	; (80021bc <HAL_TIM_MspPostInit+0xbc>)
 80021a4:	f000 fd3c 	bl	8002c20 <HAL_GPIO_Init>
}
 80021a8:	bf00      	nop
 80021aa:	3728      	adds	r7, #40	; 0x28
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40023800 	.word	0x40023800
 80021b4:	40020000 	.word	0x40020000
 80021b8:	40000800 	.word	0x40000800
 80021bc:	40020400 	.word	0x40020400

080021c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b08a      	sub	sp, #40	; 0x28
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c8:	f107 0314 	add.w	r3, r7, #20
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	605a      	str	r2, [r3, #4]
 80021d2:	609a      	str	r2, [r3, #8]
 80021d4:	60da      	str	r2, [r3, #12]
 80021d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a19      	ldr	r2, [pc, #100]	; (8002244 <HAL_UART_MspInit+0x84>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d12c      	bne.n	800223c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	613b      	str	r3, [r7, #16]
 80021e6:	4b18      	ldr	r3, [pc, #96]	; (8002248 <HAL_UART_MspInit+0x88>)
 80021e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ea:	4a17      	ldr	r2, [pc, #92]	; (8002248 <HAL_UART_MspInit+0x88>)
 80021ec:	f043 0310 	orr.w	r3, r3, #16
 80021f0:	6453      	str	r3, [r2, #68]	; 0x44
 80021f2:	4b15      	ldr	r3, [pc, #84]	; (8002248 <HAL_UART_MspInit+0x88>)
 80021f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f6:	f003 0310 	and.w	r3, r3, #16
 80021fa:	613b      	str	r3, [r7, #16]
 80021fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	4b11      	ldr	r3, [pc, #68]	; (8002248 <HAL_UART_MspInit+0x88>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	4a10      	ldr	r2, [pc, #64]	; (8002248 <HAL_UART_MspInit+0x88>)
 8002208:	f043 0301 	orr.w	r3, r3, #1
 800220c:	6313      	str	r3, [r2, #48]	; 0x30
 800220e:	4b0e      	ldr	r3, [pc, #56]	; (8002248 <HAL_UART_MspInit+0x88>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 800221a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800221e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002220:	2302      	movs	r3, #2
 8002222:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	2300      	movs	r3, #0
 8002226:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002228:	2303      	movs	r3, #3
 800222a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800222c:	2307      	movs	r3, #7
 800222e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002230:	f107 0314 	add.w	r3, r7, #20
 8002234:	4619      	mov	r1, r3
 8002236:	4805      	ldr	r0, [pc, #20]	; (800224c <HAL_UART_MspInit+0x8c>)
 8002238:	f000 fcf2 	bl	8002c20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800223c:	bf00      	nop
 800223e:	3728      	adds	r7, #40	; 0x28
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40011000 	.word	0x40011000
 8002248:	40023800 	.word	0x40023800
 800224c:	40020000 	.word	0x40020000

08002250 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002254:	e7fe      	b.n	8002254 <NMI_Handler+0x4>

08002256 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002256:	b480      	push	{r7}
 8002258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800225a:	e7fe      	b.n	800225a <HardFault_Handler+0x4>

0800225c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002260:	e7fe      	b.n	8002260 <MemManage_Handler+0x4>

08002262 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002262:	b480      	push	{r7}
 8002264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002266:	e7fe      	b.n	8002266 <BusFault_Handler+0x4>

08002268 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800226c:	e7fe      	b.n	800226c <UsageFault_Handler+0x4>

0800226e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800226e:	b480      	push	{r7}
 8002270:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002272:	bf00      	nop
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002280:	bf00      	nop
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr

0800228a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800228a:	b480      	push	{r7}
 800228c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800228e:	bf00      	nop
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800229c:	f000 f934 	bl	8002508 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022a0:	bf00      	nop
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022b0:	2300      	movs	r3, #0
 80022b2:	617b      	str	r3, [r7, #20]
 80022b4:	e00a      	b.n	80022cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022b6:	f3af 8000 	nop.w
 80022ba:	4601      	mov	r1, r0
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	1c5a      	adds	r2, r3, #1
 80022c0:	60ba      	str	r2, [r7, #8]
 80022c2:	b2ca      	uxtb	r2, r1
 80022c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	3301      	adds	r3, #1
 80022ca:	617b      	str	r3, [r7, #20]
 80022cc:	697a      	ldr	r2, [r7, #20]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	dbf0      	blt.n	80022b6 <_read+0x12>
  }

  return len;
 80022d4:	687b      	ldr	r3, [r7, #4]
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3718      	adds	r7, #24
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b086      	sub	sp, #24
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	60f8      	str	r0, [r7, #12]
 80022e6:	60b9      	str	r1, [r7, #8]
 80022e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ea:	2300      	movs	r3, #0
 80022ec:	617b      	str	r3, [r7, #20]
 80022ee:	e009      	b.n	8002304 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	1c5a      	adds	r2, r3, #1
 80022f4:	60ba      	str	r2, [r7, #8]
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	3301      	adds	r3, #1
 8002302:	617b      	str	r3, [r7, #20]
 8002304:	697a      	ldr	r2, [r7, #20]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	429a      	cmp	r2, r3
 800230a:	dbf1      	blt.n	80022f0 <_write+0x12>
  }
  return len;
 800230c:	687b      	ldr	r3, [r7, #4]
}
 800230e:	4618      	mov	r0, r3
 8002310:	3718      	adds	r7, #24
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <_close>:

int _close(int file)
{
 8002316:	b480      	push	{r7}
 8002318:	b083      	sub	sp, #12
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800231e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002322:	4618      	mov	r0, r3
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800232e:	b480      	push	{r7}
 8002330:	b083      	sub	sp, #12
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
 8002336:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800233e:	605a      	str	r2, [r3, #4]
  return 0;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <_isatty>:

int _isatty(int file)
{
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002356:	2301      	movs	r3, #1
}
 8002358:	4618      	mov	r0, r3
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3714      	adds	r7, #20
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
	...

08002380 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002388:	4a14      	ldr	r2, [pc, #80]	; (80023dc <_sbrk+0x5c>)
 800238a:	4b15      	ldr	r3, [pc, #84]	; (80023e0 <_sbrk+0x60>)
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002394:	4b13      	ldr	r3, [pc, #76]	; (80023e4 <_sbrk+0x64>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d102      	bne.n	80023a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800239c:	4b11      	ldr	r3, [pc, #68]	; (80023e4 <_sbrk+0x64>)
 800239e:	4a12      	ldr	r2, [pc, #72]	; (80023e8 <_sbrk+0x68>)
 80023a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023a2:	4b10      	ldr	r3, [pc, #64]	; (80023e4 <_sbrk+0x64>)
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4413      	add	r3, r2
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d207      	bcs.n	80023c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023b0:	f003 fb0c 	bl	80059cc <__errno>
 80023b4:	4603      	mov	r3, r0
 80023b6:	220c      	movs	r2, #12
 80023b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023ba:	f04f 33ff 	mov.w	r3, #4294967295
 80023be:	e009      	b.n	80023d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023c0:	4b08      	ldr	r3, [pc, #32]	; (80023e4 <_sbrk+0x64>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023c6:	4b07      	ldr	r3, [pc, #28]	; (80023e4 <_sbrk+0x64>)
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4413      	add	r3, r2
 80023ce:	4a05      	ldr	r2, [pc, #20]	; (80023e4 <_sbrk+0x64>)
 80023d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023d2:	68fb      	ldr	r3, [r7, #12]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3718      	adds	r7, #24
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	20020000 	.word	0x20020000
 80023e0:	00000400 	.word	0x00000400
 80023e4:	200031a0 	.word	0x200031a0
 80023e8:	200032f8 	.word	0x200032f8

080023ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023f0:	4b06      	ldr	r3, [pc, #24]	; (800240c <SystemInit+0x20>)
 80023f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f6:	4a05      	ldr	r2, [pc, #20]	; (800240c <SystemInit+0x20>)
 80023f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002400:	bf00      	nop
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	e000ed00 	.word	0xe000ed00

08002410 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002410:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002448 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002414:	480d      	ldr	r0, [pc, #52]	; (800244c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002416:	490e      	ldr	r1, [pc, #56]	; (8002450 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002418:	4a0e      	ldr	r2, [pc, #56]	; (8002454 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800241a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800241c:	e002      	b.n	8002424 <LoopCopyDataInit>

0800241e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800241e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002420:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002422:	3304      	adds	r3, #4

08002424 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002424:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002426:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002428:	d3f9      	bcc.n	800241e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800242a:	4a0b      	ldr	r2, [pc, #44]	; (8002458 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800242c:	4c0b      	ldr	r4, [pc, #44]	; (800245c <LoopFillZerobss+0x26>)
  movs r3, #0
 800242e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002430:	e001      	b.n	8002436 <LoopFillZerobss>

08002432 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002432:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002434:	3204      	adds	r2, #4

08002436 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002436:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002438:	d3fb      	bcc.n	8002432 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800243a:	f7ff ffd7 	bl	80023ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800243e:	f003 facb 	bl	80059d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002442:	f7ff f9a5 	bl	8001790 <main>
  bx  lr    
 8002446:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002448:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800244c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002450:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002454:	080064d4 	.word	0x080064d4
  ldr r2, =_sbss
 8002458:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800245c:	200032f4 	.word	0x200032f4

08002460 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002460:	e7fe      	b.n	8002460 <ADC_IRQHandler>
	...

08002464 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002468:	4b0e      	ldr	r3, [pc, #56]	; (80024a4 <HAL_Init+0x40>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a0d      	ldr	r2, [pc, #52]	; (80024a4 <HAL_Init+0x40>)
 800246e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002472:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002474:	4b0b      	ldr	r3, [pc, #44]	; (80024a4 <HAL_Init+0x40>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a0a      	ldr	r2, [pc, #40]	; (80024a4 <HAL_Init+0x40>)
 800247a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800247e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002480:	4b08      	ldr	r3, [pc, #32]	; (80024a4 <HAL_Init+0x40>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a07      	ldr	r2, [pc, #28]	; (80024a4 <HAL_Init+0x40>)
 8002486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800248a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800248c:	2003      	movs	r0, #3
 800248e:	f000 fb93 	bl	8002bb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002492:	200f      	movs	r0, #15
 8002494:	f000 f808 	bl	80024a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002498:	f7ff fcce 	bl	8001e38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	40023c00 	.word	0x40023c00

080024a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024b0:	4b12      	ldr	r3, [pc, #72]	; (80024fc <HAL_InitTick+0x54>)
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	4b12      	ldr	r3, [pc, #72]	; (8002500 <HAL_InitTick+0x58>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	4619      	mov	r1, r3
 80024ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024be:	fbb3 f3f1 	udiv	r3, r3, r1
 80024c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c6:	4618      	mov	r0, r3
 80024c8:	f000 fb9d 	bl	8002c06 <HAL_SYSTICK_Config>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e00e      	b.n	80024f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2b0f      	cmp	r3, #15
 80024da:	d80a      	bhi.n	80024f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024dc:	2200      	movs	r2, #0
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	f04f 30ff 	mov.w	r0, #4294967295
 80024e4:	f000 fb73 	bl	8002bce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024e8:	4a06      	ldr	r2, [pc, #24]	; (8002504 <HAL_InitTick+0x5c>)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
 80024f0:	e000      	b.n	80024f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	20000004 	.word	0x20000004
 8002500:	2000000c 	.word	0x2000000c
 8002504:	20000008 	.word	0x20000008

08002508 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800250c:	4b06      	ldr	r3, [pc, #24]	; (8002528 <HAL_IncTick+0x20>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	461a      	mov	r2, r3
 8002512:	4b06      	ldr	r3, [pc, #24]	; (800252c <HAL_IncTick+0x24>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4413      	add	r3, r2
 8002518:	4a04      	ldr	r2, [pc, #16]	; (800252c <HAL_IncTick+0x24>)
 800251a:	6013      	str	r3, [r2, #0]
}
 800251c:	bf00      	nop
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	2000000c 	.word	0x2000000c
 800252c:	200031a4 	.word	0x200031a4

08002530 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  return uwTick;
 8002534:	4b03      	ldr	r3, [pc, #12]	; (8002544 <HAL_GetTick+0x14>)
 8002536:	681b      	ldr	r3, [r3, #0]
}
 8002538:	4618      	mov	r0, r3
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	200031a4 	.word	0x200031a4

08002548 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002550:	f7ff ffee 	bl	8002530 <HAL_GetTick>
 8002554:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002560:	d005      	beq.n	800256e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002562:	4b0a      	ldr	r3, [pc, #40]	; (800258c <HAL_Delay+0x44>)
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	461a      	mov	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4413      	add	r3, r2
 800256c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800256e:	bf00      	nop
 8002570:	f7ff ffde 	bl	8002530 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	429a      	cmp	r2, r3
 800257e:	d8f7      	bhi.n	8002570 <HAL_Delay+0x28>
  {
  }
}
 8002580:	bf00      	nop
 8002582:	bf00      	nop
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	2000000c 	.word	0x2000000c

08002590 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002598:	2300      	movs	r3, #0
 800259a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e033      	b.n	800260e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d109      	bne.n	80025c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7ff fc6a 	bl	8001e88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	f003 0310 	and.w	r3, r3, #16
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d118      	bne.n	8002600 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025d6:	f023 0302 	bic.w	r3, r3, #2
 80025da:	f043 0202 	orr.w	r2, r3, #2
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 f93a 	bl	800285c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	f023 0303 	bic.w	r3, r3, #3
 80025f6:	f043 0201 	orr.w	r2, r3, #1
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	641a      	str	r2, [r3, #64]	; 0x40
 80025fe:	e001      	b.n	8002604 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800260c:	7bfb      	ldrb	r3, [r7, #15]
}
 800260e:	4618      	mov	r0, r3
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
	...

08002618 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002622:	2300      	movs	r3, #0
 8002624:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800262c:	2b01      	cmp	r3, #1
 800262e:	d101      	bne.n	8002634 <HAL_ADC_ConfigChannel+0x1c>
 8002630:	2302      	movs	r3, #2
 8002632:	e105      	b.n	8002840 <HAL_ADC_ConfigChannel+0x228>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b09      	cmp	r3, #9
 8002642:	d925      	bls.n	8002690 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68d9      	ldr	r1, [r3, #12]
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	b29b      	uxth	r3, r3
 8002650:	461a      	mov	r2, r3
 8002652:	4613      	mov	r3, r2
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	4413      	add	r3, r2
 8002658:	3b1e      	subs	r3, #30
 800265a:	2207      	movs	r2, #7
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	43da      	mvns	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	400a      	ands	r2, r1
 8002668:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68d9      	ldr	r1, [r3, #12]
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	689a      	ldr	r2, [r3, #8]
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	b29b      	uxth	r3, r3
 800267a:	4618      	mov	r0, r3
 800267c:	4603      	mov	r3, r0
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	4403      	add	r3, r0
 8002682:	3b1e      	subs	r3, #30
 8002684:	409a      	lsls	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	430a      	orrs	r2, r1
 800268c:	60da      	str	r2, [r3, #12]
 800268e:	e022      	b.n	80026d6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6919      	ldr	r1, [r3, #16]
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	b29b      	uxth	r3, r3
 800269c:	461a      	mov	r2, r3
 800269e:	4613      	mov	r3, r2
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	4413      	add	r3, r2
 80026a4:	2207      	movs	r2, #7
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	43da      	mvns	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	400a      	ands	r2, r1
 80026b2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6919      	ldr	r1, [r3, #16]
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	689a      	ldr	r2, [r3, #8]
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	4618      	mov	r0, r3
 80026c6:	4603      	mov	r3, r0
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	4403      	add	r3, r0
 80026cc:	409a      	lsls	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	430a      	orrs	r2, r1
 80026d4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	2b06      	cmp	r3, #6
 80026dc:	d824      	bhi.n	8002728 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	4613      	mov	r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	4413      	add	r3, r2
 80026ee:	3b05      	subs	r3, #5
 80026f0:	221f      	movs	r2, #31
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	43da      	mvns	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	400a      	ands	r2, r1
 80026fe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	b29b      	uxth	r3, r3
 800270c:	4618      	mov	r0, r3
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685a      	ldr	r2, [r3, #4]
 8002712:	4613      	mov	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	4413      	add	r3, r2
 8002718:	3b05      	subs	r3, #5
 800271a:	fa00 f203 	lsl.w	r2, r0, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	430a      	orrs	r2, r1
 8002724:	635a      	str	r2, [r3, #52]	; 0x34
 8002726:	e04c      	b.n	80027c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	2b0c      	cmp	r3, #12
 800272e:	d824      	bhi.n	800277a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685a      	ldr	r2, [r3, #4]
 800273a:	4613      	mov	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	4413      	add	r3, r2
 8002740:	3b23      	subs	r3, #35	; 0x23
 8002742:	221f      	movs	r2, #31
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	43da      	mvns	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	400a      	ands	r2, r1
 8002750:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	b29b      	uxth	r3, r3
 800275e:	4618      	mov	r0, r3
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	4613      	mov	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4413      	add	r3, r2
 800276a:	3b23      	subs	r3, #35	; 0x23
 800276c:	fa00 f203 	lsl.w	r2, r0, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	430a      	orrs	r2, r1
 8002776:	631a      	str	r2, [r3, #48]	; 0x30
 8002778:	e023      	b.n	80027c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685a      	ldr	r2, [r3, #4]
 8002784:	4613      	mov	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4413      	add	r3, r2
 800278a:	3b41      	subs	r3, #65	; 0x41
 800278c:	221f      	movs	r2, #31
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	43da      	mvns	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	400a      	ands	r2, r1
 800279a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	4618      	mov	r0, r3
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685a      	ldr	r2, [r3, #4]
 80027ae:	4613      	mov	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4413      	add	r3, r2
 80027b4:	3b41      	subs	r3, #65	; 0x41
 80027b6:	fa00 f203 	lsl.w	r2, r0, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	430a      	orrs	r2, r1
 80027c0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027c2:	4b22      	ldr	r3, [pc, #136]	; (800284c <HAL_ADC_ConfigChannel+0x234>)
 80027c4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a21      	ldr	r2, [pc, #132]	; (8002850 <HAL_ADC_ConfigChannel+0x238>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d109      	bne.n	80027e4 <HAL_ADC_ConfigChannel+0x1cc>
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2b12      	cmp	r3, #18
 80027d6:	d105      	bne.n	80027e4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a19      	ldr	r2, [pc, #100]	; (8002850 <HAL_ADC_ConfigChannel+0x238>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d123      	bne.n	8002836 <HAL_ADC_ConfigChannel+0x21e>
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2b10      	cmp	r3, #16
 80027f4:	d003      	beq.n	80027fe <HAL_ADC_ConfigChannel+0x1e6>
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2b11      	cmp	r3, #17
 80027fc:	d11b      	bne.n	8002836 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2b10      	cmp	r3, #16
 8002810:	d111      	bne.n	8002836 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002812:	4b10      	ldr	r3, [pc, #64]	; (8002854 <HAL_ADC_ConfigChannel+0x23c>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a10      	ldr	r2, [pc, #64]	; (8002858 <HAL_ADC_ConfigChannel+0x240>)
 8002818:	fba2 2303 	umull	r2, r3, r2, r3
 800281c:	0c9a      	lsrs	r2, r3, #18
 800281e:	4613      	mov	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4413      	add	r3, r2
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002828:	e002      	b.n	8002830 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	3b01      	subs	r3, #1
 800282e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1f9      	bne.n	800282a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	3714      	adds	r7, #20
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	40012300 	.word	0x40012300
 8002850:	40012000 	.word	0x40012000
 8002854:	20000004 	.word	0x20000004
 8002858:	431bde83 	.word	0x431bde83

0800285c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002864:	4b79      	ldr	r3, [pc, #484]	; (8002a4c <ADC_Init+0x1f0>)
 8002866:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	685a      	ldr	r2, [r3, #4]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	431a      	orrs	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002890:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6859      	ldr	r1, [r3, #4]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	021a      	lsls	r2, r3, #8
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	430a      	orrs	r2, r1
 80028a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	685a      	ldr	r2, [r3, #4]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80028b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6859      	ldr	r1, [r3, #4]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689a      	ldr	r2, [r3, #8]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	430a      	orrs	r2, r1
 80028c6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689a      	ldr	r2, [r3, #8]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6899      	ldr	r1, [r3, #8]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	68da      	ldr	r2, [r3, #12]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	430a      	orrs	r2, r1
 80028e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ee:	4a58      	ldr	r2, [pc, #352]	; (8002a50 <ADC_Init+0x1f4>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d022      	beq.n	800293a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	689a      	ldr	r2, [r3, #8]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002902:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6899      	ldr	r1, [r3, #8]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	430a      	orrs	r2, r1
 8002914:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	689a      	ldr	r2, [r3, #8]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002924:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	6899      	ldr	r1, [r3, #8]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	430a      	orrs	r2, r1
 8002936:	609a      	str	r2, [r3, #8]
 8002938:	e00f      	b.n	800295a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002948:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002958:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 0202 	bic.w	r2, r2, #2
 8002968:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	6899      	ldr	r1, [r3, #8]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	7e1b      	ldrb	r3, [r3, #24]
 8002974:	005a      	lsls	r2, r3, #1
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	430a      	orrs	r2, r1
 800297c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d01b      	beq.n	80029c0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	685a      	ldr	r2, [r3, #4]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002996:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	685a      	ldr	r2, [r3, #4]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80029a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6859      	ldr	r1, [r3, #4]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b2:	3b01      	subs	r3, #1
 80029b4:	035a      	lsls	r2, r3, #13
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	605a      	str	r2, [r3, #4]
 80029be:	e007      	b.n	80029d0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80029de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	3b01      	subs	r3, #1
 80029ec:	051a      	lsls	r2, r3, #20
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	6899      	ldr	r1, [r3, #8]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a12:	025a      	lsls	r2, r3, #9
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689a      	ldr	r2, [r3, #8]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6899      	ldr	r1, [r3, #8]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	029a      	lsls	r2, r3, #10
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	609a      	str	r2, [r3, #8]
}
 8002a40:	bf00      	nop
 8002a42:	3714      	adds	r7, #20
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	40012300 	.word	0x40012300
 8002a50:	0f000001 	.word	0x0f000001

08002a54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f003 0307 	and.w	r3, r3, #7
 8002a62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a64:	4b0c      	ldr	r3, [pc, #48]	; (8002a98 <__NVIC_SetPriorityGrouping+0x44>)
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a6a:	68ba      	ldr	r2, [r7, #8]
 8002a6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a70:	4013      	ands	r3, r2
 8002a72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a86:	4a04      	ldr	r2, [pc, #16]	; (8002a98 <__NVIC_SetPriorityGrouping+0x44>)
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	60d3      	str	r3, [r2, #12]
}
 8002a8c:	bf00      	nop
 8002a8e:	3714      	adds	r7, #20
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr
 8002a98:	e000ed00 	.word	0xe000ed00

08002a9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002aa0:	4b04      	ldr	r3, [pc, #16]	; (8002ab4 <__NVIC_GetPriorityGrouping+0x18>)
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	0a1b      	lsrs	r3, r3, #8
 8002aa6:	f003 0307 	and.w	r3, r3, #7
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	e000ed00 	.word	0xe000ed00

08002ab8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	4603      	mov	r3, r0
 8002ac0:	6039      	str	r1, [r7, #0]
 8002ac2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	db0a      	blt.n	8002ae2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	b2da      	uxtb	r2, r3
 8002ad0:	490c      	ldr	r1, [pc, #48]	; (8002b04 <__NVIC_SetPriority+0x4c>)
 8002ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad6:	0112      	lsls	r2, r2, #4
 8002ad8:	b2d2      	uxtb	r2, r2
 8002ada:	440b      	add	r3, r1
 8002adc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ae0:	e00a      	b.n	8002af8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	4908      	ldr	r1, [pc, #32]	; (8002b08 <__NVIC_SetPriority+0x50>)
 8002ae8:	79fb      	ldrb	r3, [r7, #7]
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	3b04      	subs	r3, #4
 8002af0:	0112      	lsls	r2, r2, #4
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	440b      	add	r3, r1
 8002af6:	761a      	strb	r2, [r3, #24]
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr
 8002b04:	e000e100 	.word	0xe000e100
 8002b08:	e000ed00 	.word	0xe000ed00

08002b0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b089      	sub	sp, #36	; 0x24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	f1c3 0307 	rsb	r3, r3, #7
 8002b26:	2b04      	cmp	r3, #4
 8002b28:	bf28      	it	cs
 8002b2a:	2304      	movcs	r3, #4
 8002b2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	3304      	adds	r3, #4
 8002b32:	2b06      	cmp	r3, #6
 8002b34:	d902      	bls.n	8002b3c <NVIC_EncodePriority+0x30>
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	3b03      	subs	r3, #3
 8002b3a:	e000      	b.n	8002b3e <NVIC_EncodePriority+0x32>
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b40:	f04f 32ff 	mov.w	r2, #4294967295
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	43da      	mvns	r2, r3
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	401a      	ands	r2, r3
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b54:	f04f 31ff 	mov.w	r1, #4294967295
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b5e:	43d9      	mvns	r1, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b64:	4313      	orrs	r3, r2
         );
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3724      	adds	r7, #36	; 0x24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
	...

08002b74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b84:	d301      	bcc.n	8002b8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b86:	2301      	movs	r3, #1
 8002b88:	e00f      	b.n	8002baa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b8a:	4a0a      	ldr	r2, [pc, #40]	; (8002bb4 <SysTick_Config+0x40>)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b92:	210f      	movs	r1, #15
 8002b94:	f04f 30ff 	mov.w	r0, #4294967295
 8002b98:	f7ff ff8e 	bl	8002ab8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b9c:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <SysTick_Config+0x40>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ba2:	4b04      	ldr	r3, [pc, #16]	; (8002bb4 <SysTick_Config+0x40>)
 8002ba4:	2207      	movs	r2, #7
 8002ba6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	e000e010 	.word	0xe000e010

08002bb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f7ff ff47 	bl	8002a54 <__NVIC_SetPriorityGrouping>
}
 8002bc6:	bf00      	nop
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b086      	sub	sp, #24
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	60b9      	str	r1, [r7, #8]
 8002bd8:	607a      	str	r2, [r7, #4]
 8002bda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002be0:	f7ff ff5c 	bl	8002a9c <__NVIC_GetPriorityGrouping>
 8002be4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	68b9      	ldr	r1, [r7, #8]
 8002bea:	6978      	ldr	r0, [r7, #20]
 8002bec:	f7ff ff8e 	bl	8002b0c <NVIC_EncodePriority>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bf6:	4611      	mov	r1, r2
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff ff5d 	bl	8002ab8 <__NVIC_SetPriority>
}
 8002bfe:	bf00      	nop
 8002c00:	3718      	adds	r7, #24
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b082      	sub	sp, #8
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7ff ffb0 	bl	8002b74 <SysTick_Config>
 8002c14:	4603      	mov	r3, r0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
	...

08002c20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b089      	sub	sp, #36	; 0x24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c32:	2300      	movs	r3, #0
 8002c34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c36:	2300      	movs	r3, #0
 8002c38:	61fb      	str	r3, [r7, #28]
 8002c3a:	e16b      	b.n	8002f14 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	f040 815a 	bne.w	8002f0e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f003 0303 	and.w	r3, r3, #3
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d005      	beq.n	8002c72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d130      	bne.n	8002cd4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	2203      	movs	r2, #3
 8002c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c82:	43db      	mvns	r3, r3
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	4013      	ands	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	68da      	ldr	r2, [r3, #12]
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ca8:	2201      	movs	r2, #1
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	091b      	lsrs	r3, r3, #4
 8002cbe:	f003 0201 	and.w	r2, r3, #1
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f003 0303 	and.w	r3, r3, #3
 8002cdc:	2b03      	cmp	r3, #3
 8002cde:	d017      	beq.n	8002d10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	2203      	movs	r2, #3
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	43db      	mvns	r3, r3
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	689a      	ldr	r2, [r3, #8]
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f003 0303 	and.w	r3, r3, #3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d123      	bne.n	8002d64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	08da      	lsrs	r2, r3, #3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3208      	adds	r2, #8
 8002d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	f003 0307 	and.w	r3, r3, #7
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	220f      	movs	r2, #15
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	691a      	ldr	r2, [r3, #16]
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	08da      	lsrs	r2, r3, #3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	3208      	adds	r2, #8
 8002d5e:	69b9      	ldr	r1, [r7, #24]
 8002d60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	2203      	movs	r2, #3
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	43db      	mvns	r3, r3
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f003 0203 	and.w	r2, r3, #3
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f000 80b4 	beq.w	8002f0e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002da6:	2300      	movs	r3, #0
 8002da8:	60fb      	str	r3, [r7, #12]
 8002daa:	4b60      	ldr	r3, [pc, #384]	; (8002f2c <HAL_GPIO_Init+0x30c>)
 8002dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dae:	4a5f      	ldr	r2, [pc, #380]	; (8002f2c <HAL_GPIO_Init+0x30c>)
 8002db0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002db4:	6453      	str	r3, [r2, #68]	; 0x44
 8002db6:	4b5d      	ldr	r3, [pc, #372]	; (8002f2c <HAL_GPIO_Init+0x30c>)
 8002db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dbe:	60fb      	str	r3, [r7, #12]
 8002dc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dc2:	4a5b      	ldr	r2, [pc, #364]	; (8002f30 <HAL_GPIO_Init+0x310>)
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	089b      	lsrs	r3, r3, #2
 8002dc8:	3302      	adds	r3, #2
 8002dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	f003 0303 	and.w	r3, r3, #3
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	220f      	movs	r2, #15
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	43db      	mvns	r3, r3
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	4013      	ands	r3, r2
 8002de4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a52      	ldr	r2, [pc, #328]	; (8002f34 <HAL_GPIO_Init+0x314>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d02b      	beq.n	8002e46 <HAL_GPIO_Init+0x226>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a51      	ldr	r2, [pc, #324]	; (8002f38 <HAL_GPIO_Init+0x318>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d025      	beq.n	8002e42 <HAL_GPIO_Init+0x222>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a50      	ldr	r2, [pc, #320]	; (8002f3c <HAL_GPIO_Init+0x31c>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d01f      	beq.n	8002e3e <HAL_GPIO_Init+0x21e>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a4f      	ldr	r2, [pc, #316]	; (8002f40 <HAL_GPIO_Init+0x320>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d019      	beq.n	8002e3a <HAL_GPIO_Init+0x21a>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a4e      	ldr	r2, [pc, #312]	; (8002f44 <HAL_GPIO_Init+0x324>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d013      	beq.n	8002e36 <HAL_GPIO_Init+0x216>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a4d      	ldr	r2, [pc, #308]	; (8002f48 <HAL_GPIO_Init+0x328>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d00d      	beq.n	8002e32 <HAL_GPIO_Init+0x212>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a4c      	ldr	r2, [pc, #304]	; (8002f4c <HAL_GPIO_Init+0x32c>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d007      	beq.n	8002e2e <HAL_GPIO_Init+0x20e>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a4b      	ldr	r2, [pc, #300]	; (8002f50 <HAL_GPIO_Init+0x330>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d101      	bne.n	8002e2a <HAL_GPIO_Init+0x20a>
 8002e26:	2307      	movs	r3, #7
 8002e28:	e00e      	b.n	8002e48 <HAL_GPIO_Init+0x228>
 8002e2a:	2308      	movs	r3, #8
 8002e2c:	e00c      	b.n	8002e48 <HAL_GPIO_Init+0x228>
 8002e2e:	2306      	movs	r3, #6
 8002e30:	e00a      	b.n	8002e48 <HAL_GPIO_Init+0x228>
 8002e32:	2305      	movs	r3, #5
 8002e34:	e008      	b.n	8002e48 <HAL_GPIO_Init+0x228>
 8002e36:	2304      	movs	r3, #4
 8002e38:	e006      	b.n	8002e48 <HAL_GPIO_Init+0x228>
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e004      	b.n	8002e48 <HAL_GPIO_Init+0x228>
 8002e3e:	2302      	movs	r3, #2
 8002e40:	e002      	b.n	8002e48 <HAL_GPIO_Init+0x228>
 8002e42:	2301      	movs	r3, #1
 8002e44:	e000      	b.n	8002e48 <HAL_GPIO_Init+0x228>
 8002e46:	2300      	movs	r3, #0
 8002e48:	69fa      	ldr	r2, [r7, #28]
 8002e4a:	f002 0203 	and.w	r2, r2, #3
 8002e4e:	0092      	lsls	r2, r2, #2
 8002e50:	4093      	lsls	r3, r2
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e58:	4935      	ldr	r1, [pc, #212]	; (8002f30 <HAL_GPIO_Init+0x310>)
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	089b      	lsrs	r3, r3, #2
 8002e5e:	3302      	adds	r3, #2
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e66:	4b3b      	ldr	r3, [pc, #236]	; (8002f54 <HAL_GPIO_Init+0x334>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	43db      	mvns	r3, r3
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	4013      	ands	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e8a:	4a32      	ldr	r2, [pc, #200]	; (8002f54 <HAL_GPIO_Init+0x334>)
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e90:	4b30      	ldr	r3, [pc, #192]	; (8002f54 <HAL_GPIO_Init+0x334>)
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d003      	beq.n	8002eb4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002eb4:	4a27      	ldr	r2, [pc, #156]	; (8002f54 <HAL_GPIO_Init+0x334>)
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002eba:	4b26      	ldr	r3, [pc, #152]	; (8002f54 <HAL_GPIO_Init+0x334>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d003      	beq.n	8002ede <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ede:	4a1d      	ldr	r2, [pc, #116]	; (8002f54 <HAL_GPIO_Init+0x334>)
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ee4:	4b1b      	ldr	r3, [pc, #108]	; (8002f54 <HAL_GPIO_Init+0x334>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	43db      	mvns	r3, r3
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d003      	beq.n	8002f08 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f08:	4a12      	ldr	r2, [pc, #72]	; (8002f54 <HAL_GPIO_Init+0x334>)
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	3301      	adds	r3, #1
 8002f12:	61fb      	str	r3, [r7, #28]
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	2b0f      	cmp	r3, #15
 8002f18:	f67f ae90 	bls.w	8002c3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f1c:	bf00      	nop
 8002f1e:	bf00      	nop
 8002f20:	3724      	adds	r7, #36	; 0x24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	40023800 	.word	0x40023800
 8002f30:	40013800 	.word	0x40013800
 8002f34:	40020000 	.word	0x40020000
 8002f38:	40020400 	.word	0x40020400
 8002f3c:	40020800 	.word	0x40020800
 8002f40:	40020c00 	.word	0x40020c00
 8002f44:	40021000 	.word	0x40021000
 8002f48:	40021400 	.word	0x40021400
 8002f4c:	40021800 	.word	0x40021800
 8002f50:	40021c00 	.word	0x40021c00
 8002f54:	40013c00 	.word	0x40013c00

08002f58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	460b      	mov	r3, r1
 8002f62:	807b      	strh	r3, [r7, #2]
 8002f64:	4613      	mov	r3, r2
 8002f66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f68:	787b      	ldrb	r3, [r7, #1]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f6e:	887a      	ldrh	r2, [r7, #2]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f74:	e003      	b.n	8002f7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f76:	887b      	ldrh	r3, [r7, #2]
 8002f78:	041a      	lsls	r2, r3, #16
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	619a      	str	r2, [r3, #24]
}
 8002f7e:	bf00      	nop
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr

08002f8a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b085      	sub	sp, #20
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
 8002f92:	460b      	mov	r3, r1
 8002f94:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f9c:	887a      	ldrh	r2, [r7, #2]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	041a      	lsls	r2, r3, #16
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	43d9      	mvns	r1, r3
 8002fa8:	887b      	ldrh	r3, [r7, #2]
 8002faa:	400b      	ands	r3, r1
 8002fac:	431a      	orrs	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	619a      	str	r2, [r3, #24]
}
 8002fb2:	bf00      	nop
 8002fb4:	3714      	adds	r7, #20
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
	...

08002fc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e267      	b.n	80034a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d075      	beq.n	80030ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fde:	4b88      	ldr	r3, [pc, #544]	; (8003200 <HAL_RCC_OscConfig+0x240>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f003 030c 	and.w	r3, r3, #12
 8002fe6:	2b04      	cmp	r3, #4
 8002fe8:	d00c      	beq.n	8003004 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fea:	4b85      	ldr	r3, [pc, #532]	; (8003200 <HAL_RCC_OscConfig+0x240>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ff2:	2b08      	cmp	r3, #8
 8002ff4:	d112      	bne.n	800301c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ff6:	4b82      	ldr	r3, [pc, #520]	; (8003200 <HAL_RCC_OscConfig+0x240>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ffe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003002:	d10b      	bne.n	800301c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003004:	4b7e      	ldr	r3, [pc, #504]	; (8003200 <HAL_RCC_OscConfig+0x240>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d05b      	beq.n	80030c8 <HAL_RCC_OscConfig+0x108>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d157      	bne.n	80030c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e242      	b.n	80034a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003024:	d106      	bne.n	8003034 <HAL_RCC_OscConfig+0x74>
 8003026:	4b76      	ldr	r3, [pc, #472]	; (8003200 <HAL_RCC_OscConfig+0x240>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a75      	ldr	r2, [pc, #468]	; (8003200 <HAL_RCC_OscConfig+0x240>)
 800302c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003030:	6013      	str	r3, [r2, #0]
 8003032:	e01d      	b.n	8003070 <HAL_RCC_OscConfig+0xb0>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800303c:	d10c      	bne.n	8003058 <HAL_RCC_OscConfig+0x98>
 800303e:	4b70      	ldr	r3, [pc, #448]	; (8003200 <HAL_RCC_OscConfig+0x240>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a6f      	ldr	r2, [pc, #444]	; (8003200 <HAL_RCC_OscConfig+0x240>)
 8003044:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003048:	6013      	str	r3, [r2, #0]
 800304a:	4b6d      	ldr	r3, [pc, #436]	; (8003200 <HAL_RCC_OscConfig+0x240>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a6c      	ldr	r2, [pc, #432]	; (8003200 <HAL_RCC_OscConfig+0x240>)
 8003050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003054:	6013      	str	r3, [r2, #0]
 8003056:	e00b      	b.n	8003070 <HAL_RCC_OscConfig+0xb0>
 8003058:	4b69      	ldr	r3, [pc, #420]	; (8003200 <HAL_RCC_OscConfig+0x240>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a68      	ldr	r2, [pc, #416]	; (8003200 <HAL_RCC_OscConfig+0x240>)
 800305e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003062:	6013      	str	r3, [r2, #0]
 8003064:	4b66      	ldr	r3, [pc, #408]	; (8003200 <HAL_RCC_OscConfig+0x240>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a65      	ldr	r2, [pc, #404]	; (8003200 <HAL_RCC_OscConfig+0x240>)
 800306a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800306e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d013      	beq.n	80030a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003078:	f7ff fa5a 	bl	8002530 <HAL_GetTick>
 800307c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800307e:	e008      	b.n	8003092 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003080:	f7ff fa56 	bl	8002530 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b64      	cmp	r3, #100	; 0x64
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e207      	b.n	80034a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003092:	4b5b      	ldr	r3, [pc, #364]	; (8003200 <HAL_RCC_OscConfig+0x240>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d0f0      	beq.n	8003080 <HAL_RCC_OscConfig+0xc0>
 800309e:	e014      	b.n	80030ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a0:	f7ff fa46 	bl	8002530 <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030a8:	f7ff fa42 	bl	8002530 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b64      	cmp	r3, #100	; 0x64
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e1f3      	b.n	80034a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ba:	4b51      	ldr	r3, [pc, #324]	; (8003200 <HAL_RCC_OscConfig+0x240>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1f0      	bne.n	80030a8 <HAL_RCC_OscConfig+0xe8>
 80030c6:	e000      	b.n	80030ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d063      	beq.n	800319e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030d6:	4b4a      	ldr	r3, [pc, #296]	; (8003200 <HAL_RCC_OscConfig+0x240>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f003 030c 	and.w	r3, r3, #12
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00b      	beq.n	80030fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030e2:	4b47      	ldr	r3, [pc, #284]	; (8003200 <HAL_RCC_OscConfig+0x240>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030ea:	2b08      	cmp	r3, #8
 80030ec:	d11c      	bne.n	8003128 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030ee:	4b44      	ldr	r3, [pc, #272]	; (8003200 <HAL_RCC_OscConfig+0x240>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d116      	bne.n	8003128 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030fa:	4b41      	ldr	r3, [pc, #260]	; (8003200 <HAL_RCC_OscConfig+0x240>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d005      	beq.n	8003112 <HAL_RCC_OscConfig+0x152>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d001      	beq.n	8003112 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e1c7      	b.n	80034a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003112:	4b3b      	ldr	r3, [pc, #236]	; (8003200 <HAL_RCC_OscConfig+0x240>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	4937      	ldr	r1, [pc, #220]	; (8003200 <HAL_RCC_OscConfig+0x240>)
 8003122:	4313      	orrs	r3, r2
 8003124:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003126:	e03a      	b.n	800319e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d020      	beq.n	8003172 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003130:	4b34      	ldr	r3, [pc, #208]	; (8003204 <HAL_RCC_OscConfig+0x244>)
 8003132:	2201      	movs	r2, #1
 8003134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003136:	f7ff f9fb 	bl	8002530 <HAL_GetTick>
 800313a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800313c:	e008      	b.n	8003150 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800313e:	f7ff f9f7 	bl	8002530 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d901      	bls.n	8003150 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e1a8      	b.n	80034a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003150:	4b2b      	ldr	r3, [pc, #172]	; (8003200 <HAL_RCC_OscConfig+0x240>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d0f0      	beq.n	800313e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800315c:	4b28      	ldr	r3, [pc, #160]	; (8003200 <HAL_RCC_OscConfig+0x240>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	4925      	ldr	r1, [pc, #148]	; (8003200 <HAL_RCC_OscConfig+0x240>)
 800316c:	4313      	orrs	r3, r2
 800316e:	600b      	str	r3, [r1, #0]
 8003170:	e015      	b.n	800319e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003172:	4b24      	ldr	r3, [pc, #144]	; (8003204 <HAL_RCC_OscConfig+0x244>)
 8003174:	2200      	movs	r2, #0
 8003176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003178:	f7ff f9da 	bl	8002530 <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800317e:	e008      	b.n	8003192 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003180:	f7ff f9d6 	bl	8002530 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b02      	cmp	r3, #2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e187      	b.n	80034a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003192:	4b1b      	ldr	r3, [pc, #108]	; (8003200 <HAL_RCC_OscConfig+0x240>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1f0      	bne.n	8003180 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0308 	and.w	r3, r3, #8
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d036      	beq.n	8003218 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d016      	beq.n	80031e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031b2:	4b15      	ldr	r3, [pc, #84]	; (8003208 <HAL_RCC_OscConfig+0x248>)
 80031b4:	2201      	movs	r2, #1
 80031b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b8:	f7ff f9ba 	bl	8002530 <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031c0:	f7ff f9b6 	bl	8002530 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e167      	b.n	80034a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031d2:	4b0b      	ldr	r3, [pc, #44]	; (8003200 <HAL_RCC_OscConfig+0x240>)
 80031d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d0f0      	beq.n	80031c0 <HAL_RCC_OscConfig+0x200>
 80031de:	e01b      	b.n	8003218 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031e0:	4b09      	ldr	r3, [pc, #36]	; (8003208 <HAL_RCC_OscConfig+0x248>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031e6:	f7ff f9a3 	bl	8002530 <HAL_GetTick>
 80031ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031ec:	e00e      	b.n	800320c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031ee:	f7ff f99f 	bl	8002530 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d907      	bls.n	800320c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e150      	b.n	80034a2 <HAL_RCC_OscConfig+0x4e2>
 8003200:	40023800 	.word	0x40023800
 8003204:	42470000 	.word	0x42470000
 8003208:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800320c:	4b88      	ldr	r3, [pc, #544]	; (8003430 <HAL_RCC_OscConfig+0x470>)
 800320e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1ea      	bne.n	80031ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0304 	and.w	r3, r3, #4
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 8097 	beq.w	8003354 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003226:	2300      	movs	r3, #0
 8003228:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800322a:	4b81      	ldr	r3, [pc, #516]	; (8003430 <HAL_RCC_OscConfig+0x470>)
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d10f      	bne.n	8003256 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003236:	2300      	movs	r3, #0
 8003238:	60bb      	str	r3, [r7, #8]
 800323a:	4b7d      	ldr	r3, [pc, #500]	; (8003430 <HAL_RCC_OscConfig+0x470>)
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	4a7c      	ldr	r2, [pc, #496]	; (8003430 <HAL_RCC_OscConfig+0x470>)
 8003240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003244:	6413      	str	r3, [r2, #64]	; 0x40
 8003246:	4b7a      	ldr	r3, [pc, #488]	; (8003430 <HAL_RCC_OscConfig+0x470>)
 8003248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800324e:	60bb      	str	r3, [r7, #8]
 8003250:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003252:	2301      	movs	r3, #1
 8003254:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003256:	4b77      	ldr	r3, [pc, #476]	; (8003434 <HAL_RCC_OscConfig+0x474>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325e:	2b00      	cmp	r3, #0
 8003260:	d118      	bne.n	8003294 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003262:	4b74      	ldr	r3, [pc, #464]	; (8003434 <HAL_RCC_OscConfig+0x474>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a73      	ldr	r2, [pc, #460]	; (8003434 <HAL_RCC_OscConfig+0x474>)
 8003268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800326c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800326e:	f7ff f95f 	bl	8002530 <HAL_GetTick>
 8003272:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003274:	e008      	b.n	8003288 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003276:	f7ff f95b 	bl	8002530 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d901      	bls.n	8003288 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e10c      	b.n	80034a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003288:	4b6a      	ldr	r3, [pc, #424]	; (8003434 <HAL_RCC_OscConfig+0x474>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003290:	2b00      	cmp	r3, #0
 8003292:	d0f0      	beq.n	8003276 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d106      	bne.n	80032aa <HAL_RCC_OscConfig+0x2ea>
 800329c:	4b64      	ldr	r3, [pc, #400]	; (8003430 <HAL_RCC_OscConfig+0x470>)
 800329e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a0:	4a63      	ldr	r2, [pc, #396]	; (8003430 <HAL_RCC_OscConfig+0x470>)
 80032a2:	f043 0301 	orr.w	r3, r3, #1
 80032a6:	6713      	str	r3, [r2, #112]	; 0x70
 80032a8:	e01c      	b.n	80032e4 <HAL_RCC_OscConfig+0x324>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	2b05      	cmp	r3, #5
 80032b0:	d10c      	bne.n	80032cc <HAL_RCC_OscConfig+0x30c>
 80032b2:	4b5f      	ldr	r3, [pc, #380]	; (8003430 <HAL_RCC_OscConfig+0x470>)
 80032b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b6:	4a5e      	ldr	r2, [pc, #376]	; (8003430 <HAL_RCC_OscConfig+0x470>)
 80032b8:	f043 0304 	orr.w	r3, r3, #4
 80032bc:	6713      	str	r3, [r2, #112]	; 0x70
 80032be:	4b5c      	ldr	r3, [pc, #368]	; (8003430 <HAL_RCC_OscConfig+0x470>)
 80032c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c2:	4a5b      	ldr	r2, [pc, #364]	; (8003430 <HAL_RCC_OscConfig+0x470>)
 80032c4:	f043 0301 	orr.w	r3, r3, #1
 80032c8:	6713      	str	r3, [r2, #112]	; 0x70
 80032ca:	e00b      	b.n	80032e4 <HAL_RCC_OscConfig+0x324>
 80032cc:	4b58      	ldr	r3, [pc, #352]	; (8003430 <HAL_RCC_OscConfig+0x470>)
 80032ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d0:	4a57      	ldr	r2, [pc, #348]	; (8003430 <HAL_RCC_OscConfig+0x470>)
 80032d2:	f023 0301 	bic.w	r3, r3, #1
 80032d6:	6713      	str	r3, [r2, #112]	; 0x70
 80032d8:	4b55      	ldr	r3, [pc, #340]	; (8003430 <HAL_RCC_OscConfig+0x470>)
 80032da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032dc:	4a54      	ldr	r2, [pc, #336]	; (8003430 <HAL_RCC_OscConfig+0x470>)
 80032de:	f023 0304 	bic.w	r3, r3, #4
 80032e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d015      	beq.n	8003318 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ec:	f7ff f920 	bl	8002530 <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f2:	e00a      	b.n	800330a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032f4:	f7ff f91c 	bl	8002530 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003302:	4293      	cmp	r3, r2
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e0cb      	b.n	80034a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800330a:	4b49      	ldr	r3, [pc, #292]	; (8003430 <HAL_RCC_OscConfig+0x470>)
 800330c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d0ee      	beq.n	80032f4 <HAL_RCC_OscConfig+0x334>
 8003316:	e014      	b.n	8003342 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003318:	f7ff f90a 	bl	8002530 <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800331e:	e00a      	b.n	8003336 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003320:	f7ff f906 	bl	8002530 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	f241 3288 	movw	r2, #5000	; 0x1388
 800332e:	4293      	cmp	r3, r2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e0b5      	b.n	80034a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003336:	4b3e      	ldr	r3, [pc, #248]	; (8003430 <HAL_RCC_OscConfig+0x470>)
 8003338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1ee      	bne.n	8003320 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003342:	7dfb      	ldrb	r3, [r7, #23]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d105      	bne.n	8003354 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003348:	4b39      	ldr	r3, [pc, #228]	; (8003430 <HAL_RCC_OscConfig+0x470>)
 800334a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334c:	4a38      	ldr	r2, [pc, #224]	; (8003430 <HAL_RCC_OscConfig+0x470>)
 800334e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003352:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 80a1 	beq.w	80034a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800335e:	4b34      	ldr	r3, [pc, #208]	; (8003430 <HAL_RCC_OscConfig+0x470>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f003 030c 	and.w	r3, r3, #12
 8003366:	2b08      	cmp	r3, #8
 8003368:	d05c      	beq.n	8003424 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	2b02      	cmp	r3, #2
 8003370:	d141      	bne.n	80033f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003372:	4b31      	ldr	r3, [pc, #196]	; (8003438 <HAL_RCC_OscConfig+0x478>)
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003378:	f7ff f8da 	bl	8002530 <HAL_GetTick>
 800337c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800337e:	e008      	b.n	8003392 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003380:	f7ff f8d6 	bl	8002530 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b02      	cmp	r3, #2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e087      	b.n	80034a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003392:	4b27      	ldr	r3, [pc, #156]	; (8003430 <HAL_RCC_OscConfig+0x470>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1f0      	bne.n	8003380 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	69da      	ldr	r2, [r3, #28]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	431a      	orrs	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ac:	019b      	lsls	r3, r3, #6
 80033ae:	431a      	orrs	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b4:	085b      	lsrs	r3, r3, #1
 80033b6:	3b01      	subs	r3, #1
 80033b8:	041b      	lsls	r3, r3, #16
 80033ba:	431a      	orrs	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c0:	061b      	lsls	r3, r3, #24
 80033c2:	491b      	ldr	r1, [pc, #108]	; (8003430 <HAL_RCC_OscConfig+0x470>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033c8:	4b1b      	ldr	r3, [pc, #108]	; (8003438 <HAL_RCC_OscConfig+0x478>)
 80033ca:	2201      	movs	r2, #1
 80033cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ce:	f7ff f8af 	bl	8002530 <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033d4:	e008      	b.n	80033e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033d6:	f7ff f8ab 	bl	8002530 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e05c      	b.n	80034a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033e8:	4b11      	ldr	r3, [pc, #68]	; (8003430 <HAL_RCC_OscConfig+0x470>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d0f0      	beq.n	80033d6 <HAL_RCC_OscConfig+0x416>
 80033f4:	e054      	b.n	80034a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033f6:	4b10      	ldr	r3, [pc, #64]	; (8003438 <HAL_RCC_OscConfig+0x478>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fc:	f7ff f898 	bl	8002530 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003404:	f7ff f894 	bl	8002530 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b02      	cmp	r3, #2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e045      	b.n	80034a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003416:	4b06      	ldr	r3, [pc, #24]	; (8003430 <HAL_RCC_OscConfig+0x470>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1f0      	bne.n	8003404 <HAL_RCC_OscConfig+0x444>
 8003422:	e03d      	b.n	80034a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d107      	bne.n	800343c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e038      	b.n	80034a2 <HAL_RCC_OscConfig+0x4e2>
 8003430:	40023800 	.word	0x40023800
 8003434:	40007000 	.word	0x40007000
 8003438:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800343c:	4b1b      	ldr	r3, [pc, #108]	; (80034ac <HAL_RCC_OscConfig+0x4ec>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d028      	beq.n	800349c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003454:	429a      	cmp	r2, r3
 8003456:	d121      	bne.n	800349c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003462:	429a      	cmp	r2, r3
 8003464:	d11a      	bne.n	800349c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800346c:	4013      	ands	r3, r2
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003472:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003474:	4293      	cmp	r3, r2
 8003476:	d111      	bne.n	800349c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003482:	085b      	lsrs	r3, r3, #1
 8003484:	3b01      	subs	r3, #1
 8003486:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003488:	429a      	cmp	r2, r3
 800348a:	d107      	bne.n	800349c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003496:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003498:	429a      	cmp	r2, r3
 800349a:	d001      	beq.n	80034a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e000      	b.n	80034a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3718      	adds	r7, #24
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	40023800 	.word	0x40023800

080034b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d101      	bne.n	80034c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e0cc      	b.n	800365e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034c4:	4b68      	ldr	r3, [pc, #416]	; (8003668 <HAL_RCC_ClockConfig+0x1b8>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0307 	and.w	r3, r3, #7
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d90c      	bls.n	80034ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034d2:	4b65      	ldr	r3, [pc, #404]	; (8003668 <HAL_RCC_ClockConfig+0x1b8>)
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	b2d2      	uxtb	r2, r2
 80034d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034da:	4b63      	ldr	r3, [pc, #396]	; (8003668 <HAL_RCC_ClockConfig+0x1b8>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0307 	and.w	r3, r3, #7
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d001      	beq.n	80034ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e0b8      	b.n	800365e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d020      	beq.n	800353a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0304 	and.w	r3, r3, #4
 8003500:	2b00      	cmp	r3, #0
 8003502:	d005      	beq.n	8003510 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003504:	4b59      	ldr	r3, [pc, #356]	; (800366c <HAL_RCC_ClockConfig+0x1bc>)
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	4a58      	ldr	r2, [pc, #352]	; (800366c <HAL_RCC_ClockConfig+0x1bc>)
 800350a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800350e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0308 	and.w	r3, r3, #8
 8003518:	2b00      	cmp	r3, #0
 800351a:	d005      	beq.n	8003528 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800351c:	4b53      	ldr	r3, [pc, #332]	; (800366c <HAL_RCC_ClockConfig+0x1bc>)
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	4a52      	ldr	r2, [pc, #328]	; (800366c <HAL_RCC_ClockConfig+0x1bc>)
 8003522:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003526:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003528:	4b50      	ldr	r3, [pc, #320]	; (800366c <HAL_RCC_ClockConfig+0x1bc>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	494d      	ldr	r1, [pc, #308]	; (800366c <HAL_RCC_ClockConfig+0x1bc>)
 8003536:	4313      	orrs	r3, r2
 8003538:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	d044      	beq.n	80035d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d107      	bne.n	800355e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800354e:	4b47      	ldr	r3, [pc, #284]	; (800366c <HAL_RCC_ClockConfig+0x1bc>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d119      	bne.n	800358e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e07f      	b.n	800365e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	2b02      	cmp	r3, #2
 8003564:	d003      	beq.n	800356e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800356a:	2b03      	cmp	r3, #3
 800356c:	d107      	bne.n	800357e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800356e:	4b3f      	ldr	r3, [pc, #252]	; (800366c <HAL_RCC_ClockConfig+0x1bc>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d109      	bne.n	800358e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e06f      	b.n	800365e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800357e:	4b3b      	ldr	r3, [pc, #236]	; (800366c <HAL_RCC_ClockConfig+0x1bc>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e067      	b.n	800365e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800358e:	4b37      	ldr	r3, [pc, #220]	; (800366c <HAL_RCC_ClockConfig+0x1bc>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f023 0203 	bic.w	r2, r3, #3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	4934      	ldr	r1, [pc, #208]	; (800366c <HAL_RCC_ClockConfig+0x1bc>)
 800359c:	4313      	orrs	r3, r2
 800359e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035a0:	f7fe ffc6 	bl	8002530 <HAL_GetTick>
 80035a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035a6:	e00a      	b.n	80035be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035a8:	f7fe ffc2 	bl	8002530 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e04f      	b.n	800365e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035be:	4b2b      	ldr	r3, [pc, #172]	; (800366c <HAL_RCC_ClockConfig+0x1bc>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f003 020c 	and.w	r2, r3, #12
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d1eb      	bne.n	80035a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035d0:	4b25      	ldr	r3, [pc, #148]	; (8003668 <HAL_RCC_ClockConfig+0x1b8>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0307 	and.w	r3, r3, #7
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d20c      	bcs.n	80035f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035de:	4b22      	ldr	r3, [pc, #136]	; (8003668 <HAL_RCC_ClockConfig+0x1b8>)
 80035e0:	683a      	ldr	r2, [r7, #0]
 80035e2:	b2d2      	uxtb	r2, r2
 80035e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035e6:	4b20      	ldr	r3, [pc, #128]	; (8003668 <HAL_RCC_ClockConfig+0x1b8>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0307 	and.w	r3, r3, #7
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d001      	beq.n	80035f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e032      	b.n	800365e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0304 	and.w	r3, r3, #4
 8003600:	2b00      	cmp	r3, #0
 8003602:	d008      	beq.n	8003616 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003604:	4b19      	ldr	r3, [pc, #100]	; (800366c <HAL_RCC_ClockConfig+0x1bc>)
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	4916      	ldr	r1, [pc, #88]	; (800366c <HAL_RCC_ClockConfig+0x1bc>)
 8003612:	4313      	orrs	r3, r2
 8003614:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0308 	and.w	r3, r3, #8
 800361e:	2b00      	cmp	r3, #0
 8003620:	d009      	beq.n	8003636 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003622:	4b12      	ldr	r3, [pc, #72]	; (800366c <HAL_RCC_ClockConfig+0x1bc>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	490e      	ldr	r1, [pc, #56]	; (800366c <HAL_RCC_ClockConfig+0x1bc>)
 8003632:	4313      	orrs	r3, r2
 8003634:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003636:	f000 f821 	bl	800367c <HAL_RCC_GetSysClockFreq>
 800363a:	4602      	mov	r2, r0
 800363c:	4b0b      	ldr	r3, [pc, #44]	; (800366c <HAL_RCC_ClockConfig+0x1bc>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	091b      	lsrs	r3, r3, #4
 8003642:	f003 030f 	and.w	r3, r3, #15
 8003646:	490a      	ldr	r1, [pc, #40]	; (8003670 <HAL_RCC_ClockConfig+0x1c0>)
 8003648:	5ccb      	ldrb	r3, [r1, r3]
 800364a:	fa22 f303 	lsr.w	r3, r2, r3
 800364e:	4a09      	ldr	r2, [pc, #36]	; (8003674 <HAL_RCC_ClockConfig+0x1c4>)
 8003650:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003652:	4b09      	ldr	r3, [pc, #36]	; (8003678 <HAL_RCC_ClockConfig+0x1c8>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4618      	mov	r0, r3
 8003658:	f7fe ff26 	bl	80024a8 <HAL_InitTick>

  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	40023c00 	.word	0x40023c00
 800366c:	40023800 	.word	0x40023800
 8003670:	08006478 	.word	0x08006478
 8003674:	20000004 	.word	0x20000004
 8003678:	20000008 	.word	0x20000008

0800367c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800367c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003680:	b090      	sub	sp, #64	; 0x40
 8003682:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003684:	2300      	movs	r3, #0
 8003686:	637b      	str	r3, [r7, #52]	; 0x34
 8003688:	2300      	movs	r3, #0
 800368a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800368c:	2300      	movs	r3, #0
 800368e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003690:	2300      	movs	r3, #0
 8003692:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003694:	4b59      	ldr	r3, [pc, #356]	; (80037fc <HAL_RCC_GetSysClockFreq+0x180>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f003 030c 	and.w	r3, r3, #12
 800369c:	2b08      	cmp	r3, #8
 800369e:	d00d      	beq.n	80036bc <HAL_RCC_GetSysClockFreq+0x40>
 80036a0:	2b08      	cmp	r3, #8
 80036a2:	f200 80a1 	bhi.w	80037e8 <HAL_RCC_GetSysClockFreq+0x16c>
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d002      	beq.n	80036b0 <HAL_RCC_GetSysClockFreq+0x34>
 80036aa:	2b04      	cmp	r3, #4
 80036ac:	d003      	beq.n	80036b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80036ae:	e09b      	b.n	80037e8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036b0:	4b53      	ldr	r3, [pc, #332]	; (8003800 <HAL_RCC_GetSysClockFreq+0x184>)
 80036b2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80036b4:	e09b      	b.n	80037ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036b6:	4b53      	ldr	r3, [pc, #332]	; (8003804 <HAL_RCC_GetSysClockFreq+0x188>)
 80036b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80036ba:	e098      	b.n	80037ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036bc:	4b4f      	ldr	r3, [pc, #316]	; (80037fc <HAL_RCC_GetSysClockFreq+0x180>)
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036c4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036c6:	4b4d      	ldr	r3, [pc, #308]	; (80037fc <HAL_RCC_GetSysClockFreq+0x180>)
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d028      	beq.n	8003724 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036d2:	4b4a      	ldr	r3, [pc, #296]	; (80037fc <HAL_RCC_GetSysClockFreq+0x180>)
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	099b      	lsrs	r3, r3, #6
 80036d8:	2200      	movs	r2, #0
 80036da:	623b      	str	r3, [r7, #32]
 80036dc:	627a      	str	r2, [r7, #36]	; 0x24
 80036de:	6a3b      	ldr	r3, [r7, #32]
 80036e0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80036e4:	2100      	movs	r1, #0
 80036e6:	4b47      	ldr	r3, [pc, #284]	; (8003804 <HAL_RCC_GetSysClockFreq+0x188>)
 80036e8:	fb03 f201 	mul.w	r2, r3, r1
 80036ec:	2300      	movs	r3, #0
 80036ee:	fb00 f303 	mul.w	r3, r0, r3
 80036f2:	4413      	add	r3, r2
 80036f4:	4a43      	ldr	r2, [pc, #268]	; (8003804 <HAL_RCC_GetSysClockFreq+0x188>)
 80036f6:	fba0 1202 	umull	r1, r2, r0, r2
 80036fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036fc:	460a      	mov	r2, r1
 80036fe:	62ba      	str	r2, [r7, #40]	; 0x28
 8003700:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003702:	4413      	add	r3, r2
 8003704:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003708:	2200      	movs	r2, #0
 800370a:	61bb      	str	r3, [r7, #24]
 800370c:	61fa      	str	r2, [r7, #28]
 800370e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003712:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003716:	f7fd f9c9 	bl	8000aac <__aeabi_uldivmod>
 800371a:	4602      	mov	r2, r0
 800371c:	460b      	mov	r3, r1
 800371e:	4613      	mov	r3, r2
 8003720:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003722:	e053      	b.n	80037cc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003724:	4b35      	ldr	r3, [pc, #212]	; (80037fc <HAL_RCC_GetSysClockFreq+0x180>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	099b      	lsrs	r3, r3, #6
 800372a:	2200      	movs	r2, #0
 800372c:	613b      	str	r3, [r7, #16]
 800372e:	617a      	str	r2, [r7, #20]
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003736:	f04f 0b00 	mov.w	fp, #0
 800373a:	4652      	mov	r2, sl
 800373c:	465b      	mov	r3, fp
 800373e:	f04f 0000 	mov.w	r0, #0
 8003742:	f04f 0100 	mov.w	r1, #0
 8003746:	0159      	lsls	r1, r3, #5
 8003748:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800374c:	0150      	lsls	r0, r2, #5
 800374e:	4602      	mov	r2, r0
 8003750:	460b      	mov	r3, r1
 8003752:	ebb2 080a 	subs.w	r8, r2, sl
 8003756:	eb63 090b 	sbc.w	r9, r3, fp
 800375a:	f04f 0200 	mov.w	r2, #0
 800375e:	f04f 0300 	mov.w	r3, #0
 8003762:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003766:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800376a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800376e:	ebb2 0408 	subs.w	r4, r2, r8
 8003772:	eb63 0509 	sbc.w	r5, r3, r9
 8003776:	f04f 0200 	mov.w	r2, #0
 800377a:	f04f 0300 	mov.w	r3, #0
 800377e:	00eb      	lsls	r3, r5, #3
 8003780:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003784:	00e2      	lsls	r2, r4, #3
 8003786:	4614      	mov	r4, r2
 8003788:	461d      	mov	r5, r3
 800378a:	eb14 030a 	adds.w	r3, r4, sl
 800378e:	603b      	str	r3, [r7, #0]
 8003790:	eb45 030b 	adc.w	r3, r5, fp
 8003794:	607b      	str	r3, [r7, #4]
 8003796:	f04f 0200 	mov.w	r2, #0
 800379a:	f04f 0300 	mov.w	r3, #0
 800379e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037a2:	4629      	mov	r1, r5
 80037a4:	028b      	lsls	r3, r1, #10
 80037a6:	4621      	mov	r1, r4
 80037a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037ac:	4621      	mov	r1, r4
 80037ae:	028a      	lsls	r2, r1, #10
 80037b0:	4610      	mov	r0, r2
 80037b2:	4619      	mov	r1, r3
 80037b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037b6:	2200      	movs	r2, #0
 80037b8:	60bb      	str	r3, [r7, #8]
 80037ba:	60fa      	str	r2, [r7, #12]
 80037bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037c0:	f7fd f974 	bl	8000aac <__aeabi_uldivmod>
 80037c4:	4602      	mov	r2, r0
 80037c6:	460b      	mov	r3, r1
 80037c8:	4613      	mov	r3, r2
 80037ca:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037cc:	4b0b      	ldr	r3, [pc, #44]	; (80037fc <HAL_RCC_GetSysClockFreq+0x180>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	0c1b      	lsrs	r3, r3, #16
 80037d2:	f003 0303 	and.w	r3, r3, #3
 80037d6:	3301      	adds	r3, #1
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80037dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80037e6:	e002      	b.n	80037ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037e8:	4b05      	ldr	r3, [pc, #20]	; (8003800 <HAL_RCC_GetSysClockFreq+0x184>)
 80037ea:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80037ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3740      	adds	r7, #64	; 0x40
 80037f4:	46bd      	mov	sp, r7
 80037f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037fa:	bf00      	nop
 80037fc:	40023800 	.word	0x40023800
 8003800:	00f42400 	.word	0x00f42400
 8003804:	017d7840 	.word	0x017d7840

08003808 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800380c:	4b03      	ldr	r3, [pc, #12]	; (800381c <HAL_RCC_GetHCLKFreq+0x14>)
 800380e:	681b      	ldr	r3, [r3, #0]
}
 8003810:	4618      	mov	r0, r3
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	20000004 	.word	0x20000004

08003820 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003824:	f7ff fff0 	bl	8003808 <HAL_RCC_GetHCLKFreq>
 8003828:	4602      	mov	r2, r0
 800382a:	4b05      	ldr	r3, [pc, #20]	; (8003840 <HAL_RCC_GetPCLK1Freq+0x20>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	0a9b      	lsrs	r3, r3, #10
 8003830:	f003 0307 	and.w	r3, r3, #7
 8003834:	4903      	ldr	r1, [pc, #12]	; (8003844 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003836:	5ccb      	ldrb	r3, [r1, r3]
 8003838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800383c:	4618      	mov	r0, r3
 800383e:	bd80      	pop	{r7, pc}
 8003840:	40023800 	.word	0x40023800
 8003844:	08006488 	.word	0x08006488

08003848 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800384c:	f7ff ffdc 	bl	8003808 <HAL_RCC_GetHCLKFreq>
 8003850:	4602      	mov	r2, r0
 8003852:	4b05      	ldr	r3, [pc, #20]	; (8003868 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	0b5b      	lsrs	r3, r3, #13
 8003858:	f003 0307 	and.w	r3, r3, #7
 800385c:	4903      	ldr	r1, [pc, #12]	; (800386c <HAL_RCC_GetPCLK2Freq+0x24>)
 800385e:	5ccb      	ldrb	r3, [r1, r3]
 8003860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003864:	4618      	mov	r0, r3
 8003866:	bd80      	pop	{r7, pc}
 8003868:	40023800 	.word	0x40023800
 800386c:	08006488 	.word	0x08006488

08003870 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e07b      	b.n	800397a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003886:	2b00      	cmp	r3, #0
 8003888:	d108      	bne.n	800389c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003892:	d009      	beq.n	80038a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	61da      	str	r2, [r3, #28]
 800389a:	e005      	b.n	80038a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d106      	bne.n	80038c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7fe fb5c 	bl	8001f80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2202      	movs	r2, #2
 80038cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80038f0:	431a      	orrs	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038fa:	431a      	orrs	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	431a      	orrs	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	431a      	orrs	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003918:	431a      	orrs	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	69db      	ldr	r3, [r3, #28]
 800391e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003922:	431a      	orrs	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a1b      	ldr	r3, [r3, #32]
 8003928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800392c:	ea42 0103 	orr.w	r1, r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003934:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	430a      	orrs	r2, r1
 800393e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	0c1b      	lsrs	r3, r3, #16
 8003946:	f003 0104 	and.w	r1, r3, #4
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394e:	f003 0210 	and.w	r2, r3, #16
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	430a      	orrs	r2, r1
 8003958:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	69da      	ldr	r2, [r3, #28]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003968:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3708      	adds	r7, #8
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b088      	sub	sp, #32
 8003986:	af00      	add	r7, sp, #0
 8003988:	60f8      	str	r0, [r7, #12]
 800398a:	60b9      	str	r1, [r7, #8]
 800398c:	603b      	str	r3, [r7, #0]
 800398e:	4613      	mov	r3, r2
 8003990:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003992:	2300      	movs	r3, #0
 8003994:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800399c:	2b01      	cmp	r3, #1
 800399e:	d101      	bne.n	80039a4 <HAL_SPI_Transmit+0x22>
 80039a0:	2302      	movs	r3, #2
 80039a2:	e126      	b.n	8003bf2 <HAL_SPI_Transmit+0x270>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039ac:	f7fe fdc0 	bl	8002530 <HAL_GetTick>
 80039b0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80039b2:	88fb      	ldrh	r3, [r7, #6]
 80039b4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d002      	beq.n	80039c8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80039c2:	2302      	movs	r3, #2
 80039c4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80039c6:	e10b      	b.n	8003be0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d002      	beq.n	80039d4 <HAL_SPI_Transmit+0x52>
 80039ce:	88fb      	ldrh	r3, [r7, #6]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d102      	bne.n	80039da <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80039d8:	e102      	b.n	8003be0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2203      	movs	r2, #3
 80039de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	68ba      	ldr	r2, [r7, #8]
 80039ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	88fa      	ldrh	r2, [r7, #6]
 80039f2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	88fa      	ldrh	r2, [r7, #6]
 80039f8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a20:	d10f      	bne.n	8003a42 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a30:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a40:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a4c:	2b40      	cmp	r3, #64	; 0x40
 8003a4e:	d007      	beq.n	8003a60 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a5e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a68:	d14b      	bne.n	8003b02 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d002      	beq.n	8003a78 <HAL_SPI_Transmit+0xf6>
 8003a72:	8afb      	ldrh	r3, [r7, #22]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d13e      	bne.n	8003af6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7c:	881a      	ldrh	r2, [r3, #0]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a88:	1c9a      	adds	r2, r3, #2
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	3b01      	subs	r3, #1
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a9c:	e02b      	b.n	8003af6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f003 0302 	and.w	r3, r3, #2
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d112      	bne.n	8003ad2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab0:	881a      	ldrh	r2, [r3, #0]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abc:	1c9a      	adds	r2, r3, #2
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	86da      	strh	r2, [r3, #54]	; 0x36
 8003ad0:	e011      	b.n	8003af6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ad2:	f7fe fd2d 	bl	8002530 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	683a      	ldr	r2, [r7, #0]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d803      	bhi.n	8003aea <HAL_SPI_Transmit+0x168>
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae8:	d102      	bne.n	8003af0 <HAL_SPI_Transmit+0x16e>
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d102      	bne.n	8003af6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003af4:	e074      	b.n	8003be0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d1ce      	bne.n	8003a9e <HAL_SPI_Transmit+0x11c>
 8003b00:	e04c      	b.n	8003b9c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d002      	beq.n	8003b10 <HAL_SPI_Transmit+0x18e>
 8003b0a:	8afb      	ldrh	r3, [r7, #22]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d140      	bne.n	8003b92 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	330c      	adds	r3, #12
 8003b1a:	7812      	ldrb	r2, [r2, #0]
 8003b1c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b22:	1c5a      	adds	r2, r3, #1
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003b36:	e02c      	b.n	8003b92 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d113      	bne.n	8003b6e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	330c      	adds	r3, #12
 8003b50:	7812      	ldrb	r2, [r2, #0]
 8003b52:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b58:	1c5a      	adds	r2, r3, #1
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	3b01      	subs	r3, #1
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	86da      	strh	r2, [r3, #54]	; 0x36
 8003b6c:	e011      	b.n	8003b92 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b6e:	f7fe fcdf 	bl	8002530 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	683a      	ldr	r2, [r7, #0]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d803      	bhi.n	8003b86 <HAL_SPI_Transmit+0x204>
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b84:	d102      	bne.n	8003b8c <HAL_SPI_Transmit+0x20a>
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d102      	bne.n	8003b92 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003b90:	e026      	b.n	8003be0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1cd      	bne.n	8003b38 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	6839      	ldr	r1, [r7, #0]
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f000 fbcb 	bl	800433c <SPI_EndRxTxTransaction>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d002      	beq.n	8003bb2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2220      	movs	r2, #32
 8003bb0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10a      	bne.n	8003bd0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bba:	2300      	movs	r3, #0
 8003bbc:	613b      	str	r3, [r7, #16]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	613b      	str	r3, [r7, #16]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	613b      	str	r3, [r7, #16]
 8003bce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d002      	beq.n	8003bde <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	77fb      	strb	r3, [r7, #31]
 8003bdc:	e000      	b.n	8003be0 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003bde:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003bf0:	7ffb      	ldrb	r3, [r7, #31]
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3720      	adds	r7, #32
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b088      	sub	sp, #32
 8003bfe:	af02      	add	r7, sp, #8
 8003c00:	60f8      	str	r0, [r7, #12]
 8003c02:	60b9      	str	r1, [r7, #8]
 8003c04:	603b      	str	r3, [r7, #0]
 8003c06:	4613      	mov	r3, r2
 8003c08:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c16:	d112      	bne.n	8003c3e <HAL_SPI_Receive+0x44>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d10e      	bne.n	8003c3e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2204      	movs	r2, #4
 8003c24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003c28:	88fa      	ldrh	r2, [r7, #6]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	9300      	str	r3, [sp, #0]
 8003c2e:	4613      	mov	r3, r2
 8003c30:	68ba      	ldr	r2, [r7, #8]
 8003c32:	68b9      	ldr	r1, [r7, #8]
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f000 f8f1 	bl	8003e1c <HAL_SPI_TransmitReceive>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	e0ea      	b.n	8003e14 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d101      	bne.n	8003c4c <HAL_SPI_Receive+0x52>
 8003c48:	2302      	movs	r3, #2
 8003c4a:	e0e3      	b.n	8003e14 <HAL_SPI_Receive+0x21a>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c54:	f7fe fc6c 	bl	8002530 <HAL_GetTick>
 8003c58:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d002      	beq.n	8003c6c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003c66:	2302      	movs	r3, #2
 8003c68:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003c6a:	e0ca      	b.n	8003e02 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d002      	beq.n	8003c78 <HAL_SPI_Receive+0x7e>
 8003c72:	88fb      	ldrh	r3, [r7, #6]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d102      	bne.n	8003c7e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003c7c:	e0c1      	b.n	8003e02 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2204      	movs	r2, #4
 8003c82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	68ba      	ldr	r2, [r7, #8]
 8003c90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	88fa      	ldrh	r2, [r7, #6]
 8003c96:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	88fa      	ldrh	r2, [r7, #6]
 8003c9c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cc4:	d10f      	bne.n	8003ce6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cd4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003ce4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf0:	2b40      	cmp	r3, #64	; 0x40
 8003cf2:	d007      	beq.n	8003d04 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d02:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d162      	bne.n	8003dd2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003d0c:	e02e      	b.n	8003d6c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d115      	bne.n	8003d48 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f103 020c 	add.w	r2, r3, #12
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d28:	7812      	ldrb	r2, [r2, #0]
 8003d2a:	b2d2      	uxtb	r2, r2
 8003d2c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d32:	1c5a      	adds	r2, r3, #1
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d46:	e011      	b.n	8003d6c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d48:	f7fe fbf2 	bl	8002530 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d803      	bhi.n	8003d60 <HAL_SPI_Receive+0x166>
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d5e:	d102      	bne.n	8003d66 <HAL_SPI_Receive+0x16c>
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d102      	bne.n	8003d6c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003d6a:	e04a      	b.n	8003e02 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1cb      	bne.n	8003d0e <HAL_SPI_Receive+0x114>
 8003d76:	e031      	b.n	8003ddc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d113      	bne.n	8003dae <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68da      	ldr	r2, [r3, #12]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d90:	b292      	uxth	r2, r2
 8003d92:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d98:	1c9a      	adds	r2, r3, #2
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	3b01      	subs	r3, #1
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003dac:	e011      	b.n	8003dd2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dae:	f7fe fbbf 	bl	8002530 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d803      	bhi.n	8003dc6 <HAL_SPI_Receive+0x1cc>
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc4:	d102      	bne.n	8003dcc <HAL_SPI_Receive+0x1d2>
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d102      	bne.n	8003dd2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003dd0:	e017      	b.n	8003e02 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1cd      	bne.n	8003d78 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	6839      	ldr	r1, [r7, #0]
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f000 fa45 	bl	8004270 <SPI_EndRxTransaction>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d002      	beq.n	8003df2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2220      	movs	r2, #32
 8003df0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d002      	beq.n	8003e00 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	75fb      	strb	r3, [r7, #23]
 8003dfe:	e000      	b.n	8003e02 <HAL_SPI_Receive+0x208>
  }

error :
 8003e00:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003e12:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3718      	adds	r7, #24
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b08c      	sub	sp, #48	; 0x30
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
 8003e28:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d101      	bne.n	8003e42 <HAL_SPI_TransmitReceive+0x26>
 8003e3e:	2302      	movs	r3, #2
 8003e40:	e18a      	b.n	8004158 <HAL_SPI_TransmitReceive+0x33c>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e4a:	f7fe fb71 	bl	8002530 <HAL_GetTick>
 8003e4e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003e60:	887b      	ldrh	r3, [r7, #2]
 8003e62:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003e64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d00f      	beq.n	8003e8c <HAL_SPI_TransmitReceive+0x70>
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e72:	d107      	bne.n	8003e84 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d103      	bne.n	8003e84 <HAL_SPI_TransmitReceive+0x68>
 8003e7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e80:	2b04      	cmp	r3, #4
 8003e82:	d003      	beq.n	8003e8c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003e84:	2302      	movs	r3, #2
 8003e86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003e8a:	e15b      	b.n	8004144 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d005      	beq.n	8003e9e <HAL_SPI_TransmitReceive+0x82>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d002      	beq.n	8003e9e <HAL_SPI_TransmitReceive+0x82>
 8003e98:	887b      	ldrh	r3, [r7, #2]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d103      	bne.n	8003ea6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003ea4:	e14e      	b.n	8004144 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b04      	cmp	r3, #4
 8003eb0:	d003      	beq.n	8003eba <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2205      	movs	r2, #5
 8003eb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	887a      	ldrh	r2, [r7, #2]
 8003eca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	887a      	ldrh	r2, [r7, #2]
 8003ed0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	68ba      	ldr	r2, [r7, #8]
 8003ed6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	887a      	ldrh	r2, [r7, #2]
 8003edc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	887a      	ldrh	r2, [r7, #2]
 8003ee2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003efa:	2b40      	cmp	r3, #64	; 0x40
 8003efc:	d007      	beq.n	8003f0e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f0c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f16:	d178      	bne.n	800400a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d002      	beq.n	8003f26 <HAL_SPI_TransmitReceive+0x10a>
 8003f20:	8b7b      	ldrh	r3, [r7, #26]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d166      	bne.n	8003ff4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2a:	881a      	ldrh	r2, [r3, #0]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f36:	1c9a      	adds	r2, r3, #2
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	3b01      	subs	r3, #1
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f4a:	e053      	b.n	8003ff4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d11b      	bne.n	8003f92 <HAL_SPI_TransmitReceive+0x176>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d016      	beq.n	8003f92 <HAL_SPI_TransmitReceive+0x176>
 8003f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d113      	bne.n	8003f92 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6e:	881a      	ldrh	r2, [r3, #0]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7a:	1c9a      	adds	r2, r3, #2
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	3b01      	subs	r3, #1
 8003f88:	b29a      	uxth	r2, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f003 0301 	and.w	r3, r3, #1
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d119      	bne.n	8003fd4 <HAL_SPI_TransmitReceive+0x1b8>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d014      	beq.n	8003fd4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68da      	ldr	r2, [r3, #12]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb4:	b292      	uxth	r2, r2
 8003fb6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fbc:	1c9a      	adds	r2, r3, #2
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003fd4:	f7fe faac 	bl	8002530 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d807      	bhi.n	8003ff4 <HAL_SPI_TransmitReceive+0x1d8>
 8003fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fea:	d003      	beq.n	8003ff4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003ff2:	e0a7      	b.n	8004144 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1a6      	bne.n	8003f4c <HAL_SPI_TransmitReceive+0x130>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004002:	b29b      	uxth	r3, r3
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1a1      	bne.n	8003f4c <HAL_SPI_TransmitReceive+0x130>
 8004008:	e07c      	b.n	8004104 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d002      	beq.n	8004018 <HAL_SPI_TransmitReceive+0x1fc>
 8004012:	8b7b      	ldrh	r3, [r7, #26]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d16b      	bne.n	80040f0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	330c      	adds	r3, #12
 8004022:	7812      	ldrb	r2, [r2, #0]
 8004024:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402a:	1c5a      	adds	r2, r3, #1
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004034:	b29b      	uxth	r3, r3
 8004036:	3b01      	subs	r3, #1
 8004038:	b29a      	uxth	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800403e:	e057      	b.n	80040f0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b02      	cmp	r3, #2
 800404c:	d11c      	bne.n	8004088 <HAL_SPI_TransmitReceive+0x26c>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004052:	b29b      	uxth	r3, r3
 8004054:	2b00      	cmp	r3, #0
 8004056:	d017      	beq.n	8004088 <HAL_SPI_TransmitReceive+0x26c>
 8004058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800405a:	2b01      	cmp	r3, #1
 800405c:	d114      	bne.n	8004088 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	330c      	adds	r3, #12
 8004068:	7812      	ldrb	r2, [r2, #0]
 800406a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004070:	1c5a      	adds	r2, r3, #1
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800407a:	b29b      	uxth	r3, r3
 800407c:	3b01      	subs	r3, #1
 800407e:	b29a      	uxth	r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004084:	2300      	movs	r3, #0
 8004086:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b01      	cmp	r3, #1
 8004094:	d119      	bne.n	80040ca <HAL_SPI_TransmitReceive+0x2ae>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800409a:	b29b      	uxth	r3, r3
 800409c:	2b00      	cmp	r3, #0
 800409e:	d014      	beq.n	80040ca <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68da      	ldr	r2, [r3, #12]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040aa:	b2d2      	uxtb	r2, r2
 80040ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b2:	1c5a      	adds	r2, r3, #1
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040bc:	b29b      	uxth	r3, r3
 80040be:	3b01      	subs	r3, #1
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040c6:	2301      	movs	r3, #1
 80040c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80040ca:	f7fe fa31 	bl	8002530 <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d803      	bhi.n	80040e2 <HAL_SPI_TransmitReceive+0x2c6>
 80040da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e0:	d102      	bne.n	80040e8 <HAL_SPI_TransmitReceive+0x2cc>
 80040e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d103      	bne.n	80040f0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80040ee:	e029      	b.n	8004144 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1a2      	bne.n	8004040 <HAL_SPI_TransmitReceive+0x224>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040fe:	b29b      	uxth	r3, r3
 8004100:	2b00      	cmp	r3, #0
 8004102:	d19d      	bne.n	8004040 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004104:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004106:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004108:	68f8      	ldr	r0, [r7, #12]
 800410a:	f000 f917 	bl	800433c <SPI_EndRxTxTransaction>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d006      	beq.n	8004122 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2220      	movs	r2, #32
 800411e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004120:	e010      	b.n	8004144 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10b      	bne.n	8004142 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800412a:	2300      	movs	r3, #0
 800412c:	617b      	str	r3, [r7, #20]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	617b      	str	r3, [r7, #20]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	617b      	str	r3, [r7, #20]
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	e000      	b.n	8004144 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004142:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004154:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004158:	4618      	mov	r0, r3
 800415a:	3730      	adds	r7, #48	; 0x30
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b088      	sub	sp, #32
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	603b      	str	r3, [r7, #0]
 800416c:	4613      	mov	r3, r2
 800416e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004170:	f7fe f9de 	bl	8002530 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004178:	1a9b      	subs	r3, r3, r2
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	4413      	add	r3, r2
 800417e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004180:	f7fe f9d6 	bl	8002530 <HAL_GetTick>
 8004184:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004186:	4b39      	ldr	r3, [pc, #228]	; (800426c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	015b      	lsls	r3, r3, #5
 800418c:	0d1b      	lsrs	r3, r3, #20
 800418e:	69fa      	ldr	r2, [r7, #28]
 8004190:	fb02 f303 	mul.w	r3, r2, r3
 8004194:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004196:	e054      	b.n	8004242 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800419e:	d050      	beq.n	8004242 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80041a0:	f7fe f9c6 	bl	8002530 <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	69fa      	ldr	r2, [r7, #28]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d902      	bls.n	80041b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d13d      	bne.n	8004232 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	685a      	ldr	r2, [r3, #4]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80041c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041ce:	d111      	bne.n	80041f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041d8:	d004      	beq.n	80041e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041e2:	d107      	bne.n	80041f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041fc:	d10f      	bne.n	800421e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800420c:	601a      	str	r2, [r3, #0]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800421c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2201      	movs	r2, #1
 8004222:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e017      	b.n	8004262 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d101      	bne.n	800423c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004238:	2300      	movs	r3, #0
 800423a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	3b01      	subs	r3, #1
 8004240:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	689a      	ldr	r2, [r3, #8]
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	4013      	ands	r3, r2
 800424c:	68ba      	ldr	r2, [r7, #8]
 800424e:	429a      	cmp	r2, r3
 8004250:	bf0c      	ite	eq
 8004252:	2301      	moveq	r3, #1
 8004254:	2300      	movne	r3, #0
 8004256:	b2db      	uxtb	r3, r3
 8004258:	461a      	mov	r2, r3
 800425a:	79fb      	ldrb	r3, [r7, #7]
 800425c:	429a      	cmp	r2, r3
 800425e:	d19b      	bne.n	8004198 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3720      	adds	r7, #32
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	20000004 	.word	0x20000004

08004270 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af02      	add	r7, sp, #8
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004284:	d111      	bne.n	80042aa <SPI_EndRxTransaction+0x3a>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800428e:	d004      	beq.n	800429a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004298:	d107      	bne.n	80042aa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042a8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042b2:	d12a      	bne.n	800430a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042bc:	d012      	beq.n	80042e4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	9300      	str	r3, [sp, #0]
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	2200      	movs	r2, #0
 80042c6:	2180      	movs	r1, #128	; 0x80
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f7ff ff49 	bl	8004160 <SPI_WaitFlagStateUntilTimeout>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d02d      	beq.n	8004330 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d8:	f043 0220 	orr.w	r2, r3, #32
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e026      	b.n	8004332 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	9300      	str	r3, [sp, #0]
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	2200      	movs	r2, #0
 80042ec:	2101      	movs	r1, #1
 80042ee:	68f8      	ldr	r0, [r7, #12]
 80042f0:	f7ff ff36 	bl	8004160 <SPI_WaitFlagStateUntilTimeout>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d01a      	beq.n	8004330 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042fe:	f043 0220 	orr.w	r2, r3, #32
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e013      	b.n	8004332 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	9300      	str	r3, [sp, #0]
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	2200      	movs	r2, #0
 8004312:	2101      	movs	r1, #1
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f7ff ff23 	bl	8004160 <SPI_WaitFlagStateUntilTimeout>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d007      	beq.n	8004330 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004324:	f043 0220 	orr.w	r2, r3, #32
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e000      	b.n	8004332 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
	...

0800433c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b088      	sub	sp, #32
 8004340:	af02      	add	r7, sp, #8
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004348:	4b1b      	ldr	r3, [pc, #108]	; (80043b8 <SPI_EndRxTxTransaction+0x7c>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a1b      	ldr	r2, [pc, #108]	; (80043bc <SPI_EndRxTxTransaction+0x80>)
 800434e:	fba2 2303 	umull	r2, r3, r2, r3
 8004352:	0d5b      	lsrs	r3, r3, #21
 8004354:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004358:	fb02 f303 	mul.w	r3, r2, r3
 800435c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004366:	d112      	bne.n	800438e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	9300      	str	r3, [sp, #0]
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	2200      	movs	r2, #0
 8004370:	2180      	movs	r1, #128	; 0x80
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f7ff fef4 	bl	8004160 <SPI_WaitFlagStateUntilTimeout>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d016      	beq.n	80043ac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004382:	f043 0220 	orr.w	r2, r3, #32
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e00f      	b.n	80043ae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00a      	beq.n	80043aa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	3b01      	subs	r3, #1
 8004398:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043a4:	2b80      	cmp	r3, #128	; 0x80
 80043a6:	d0f2      	beq.n	800438e <SPI_EndRxTxTransaction+0x52>
 80043a8:	e000      	b.n	80043ac <SPI_EndRxTxTransaction+0x70>
        break;
 80043aa:	bf00      	nop
  }

  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3718      	adds	r7, #24
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	20000004 	.word	0x20000004
 80043bc:	165e9f81 	.word	0x165e9f81

080043c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e041      	b.n	8004456 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d106      	bne.n	80043ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7fd fe68 	bl	80020bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2202      	movs	r2, #2
 80043f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	3304      	adds	r3, #4
 80043fc:	4619      	mov	r1, r3
 80043fe:	4610      	mov	r0, r2
 8004400:	f000 fa78 	bl	80048f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3708      	adds	r7, #8
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
	...

08004460 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004460:	b480      	push	{r7}
 8004462:	b085      	sub	sp, #20
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800446e:	b2db      	uxtb	r3, r3
 8004470:	2b01      	cmp	r3, #1
 8004472:	d001      	beq.n	8004478 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e04e      	b.n	8004516 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2202      	movs	r2, #2
 800447c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68da      	ldr	r2, [r3, #12]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f042 0201 	orr.w	r2, r2, #1
 800448e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a23      	ldr	r2, [pc, #140]	; (8004524 <HAL_TIM_Base_Start_IT+0xc4>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d022      	beq.n	80044e0 <HAL_TIM_Base_Start_IT+0x80>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044a2:	d01d      	beq.n	80044e0 <HAL_TIM_Base_Start_IT+0x80>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a1f      	ldr	r2, [pc, #124]	; (8004528 <HAL_TIM_Base_Start_IT+0xc8>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d018      	beq.n	80044e0 <HAL_TIM_Base_Start_IT+0x80>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a1e      	ldr	r2, [pc, #120]	; (800452c <HAL_TIM_Base_Start_IT+0xcc>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d013      	beq.n	80044e0 <HAL_TIM_Base_Start_IT+0x80>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a1c      	ldr	r2, [pc, #112]	; (8004530 <HAL_TIM_Base_Start_IT+0xd0>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d00e      	beq.n	80044e0 <HAL_TIM_Base_Start_IT+0x80>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a1b      	ldr	r2, [pc, #108]	; (8004534 <HAL_TIM_Base_Start_IT+0xd4>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d009      	beq.n	80044e0 <HAL_TIM_Base_Start_IT+0x80>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a19      	ldr	r2, [pc, #100]	; (8004538 <HAL_TIM_Base_Start_IT+0xd8>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d004      	beq.n	80044e0 <HAL_TIM_Base_Start_IT+0x80>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a18      	ldr	r2, [pc, #96]	; (800453c <HAL_TIM_Base_Start_IT+0xdc>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d111      	bne.n	8004504 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f003 0307 	and.w	r3, r3, #7
 80044ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2b06      	cmp	r3, #6
 80044f0:	d010      	beq.n	8004514 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f042 0201 	orr.w	r2, r2, #1
 8004500:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004502:	e007      	b.n	8004514 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f042 0201 	orr.w	r2, r2, #1
 8004512:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3714      	adds	r7, #20
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	40010000 	.word	0x40010000
 8004528:	40000400 	.word	0x40000400
 800452c:	40000800 	.word	0x40000800
 8004530:	40000c00 	.word	0x40000c00
 8004534:	40010400 	.word	0x40010400
 8004538:	40014000 	.word	0x40014000
 800453c:	40001800 	.word	0x40001800

08004540 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e041      	b.n	80045d6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d106      	bne.n	800456c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f7fd fd88 	bl	800207c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2202      	movs	r2, #2
 8004570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	3304      	adds	r3, #4
 800457c:	4619      	mov	r1, r3
 800457e:	4610      	mov	r0, r2
 8004580:	f000 f9b8 	bl	80048f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3708      	adds	r7, #8
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
	...

080045e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b086      	sub	sp, #24
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045ec:	2300      	movs	r3, #0
 80045ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d101      	bne.n	80045fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80045fa:	2302      	movs	r3, #2
 80045fc:	e0ae      	b.n	800475c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2201      	movs	r2, #1
 8004602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2b0c      	cmp	r3, #12
 800460a:	f200 809f 	bhi.w	800474c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800460e:	a201      	add	r2, pc, #4	; (adr r2, 8004614 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004614:	08004649 	.word	0x08004649
 8004618:	0800474d 	.word	0x0800474d
 800461c:	0800474d 	.word	0x0800474d
 8004620:	0800474d 	.word	0x0800474d
 8004624:	08004689 	.word	0x08004689
 8004628:	0800474d 	.word	0x0800474d
 800462c:	0800474d 	.word	0x0800474d
 8004630:	0800474d 	.word	0x0800474d
 8004634:	080046cb 	.word	0x080046cb
 8004638:	0800474d 	.word	0x0800474d
 800463c:	0800474d 	.word	0x0800474d
 8004640:	0800474d 	.word	0x0800474d
 8004644:	0800470b 	.word	0x0800470b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68b9      	ldr	r1, [r7, #8]
 800464e:	4618      	mov	r0, r3
 8004650:	f000 f9f0 	bl	8004a34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	699a      	ldr	r2, [r3, #24]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f042 0208 	orr.w	r2, r2, #8
 8004662:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	699a      	ldr	r2, [r3, #24]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f022 0204 	bic.w	r2, r2, #4
 8004672:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6999      	ldr	r1, [r3, #24]
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	691a      	ldr	r2, [r3, #16]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	430a      	orrs	r2, r1
 8004684:	619a      	str	r2, [r3, #24]
      break;
 8004686:	e064      	b.n	8004752 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68b9      	ldr	r1, [r7, #8]
 800468e:	4618      	mov	r0, r3
 8004690:	f000 fa40 	bl	8004b14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	699a      	ldr	r2, [r3, #24]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	699a      	ldr	r2, [r3, #24]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	6999      	ldr	r1, [r3, #24]
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	021a      	lsls	r2, r3, #8
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	430a      	orrs	r2, r1
 80046c6:	619a      	str	r2, [r3, #24]
      break;
 80046c8:	e043      	b.n	8004752 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68b9      	ldr	r1, [r7, #8]
 80046d0:	4618      	mov	r0, r3
 80046d2:	f000 fa95 	bl	8004c00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	69da      	ldr	r2, [r3, #28]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f042 0208 	orr.w	r2, r2, #8
 80046e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	69da      	ldr	r2, [r3, #28]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f022 0204 	bic.w	r2, r2, #4
 80046f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	69d9      	ldr	r1, [r3, #28]
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	691a      	ldr	r2, [r3, #16]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	430a      	orrs	r2, r1
 8004706:	61da      	str	r2, [r3, #28]
      break;
 8004708:	e023      	b.n	8004752 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68b9      	ldr	r1, [r7, #8]
 8004710:	4618      	mov	r0, r3
 8004712:	f000 fae9 	bl	8004ce8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	69da      	ldr	r2, [r3, #28]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004724:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	69da      	ldr	r2, [r3, #28]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004734:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	69d9      	ldr	r1, [r3, #28]
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	021a      	lsls	r2, r3, #8
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	430a      	orrs	r2, r1
 8004748:	61da      	str	r2, [r3, #28]
      break;
 800474a:	e002      	b.n	8004752 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	75fb      	strb	r3, [r7, #23]
      break;
 8004750:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800475a:	7dfb      	ldrb	r3, [r7, #23]
}
 800475c:	4618      	mov	r0, r3
 800475e:	3718      	adds	r7, #24
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800476e:	2300      	movs	r3, #0
 8004770:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004778:	2b01      	cmp	r3, #1
 800477a:	d101      	bne.n	8004780 <HAL_TIM_ConfigClockSource+0x1c>
 800477c:	2302      	movs	r3, #2
 800477e:	e0b4      	b.n	80048ea <HAL_TIM_ConfigClockSource+0x186>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2202      	movs	r2, #2
 800478c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800479e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68ba      	ldr	r2, [r7, #8]
 80047ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047b8:	d03e      	beq.n	8004838 <HAL_TIM_ConfigClockSource+0xd4>
 80047ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047be:	f200 8087 	bhi.w	80048d0 <HAL_TIM_ConfigClockSource+0x16c>
 80047c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047c6:	f000 8086 	beq.w	80048d6 <HAL_TIM_ConfigClockSource+0x172>
 80047ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ce:	d87f      	bhi.n	80048d0 <HAL_TIM_ConfigClockSource+0x16c>
 80047d0:	2b70      	cmp	r3, #112	; 0x70
 80047d2:	d01a      	beq.n	800480a <HAL_TIM_ConfigClockSource+0xa6>
 80047d4:	2b70      	cmp	r3, #112	; 0x70
 80047d6:	d87b      	bhi.n	80048d0 <HAL_TIM_ConfigClockSource+0x16c>
 80047d8:	2b60      	cmp	r3, #96	; 0x60
 80047da:	d050      	beq.n	800487e <HAL_TIM_ConfigClockSource+0x11a>
 80047dc:	2b60      	cmp	r3, #96	; 0x60
 80047de:	d877      	bhi.n	80048d0 <HAL_TIM_ConfigClockSource+0x16c>
 80047e0:	2b50      	cmp	r3, #80	; 0x50
 80047e2:	d03c      	beq.n	800485e <HAL_TIM_ConfigClockSource+0xfa>
 80047e4:	2b50      	cmp	r3, #80	; 0x50
 80047e6:	d873      	bhi.n	80048d0 <HAL_TIM_ConfigClockSource+0x16c>
 80047e8:	2b40      	cmp	r3, #64	; 0x40
 80047ea:	d058      	beq.n	800489e <HAL_TIM_ConfigClockSource+0x13a>
 80047ec:	2b40      	cmp	r3, #64	; 0x40
 80047ee:	d86f      	bhi.n	80048d0 <HAL_TIM_ConfigClockSource+0x16c>
 80047f0:	2b30      	cmp	r3, #48	; 0x30
 80047f2:	d064      	beq.n	80048be <HAL_TIM_ConfigClockSource+0x15a>
 80047f4:	2b30      	cmp	r3, #48	; 0x30
 80047f6:	d86b      	bhi.n	80048d0 <HAL_TIM_ConfigClockSource+0x16c>
 80047f8:	2b20      	cmp	r3, #32
 80047fa:	d060      	beq.n	80048be <HAL_TIM_ConfigClockSource+0x15a>
 80047fc:	2b20      	cmp	r3, #32
 80047fe:	d867      	bhi.n	80048d0 <HAL_TIM_ConfigClockSource+0x16c>
 8004800:	2b00      	cmp	r3, #0
 8004802:	d05c      	beq.n	80048be <HAL_TIM_ConfigClockSource+0x15a>
 8004804:	2b10      	cmp	r3, #16
 8004806:	d05a      	beq.n	80048be <HAL_TIM_ConfigClockSource+0x15a>
 8004808:	e062      	b.n	80048d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6818      	ldr	r0, [r3, #0]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	6899      	ldr	r1, [r3, #8]
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	685a      	ldr	r2, [r3, #4]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	f000 fb35 	bl	8004e88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800482c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68ba      	ldr	r2, [r7, #8]
 8004834:	609a      	str	r2, [r3, #8]
      break;
 8004836:	e04f      	b.n	80048d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6818      	ldr	r0, [r3, #0]
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	6899      	ldr	r1, [r3, #8]
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	685a      	ldr	r2, [r3, #4]
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	f000 fb1e 	bl	8004e88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	689a      	ldr	r2, [r3, #8]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800485a:	609a      	str	r2, [r3, #8]
      break;
 800485c:	e03c      	b.n	80048d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6818      	ldr	r0, [r3, #0]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	6859      	ldr	r1, [r3, #4]
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	461a      	mov	r2, r3
 800486c:	f000 fa92 	bl	8004d94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2150      	movs	r1, #80	; 0x50
 8004876:	4618      	mov	r0, r3
 8004878:	f000 faeb 	bl	8004e52 <TIM_ITRx_SetConfig>
      break;
 800487c:	e02c      	b.n	80048d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6818      	ldr	r0, [r3, #0]
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	6859      	ldr	r1, [r3, #4]
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	461a      	mov	r2, r3
 800488c:	f000 fab1 	bl	8004df2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2160      	movs	r1, #96	; 0x60
 8004896:	4618      	mov	r0, r3
 8004898:	f000 fadb 	bl	8004e52 <TIM_ITRx_SetConfig>
      break;
 800489c:	e01c      	b.n	80048d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6818      	ldr	r0, [r3, #0]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	6859      	ldr	r1, [r3, #4]
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	461a      	mov	r2, r3
 80048ac:	f000 fa72 	bl	8004d94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2140      	movs	r1, #64	; 0x40
 80048b6:	4618      	mov	r0, r3
 80048b8:	f000 facb 	bl	8004e52 <TIM_ITRx_SetConfig>
      break;
 80048bc:	e00c      	b.n	80048d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4619      	mov	r1, r3
 80048c8:	4610      	mov	r0, r2
 80048ca:	f000 fac2 	bl	8004e52 <TIM_ITRx_SetConfig>
      break;
 80048ce:	e003      	b.n	80048d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	73fb      	strb	r3, [r7, #15]
      break;
 80048d4:	e000      	b.n	80048d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80048d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3710      	adds	r7, #16
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
	...

080048f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a40      	ldr	r2, [pc, #256]	; (8004a08 <TIM_Base_SetConfig+0x114>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d013      	beq.n	8004934 <TIM_Base_SetConfig+0x40>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004912:	d00f      	beq.n	8004934 <TIM_Base_SetConfig+0x40>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a3d      	ldr	r2, [pc, #244]	; (8004a0c <TIM_Base_SetConfig+0x118>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d00b      	beq.n	8004934 <TIM_Base_SetConfig+0x40>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a3c      	ldr	r2, [pc, #240]	; (8004a10 <TIM_Base_SetConfig+0x11c>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d007      	beq.n	8004934 <TIM_Base_SetConfig+0x40>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a3b      	ldr	r2, [pc, #236]	; (8004a14 <TIM_Base_SetConfig+0x120>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d003      	beq.n	8004934 <TIM_Base_SetConfig+0x40>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a3a      	ldr	r2, [pc, #232]	; (8004a18 <TIM_Base_SetConfig+0x124>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d108      	bne.n	8004946 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800493a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	4313      	orrs	r3, r2
 8004944:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a2f      	ldr	r2, [pc, #188]	; (8004a08 <TIM_Base_SetConfig+0x114>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d02b      	beq.n	80049a6 <TIM_Base_SetConfig+0xb2>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004954:	d027      	beq.n	80049a6 <TIM_Base_SetConfig+0xb2>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a2c      	ldr	r2, [pc, #176]	; (8004a0c <TIM_Base_SetConfig+0x118>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d023      	beq.n	80049a6 <TIM_Base_SetConfig+0xb2>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a2b      	ldr	r2, [pc, #172]	; (8004a10 <TIM_Base_SetConfig+0x11c>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d01f      	beq.n	80049a6 <TIM_Base_SetConfig+0xb2>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a2a      	ldr	r2, [pc, #168]	; (8004a14 <TIM_Base_SetConfig+0x120>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d01b      	beq.n	80049a6 <TIM_Base_SetConfig+0xb2>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a29      	ldr	r2, [pc, #164]	; (8004a18 <TIM_Base_SetConfig+0x124>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d017      	beq.n	80049a6 <TIM_Base_SetConfig+0xb2>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a28      	ldr	r2, [pc, #160]	; (8004a1c <TIM_Base_SetConfig+0x128>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d013      	beq.n	80049a6 <TIM_Base_SetConfig+0xb2>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a27      	ldr	r2, [pc, #156]	; (8004a20 <TIM_Base_SetConfig+0x12c>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d00f      	beq.n	80049a6 <TIM_Base_SetConfig+0xb2>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a26      	ldr	r2, [pc, #152]	; (8004a24 <TIM_Base_SetConfig+0x130>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d00b      	beq.n	80049a6 <TIM_Base_SetConfig+0xb2>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a25      	ldr	r2, [pc, #148]	; (8004a28 <TIM_Base_SetConfig+0x134>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d007      	beq.n	80049a6 <TIM_Base_SetConfig+0xb2>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a24      	ldr	r2, [pc, #144]	; (8004a2c <TIM_Base_SetConfig+0x138>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d003      	beq.n	80049a6 <TIM_Base_SetConfig+0xb2>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a23      	ldr	r2, [pc, #140]	; (8004a30 <TIM_Base_SetConfig+0x13c>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d108      	bne.n	80049b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	68fa      	ldr	r2, [r7, #12]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	689a      	ldr	r2, [r3, #8]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a0a      	ldr	r2, [pc, #40]	; (8004a08 <TIM_Base_SetConfig+0x114>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d003      	beq.n	80049ec <TIM_Base_SetConfig+0xf8>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a0c      	ldr	r2, [pc, #48]	; (8004a18 <TIM_Base_SetConfig+0x124>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d103      	bne.n	80049f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	691a      	ldr	r2, [r3, #16]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	615a      	str	r2, [r3, #20]
}
 80049fa:	bf00      	nop
 80049fc:	3714      	adds	r7, #20
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	40010000 	.word	0x40010000
 8004a0c:	40000400 	.word	0x40000400
 8004a10:	40000800 	.word	0x40000800
 8004a14:	40000c00 	.word	0x40000c00
 8004a18:	40010400 	.word	0x40010400
 8004a1c:	40014000 	.word	0x40014000
 8004a20:	40014400 	.word	0x40014400
 8004a24:	40014800 	.word	0x40014800
 8004a28:	40001800 	.word	0x40001800
 8004a2c:	40001c00 	.word	0x40001c00
 8004a30:	40002000 	.word	0x40002000

08004a34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b087      	sub	sp, #28
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	f023 0201 	bic.w	r2, r3, #1
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f023 0303 	bic.w	r3, r3, #3
 8004a6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68fa      	ldr	r2, [r7, #12]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	f023 0302 	bic.w	r3, r3, #2
 8004a7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	697a      	ldr	r2, [r7, #20]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a20      	ldr	r2, [pc, #128]	; (8004b0c <TIM_OC1_SetConfig+0xd8>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d003      	beq.n	8004a98 <TIM_OC1_SetConfig+0x64>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a1f      	ldr	r2, [pc, #124]	; (8004b10 <TIM_OC1_SetConfig+0xdc>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d10c      	bne.n	8004ab2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	f023 0308 	bic.w	r3, r3, #8
 8004a9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	697a      	ldr	r2, [r7, #20]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	f023 0304 	bic.w	r3, r3, #4
 8004ab0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a15      	ldr	r2, [pc, #84]	; (8004b0c <TIM_OC1_SetConfig+0xd8>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d003      	beq.n	8004ac2 <TIM_OC1_SetConfig+0x8e>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a14      	ldr	r2, [pc, #80]	; (8004b10 <TIM_OC1_SetConfig+0xdc>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d111      	bne.n	8004ae6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ac8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ad0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	693a      	ldr	r2, [r7, #16]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	699b      	ldr	r3, [r3, #24]
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	693a      	ldr	r2, [r7, #16]
 8004aea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	685a      	ldr	r2, [r3, #4]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	621a      	str	r2, [r3, #32]
}
 8004b00:	bf00      	nop
 8004b02:	371c      	adds	r7, #28
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr
 8004b0c:	40010000 	.word	0x40010000
 8004b10:	40010400 	.word	0x40010400

08004b14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b087      	sub	sp, #28
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a1b      	ldr	r3, [r3, #32]
 8004b22:	f023 0210 	bic.w	r2, r3, #16
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
 8004b2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	021b      	lsls	r3, r3, #8
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	f023 0320 	bic.w	r3, r3, #32
 8004b5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	011b      	lsls	r3, r3, #4
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a22      	ldr	r2, [pc, #136]	; (8004bf8 <TIM_OC2_SetConfig+0xe4>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d003      	beq.n	8004b7c <TIM_OC2_SetConfig+0x68>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a21      	ldr	r2, [pc, #132]	; (8004bfc <TIM_OC2_SetConfig+0xe8>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d10d      	bne.n	8004b98 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	011b      	lsls	r3, r3, #4
 8004b8a:	697a      	ldr	r2, [r7, #20]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b96:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a17      	ldr	r2, [pc, #92]	; (8004bf8 <TIM_OC2_SetConfig+0xe4>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d003      	beq.n	8004ba8 <TIM_OC2_SetConfig+0x94>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a16      	ldr	r2, [pc, #88]	; (8004bfc <TIM_OC2_SetConfig+0xe8>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d113      	bne.n	8004bd0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bb6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	693a      	ldr	r2, [r7, #16]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	685a      	ldr	r2, [r3, #4]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	621a      	str	r2, [r3, #32]
}
 8004bea:	bf00      	nop
 8004bec:	371c      	adds	r7, #28
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop
 8004bf8:	40010000 	.word	0x40010000
 8004bfc:	40010400 	.word	0x40010400

08004c00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b087      	sub	sp, #28
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a1b      	ldr	r3, [r3, #32]
 8004c1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	69db      	ldr	r3, [r3, #28]
 8004c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f023 0303 	bic.w	r3, r3, #3
 8004c36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	021b      	lsls	r3, r3, #8
 8004c50:	697a      	ldr	r2, [r7, #20]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a21      	ldr	r2, [pc, #132]	; (8004ce0 <TIM_OC3_SetConfig+0xe0>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d003      	beq.n	8004c66 <TIM_OC3_SetConfig+0x66>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a20      	ldr	r2, [pc, #128]	; (8004ce4 <TIM_OC3_SetConfig+0xe4>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d10d      	bne.n	8004c82 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	021b      	lsls	r3, r3, #8
 8004c74:	697a      	ldr	r2, [r7, #20]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a16      	ldr	r2, [pc, #88]	; (8004ce0 <TIM_OC3_SetConfig+0xe0>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d003      	beq.n	8004c92 <TIM_OC3_SetConfig+0x92>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a15      	ldr	r2, [pc, #84]	; (8004ce4 <TIM_OC3_SetConfig+0xe4>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d113      	bne.n	8004cba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ca0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	011b      	lsls	r3, r3, #4
 8004ca8:	693a      	ldr	r2, [r7, #16]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	699b      	ldr	r3, [r3, #24]
 8004cb2:	011b      	lsls	r3, r3, #4
 8004cb4:	693a      	ldr	r2, [r7, #16]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	693a      	ldr	r2, [r7, #16]
 8004cbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	685a      	ldr	r2, [r3, #4]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	697a      	ldr	r2, [r7, #20]
 8004cd2:	621a      	str	r2, [r3, #32]
}
 8004cd4:	bf00      	nop
 8004cd6:	371c      	adds	r7, #28
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr
 8004ce0:	40010000 	.word	0x40010000
 8004ce4:	40010400 	.word	0x40010400

08004ce8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b087      	sub	sp, #28
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
 8004cf6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a1b      	ldr	r3, [r3, #32]
 8004d02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	69db      	ldr	r3, [r3, #28]
 8004d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	021b      	lsls	r3, r3, #8
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	031b      	lsls	r3, r3, #12
 8004d3a:	693a      	ldr	r2, [r7, #16]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a12      	ldr	r2, [pc, #72]	; (8004d8c <TIM_OC4_SetConfig+0xa4>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d003      	beq.n	8004d50 <TIM_OC4_SetConfig+0x68>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a11      	ldr	r2, [pc, #68]	; (8004d90 <TIM_OC4_SetConfig+0xa8>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d109      	bne.n	8004d64 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	695b      	ldr	r3, [r3, #20]
 8004d5c:	019b      	lsls	r3, r3, #6
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	697a      	ldr	r2, [r7, #20]
 8004d68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	685a      	ldr	r2, [r3, #4]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	621a      	str	r2, [r3, #32]
}
 8004d7e:	bf00      	nop
 8004d80:	371c      	adds	r7, #28
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	40010000 	.word	0x40010000
 8004d90:	40010400 	.word	0x40010400

08004d94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b087      	sub	sp, #28
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6a1b      	ldr	r3, [r3, #32]
 8004da4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	f023 0201 	bic.w	r2, r3, #1
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	699b      	ldr	r3, [r3, #24]
 8004db6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004dbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	011b      	lsls	r3, r3, #4
 8004dc4:	693a      	ldr	r2, [r7, #16]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	f023 030a 	bic.w	r3, r3, #10
 8004dd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	693a      	ldr	r2, [r7, #16]
 8004dde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	697a      	ldr	r2, [r7, #20]
 8004de4:	621a      	str	r2, [r3, #32]
}
 8004de6:	bf00      	nop
 8004de8:	371c      	adds	r7, #28
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr

08004df2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004df2:	b480      	push	{r7}
 8004df4:	b087      	sub	sp, #28
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	60f8      	str	r0, [r7, #12]
 8004dfa:	60b9      	str	r1, [r7, #8]
 8004dfc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6a1b      	ldr	r3, [r3, #32]
 8004e02:	f023 0210 	bic.w	r2, r3, #16
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	699b      	ldr	r3, [r3, #24]
 8004e0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6a1b      	ldr	r3, [r3, #32]
 8004e14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	031b      	lsls	r3, r3, #12
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	011b      	lsls	r3, r3, #4
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	621a      	str	r2, [r3, #32]
}
 8004e46:	bf00      	nop
 8004e48:	371c      	adds	r7, #28
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr

08004e52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e52:	b480      	push	{r7}
 8004e54:	b085      	sub	sp, #20
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
 8004e5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e6a:	683a      	ldr	r2, [r7, #0]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	f043 0307 	orr.w	r3, r3, #7
 8004e74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	609a      	str	r2, [r3, #8]
}
 8004e7c:	bf00      	nop
 8004e7e:	3714      	adds	r7, #20
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b087      	sub	sp, #28
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	607a      	str	r2, [r7, #4]
 8004e94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ea2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	021a      	lsls	r2, r3, #8
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	697a      	ldr	r2, [r7, #20]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	609a      	str	r2, [r3, #8]
}
 8004ebc:	bf00      	nop
 8004ebe:	371c      	adds	r7, #28
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d101      	bne.n	8004ee0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004edc:	2302      	movs	r3, #2
 8004ede:	e05a      	b.n	8004f96 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2202      	movs	r2, #2
 8004eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a21      	ldr	r2, [pc, #132]	; (8004fa4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d022      	beq.n	8004f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f2c:	d01d      	beq.n	8004f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a1d      	ldr	r2, [pc, #116]	; (8004fa8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d018      	beq.n	8004f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a1b      	ldr	r2, [pc, #108]	; (8004fac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d013      	beq.n	8004f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a1a      	ldr	r2, [pc, #104]	; (8004fb0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d00e      	beq.n	8004f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a18      	ldr	r2, [pc, #96]	; (8004fb4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d009      	beq.n	8004f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a17      	ldr	r2, [pc, #92]	; (8004fb8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d004      	beq.n	8004f6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a15      	ldr	r2, [pc, #84]	; (8004fbc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d10c      	bne.n	8004f84 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	68ba      	ldr	r2, [r7, #8]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68ba      	ldr	r2, [r7, #8]
 8004f82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3714      	adds	r7, #20
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop
 8004fa4:	40010000 	.word	0x40010000
 8004fa8:	40000400 	.word	0x40000400
 8004fac:	40000800 	.word	0x40000800
 8004fb0:	40000c00 	.word	0x40000c00
 8004fb4:	40010400 	.word	0x40010400
 8004fb8:	40014000 	.word	0x40014000
 8004fbc:	40001800 	.word	0x40001800

08004fc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d101      	bne.n	8004fd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e03f      	b.n	8005052 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d106      	bne.n	8004fec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f7fd f8ea 	bl	80021c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2224      	movs	r2, #36	; 0x24
 8004ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68da      	ldr	r2, [r3, #12]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005002:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 f829 	bl	800505c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	691a      	ldr	r2, [r3, #16]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005018:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	695a      	ldr	r2, [r3, #20]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005028:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68da      	ldr	r2, [r3, #12]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005038:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2220      	movs	r2, #32
 8005044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2220      	movs	r2, #32
 800504c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3708      	adds	r7, #8
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
	...

0800505c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800505c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005060:	b0c0      	sub	sp, #256	; 0x100
 8005062:	af00      	add	r7, sp, #0
 8005064:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005078:	68d9      	ldr	r1, [r3, #12]
 800507a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	ea40 0301 	orr.w	r3, r0, r1
 8005084:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800508a:	689a      	ldr	r2, [r3, #8]
 800508c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	431a      	orrs	r2, r3
 8005094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	431a      	orrs	r2, r3
 800509c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a0:	69db      	ldr	r3, [r3, #28]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80050a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80050b4:	f021 010c 	bic.w	r1, r1, #12
 80050b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80050c2:	430b      	orrs	r3, r1
 80050c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80050d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050d6:	6999      	ldr	r1, [r3, #24]
 80050d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	ea40 0301 	orr.w	r3, r0, r1
 80050e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	4b8f      	ldr	r3, [pc, #572]	; (8005328 <UART_SetConfig+0x2cc>)
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d005      	beq.n	80050fc <UART_SetConfig+0xa0>
 80050f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	4b8d      	ldr	r3, [pc, #564]	; (800532c <UART_SetConfig+0x2d0>)
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d104      	bne.n	8005106 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80050fc:	f7fe fba4 	bl	8003848 <HAL_RCC_GetPCLK2Freq>
 8005100:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005104:	e003      	b.n	800510e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005106:	f7fe fb8b 	bl	8003820 <HAL_RCC_GetPCLK1Freq>
 800510a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800510e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005112:	69db      	ldr	r3, [r3, #28]
 8005114:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005118:	f040 810c 	bne.w	8005334 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800511c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005120:	2200      	movs	r2, #0
 8005122:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005126:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800512a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800512e:	4622      	mov	r2, r4
 8005130:	462b      	mov	r3, r5
 8005132:	1891      	adds	r1, r2, r2
 8005134:	65b9      	str	r1, [r7, #88]	; 0x58
 8005136:	415b      	adcs	r3, r3
 8005138:	65fb      	str	r3, [r7, #92]	; 0x5c
 800513a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800513e:	4621      	mov	r1, r4
 8005140:	eb12 0801 	adds.w	r8, r2, r1
 8005144:	4629      	mov	r1, r5
 8005146:	eb43 0901 	adc.w	r9, r3, r1
 800514a:	f04f 0200 	mov.w	r2, #0
 800514e:	f04f 0300 	mov.w	r3, #0
 8005152:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005156:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800515a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800515e:	4690      	mov	r8, r2
 8005160:	4699      	mov	r9, r3
 8005162:	4623      	mov	r3, r4
 8005164:	eb18 0303 	adds.w	r3, r8, r3
 8005168:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800516c:	462b      	mov	r3, r5
 800516e:	eb49 0303 	adc.w	r3, r9, r3
 8005172:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005182:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005186:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800518a:	460b      	mov	r3, r1
 800518c:	18db      	adds	r3, r3, r3
 800518e:	653b      	str	r3, [r7, #80]	; 0x50
 8005190:	4613      	mov	r3, r2
 8005192:	eb42 0303 	adc.w	r3, r2, r3
 8005196:	657b      	str	r3, [r7, #84]	; 0x54
 8005198:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800519c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80051a0:	f7fb fc84 	bl	8000aac <__aeabi_uldivmod>
 80051a4:	4602      	mov	r2, r0
 80051a6:	460b      	mov	r3, r1
 80051a8:	4b61      	ldr	r3, [pc, #388]	; (8005330 <UART_SetConfig+0x2d4>)
 80051aa:	fba3 2302 	umull	r2, r3, r3, r2
 80051ae:	095b      	lsrs	r3, r3, #5
 80051b0:	011c      	lsls	r4, r3, #4
 80051b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051b6:	2200      	movs	r2, #0
 80051b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80051bc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80051c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80051c4:	4642      	mov	r2, r8
 80051c6:	464b      	mov	r3, r9
 80051c8:	1891      	adds	r1, r2, r2
 80051ca:	64b9      	str	r1, [r7, #72]	; 0x48
 80051cc:	415b      	adcs	r3, r3
 80051ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80051d4:	4641      	mov	r1, r8
 80051d6:	eb12 0a01 	adds.w	sl, r2, r1
 80051da:	4649      	mov	r1, r9
 80051dc:	eb43 0b01 	adc.w	fp, r3, r1
 80051e0:	f04f 0200 	mov.w	r2, #0
 80051e4:	f04f 0300 	mov.w	r3, #0
 80051e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80051ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80051f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051f4:	4692      	mov	sl, r2
 80051f6:	469b      	mov	fp, r3
 80051f8:	4643      	mov	r3, r8
 80051fa:	eb1a 0303 	adds.w	r3, sl, r3
 80051fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005202:	464b      	mov	r3, r9
 8005204:	eb4b 0303 	adc.w	r3, fp, r3
 8005208:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800520c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005218:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800521c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005220:	460b      	mov	r3, r1
 8005222:	18db      	adds	r3, r3, r3
 8005224:	643b      	str	r3, [r7, #64]	; 0x40
 8005226:	4613      	mov	r3, r2
 8005228:	eb42 0303 	adc.w	r3, r2, r3
 800522c:	647b      	str	r3, [r7, #68]	; 0x44
 800522e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005232:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005236:	f7fb fc39 	bl	8000aac <__aeabi_uldivmod>
 800523a:	4602      	mov	r2, r0
 800523c:	460b      	mov	r3, r1
 800523e:	4611      	mov	r1, r2
 8005240:	4b3b      	ldr	r3, [pc, #236]	; (8005330 <UART_SetConfig+0x2d4>)
 8005242:	fba3 2301 	umull	r2, r3, r3, r1
 8005246:	095b      	lsrs	r3, r3, #5
 8005248:	2264      	movs	r2, #100	; 0x64
 800524a:	fb02 f303 	mul.w	r3, r2, r3
 800524e:	1acb      	subs	r3, r1, r3
 8005250:	00db      	lsls	r3, r3, #3
 8005252:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005256:	4b36      	ldr	r3, [pc, #216]	; (8005330 <UART_SetConfig+0x2d4>)
 8005258:	fba3 2302 	umull	r2, r3, r3, r2
 800525c:	095b      	lsrs	r3, r3, #5
 800525e:	005b      	lsls	r3, r3, #1
 8005260:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005264:	441c      	add	r4, r3
 8005266:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800526a:	2200      	movs	r2, #0
 800526c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005270:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005274:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005278:	4642      	mov	r2, r8
 800527a:	464b      	mov	r3, r9
 800527c:	1891      	adds	r1, r2, r2
 800527e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005280:	415b      	adcs	r3, r3
 8005282:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005284:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005288:	4641      	mov	r1, r8
 800528a:	1851      	adds	r1, r2, r1
 800528c:	6339      	str	r1, [r7, #48]	; 0x30
 800528e:	4649      	mov	r1, r9
 8005290:	414b      	adcs	r3, r1
 8005292:	637b      	str	r3, [r7, #52]	; 0x34
 8005294:	f04f 0200 	mov.w	r2, #0
 8005298:	f04f 0300 	mov.w	r3, #0
 800529c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80052a0:	4659      	mov	r1, fp
 80052a2:	00cb      	lsls	r3, r1, #3
 80052a4:	4651      	mov	r1, sl
 80052a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052aa:	4651      	mov	r1, sl
 80052ac:	00ca      	lsls	r2, r1, #3
 80052ae:	4610      	mov	r0, r2
 80052b0:	4619      	mov	r1, r3
 80052b2:	4603      	mov	r3, r0
 80052b4:	4642      	mov	r2, r8
 80052b6:	189b      	adds	r3, r3, r2
 80052b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80052bc:	464b      	mov	r3, r9
 80052be:	460a      	mov	r2, r1
 80052c0:	eb42 0303 	adc.w	r3, r2, r3
 80052c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80052c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80052d4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80052d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80052dc:	460b      	mov	r3, r1
 80052de:	18db      	adds	r3, r3, r3
 80052e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80052e2:	4613      	mov	r3, r2
 80052e4:	eb42 0303 	adc.w	r3, r2, r3
 80052e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80052f2:	f7fb fbdb 	bl	8000aac <__aeabi_uldivmod>
 80052f6:	4602      	mov	r2, r0
 80052f8:	460b      	mov	r3, r1
 80052fa:	4b0d      	ldr	r3, [pc, #52]	; (8005330 <UART_SetConfig+0x2d4>)
 80052fc:	fba3 1302 	umull	r1, r3, r3, r2
 8005300:	095b      	lsrs	r3, r3, #5
 8005302:	2164      	movs	r1, #100	; 0x64
 8005304:	fb01 f303 	mul.w	r3, r1, r3
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	00db      	lsls	r3, r3, #3
 800530c:	3332      	adds	r3, #50	; 0x32
 800530e:	4a08      	ldr	r2, [pc, #32]	; (8005330 <UART_SetConfig+0x2d4>)
 8005310:	fba2 2303 	umull	r2, r3, r2, r3
 8005314:	095b      	lsrs	r3, r3, #5
 8005316:	f003 0207 	and.w	r2, r3, #7
 800531a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4422      	add	r2, r4
 8005322:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005324:	e106      	b.n	8005534 <UART_SetConfig+0x4d8>
 8005326:	bf00      	nop
 8005328:	40011000 	.word	0x40011000
 800532c:	40011400 	.word	0x40011400
 8005330:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005334:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005338:	2200      	movs	r2, #0
 800533a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800533e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005342:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005346:	4642      	mov	r2, r8
 8005348:	464b      	mov	r3, r9
 800534a:	1891      	adds	r1, r2, r2
 800534c:	6239      	str	r1, [r7, #32]
 800534e:	415b      	adcs	r3, r3
 8005350:	627b      	str	r3, [r7, #36]	; 0x24
 8005352:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005356:	4641      	mov	r1, r8
 8005358:	1854      	adds	r4, r2, r1
 800535a:	4649      	mov	r1, r9
 800535c:	eb43 0501 	adc.w	r5, r3, r1
 8005360:	f04f 0200 	mov.w	r2, #0
 8005364:	f04f 0300 	mov.w	r3, #0
 8005368:	00eb      	lsls	r3, r5, #3
 800536a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800536e:	00e2      	lsls	r2, r4, #3
 8005370:	4614      	mov	r4, r2
 8005372:	461d      	mov	r5, r3
 8005374:	4643      	mov	r3, r8
 8005376:	18e3      	adds	r3, r4, r3
 8005378:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800537c:	464b      	mov	r3, r9
 800537e:	eb45 0303 	adc.w	r3, r5, r3
 8005382:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005392:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005396:	f04f 0200 	mov.w	r2, #0
 800539a:	f04f 0300 	mov.w	r3, #0
 800539e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80053a2:	4629      	mov	r1, r5
 80053a4:	008b      	lsls	r3, r1, #2
 80053a6:	4621      	mov	r1, r4
 80053a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053ac:	4621      	mov	r1, r4
 80053ae:	008a      	lsls	r2, r1, #2
 80053b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80053b4:	f7fb fb7a 	bl	8000aac <__aeabi_uldivmod>
 80053b8:	4602      	mov	r2, r0
 80053ba:	460b      	mov	r3, r1
 80053bc:	4b60      	ldr	r3, [pc, #384]	; (8005540 <UART_SetConfig+0x4e4>)
 80053be:	fba3 2302 	umull	r2, r3, r3, r2
 80053c2:	095b      	lsrs	r3, r3, #5
 80053c4:	011c      	lsls	r4, r3, #4
 80053c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053ca:	2200      	movs	r2, #0
 80053cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80053d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80053d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80053d8:	4642      	mov	r2, r8
 80053da:	464b      	mov	r3, r9
 80053dc:	1891      	adds	r1, r2, r2
 80053de:	61b9      	str	r1, [r7, #24]
 80053e0:	415b      	adcs	r3, r3
 80053e2:	61fb      	str	r3, [r7, #28]
 80053e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053e8:	4641      	mov	r1, r8
 80053ea:	1851      	adds	r1, r2, r1
 80053ec:	6139      	str	r1, [r7, #16]
 80053ee:	4649      	mov	r1, r9
 80053f0:	414b      	adcs	r3, r1
 80053f2:	617b      	str	r3, [r7, #20]
 80053f4:	f04f 0200 	mov.w	r2, #0
 80053f8:	f04f 0300 	mov.w	r3, #0
 80053fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005400:	4659      	mov	r1, fp
 8005402:	00cb      	lsls	r3, r1, #3
 8005404:	4651      	mov	r1, sl
 8005406:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800540a:	4651      	mov	r1, sl
 800540c:	00ca      	lsls	r2, r1, #3
 800540e:	4610      	mov	r0, r2
 8005410:	4619      	mov	r1, r3
 8005412:	4603      	mov	r3, r0
 8005414:	4642      	mov	r2, r8
 8005416:	189b      	adds	r3, r3, r2
 8005418:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800541c:	464b      	mov	r3, r9
 800541e:	460a      	mov	r2, r1
 8005420:	eb42 0303 	adc.w	r3, r2, r3
 8005424:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	67bb      	str	r3, [r7, #120]	; 0x78
 8005432:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005434:	f04f 0200 	mov.w	r2, #0
 8005438:	f04f 0300 	mov.w	r3, #0
 800543c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005440:	4649      	mov	r1, r9
 8005442:	008b      	lsls	r3, r1, #2
 8005444:	4641      	mov	r1, r8
 8005446:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800544a:	4641      	mov	r1, r8
 800544c:	008a      	lsls	r2, r1, #2
 800544e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005452:	f7fb fb2b 	bl	8000aac <__aeabi_uldivmod>
 8005456:	4602      	mov	r2, r0
 8005458:	460b      	mov	r3, r1
 800545a:	4611      	mov	r1, r2
 800545c:	4b38      	ldr	r3, [pc, #224]	; (8005540 <UART_SetConfig+0x4e4>)
 800545e:	fba3 2301 	umull	r2, r3, r3, r1
 8005462:	095b      	lsrs	r3, r3, #5
 8005464:	2264      	movs	r2, #100	; 0x64
 8005466:	fb02 f303 	mul.w	r3, r2, r3
 800546a:	1acb      	subs	r3, r1, r3
 800546c:	011b      	lsls	r3, r3, #4
 800546e:	3332      	adds	r3, #50	; 0x32
 8005470:	4a33      	ldr	r2, [pc, #204]	; (8005540 <UART_SetConfig+0x4e4>)
 8005472:	fba2 2303 	umull	r2, r3, r2, r3
 8005476:	095b      	lsrs	r3, r3, #5
 8005478:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800547c:	441c      	add	r4, r3
 800547e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005482:	2200      	movs	r2, #0
 8005484:	673b      	str	r3, [r7, #112]	; 0x70
 8005486:	677a      	str	r2, [r7, #116]	; 0x74
 8005488:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800548c:	4642      	mov	r2, r8
 800548e:	464b      	mov	r3, r9
 8005490:	1891      	adds	r1, r2, r2
 8005492:	60b9      	str	r1, [r7, #8]
 8005494:	415b      	adcs	r3, r3
 8005496:	60fb      	str	r3, [r7, #12]
 8005498:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800549c:	4641      	mov	r1, r8
 800549e:	1851      	adds	r1, r2, r1
 80054a0:	6039      	str	r1, [r7, #0]
 80054a2:	4649      	mov	r1, r9
 80054a4:	414b      	adcs	r3, r1
 80054a6:	607b      	str	r3, [r7, #4]
 80054a8:	f04f 0200 	mov.w	r2, #0
 80054ac:	f04f 0300 	mov.w	r3, #0
 80054b0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80054b4:	4659      	mov	r1, fp
 80054b6:	00cb      	lsls	r3, r1, #3
 80054b8:	4651      	mov	r1, sl
 80054ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054be:	4651      	mov	r1, sl
 80054c0:	00ca      	lsls	r2, r1, #3
 80054c2:	4610      	mov	r0, r2
 80054c4:	4619      	mov	r1, r3
 80054c6:	4603      	mov	r3, r0
 80054c8:	4642      	mov	r2, r8
 80054ca:	189b      	adds	r3, r3, r2
 80054cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80054ce:	464b      	mov	r3, r9
 80054d0:	460a      	mov	r2, r1
 80054d2:	eb42 0303 	adc.w	r3, r2, r3
 80054d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	663b      	str	r3, [r7, #96]	; 0x60
 80054e2:	667a      	str	r2, [r7, #100]	; 0x64
 80054e4:	f04f 0200 	mov.w	r2, #0
 80054e8:	f04f 0300 	mov.w	r3, #0
 80054ec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80054f0:	4649      	mov	r1, r9
 80054f2:	008b      	lsls	r3, r1, #2
 80054f4:	4641      	mov	r1, r8
 80054f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054fa:	4641      	mov	r1, r8
 80054fc:	008a      	lsls	r2, r1, #2
 80054fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005502:	f7fb fad3 	bl	8000aac <__aeabi_uldivmod>
 8005506:	4602      	mov	r2, r0
 8005508:	460b      	mov	r3, r1
 800550a:	4b0d      	ldr	r3, [pc, #52]	; (8005540 <UART_SetConfig+0x4e4>)
 800550c:	fba3 1302 	umull	r1, r3, r3, r2
 8005510:	095b      	lsrs	r3, r3, #5
 8005512:	2164      	movs	r1, #100	; 0x64
 8005514:	fb01 f303 	mul.w	r3, r1, r3
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	011b      	lsls	r3, r3, #4
 800551c:	3332      	adds	r3, #50	; 0x32
 800551e:	4a08      	ldr	r2, [pc, #32]	; (8005540 <UART_SetConfig+0x4e4>)
 8005520:	fba2 2303 	umull	r2, r3, r2, r3
 8005524:	095b      	lsrs	r3, r3, #5
 8005526:	f003 020f 	and.w	r2, r3, #15
 800552a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4422      	add	r2, r4
 8005532:	609a      	str	r2, [r3, #8]
}
 8005534:	bf00      	nop
 8005536:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800553a:	46bd      	mov	sp, r7
 800553c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005540:	51eb851f 	.word	0x51eb851f

08005544 <std>:
 8005544:	2300      	movs	r3, #0
 8005546:	b510      	push	{r4, lr}
 8005548:	4604      	mov	r4, r0
 800554a:	e9c0 3300 	strd	r3, r3, [r0]
 800554e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005552:	6083      	str	r3, [r0, #8]
 8005554:	8181      	strh	r1, [r0, #12]
 8005556:	6643      	str	r3, [r0, #100]	; 0x64
 8005558:	81c2      	strh	r2, [r0, #14]
 800555a:	6183      	str	r3, [r0, #24]
 800555c:	4619      	mov	r1, r3
 800555e:	2208      	movs	r2, #8
 8005560:	305c      	adds	r0, #92	; 0x5c
 8005562:	f000 f9e5 	bl	8005930 <memset>
 8005566:	4b05      	ldr	r3, [pc, #20]	; (800557c <std+0x38>)
 8005568:	6263      	str	r3, [r4, #36]	; 0x24
 800556a:	4b05      	ldr	r3, [pc, #20]	; (8005580 <std+0x3c>)
 800556c:	62a3      	str	r3, [r4, #40]	; 0x28
 800556e:	4b05      	ldr	r3, [pc, #20]	; (8005584 <std+0x40>)
 8005570:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005572:	4b05      	ldr	r3, [pc, #20]	; (8005588 <std+0x44>)
 8005574:	6224      	str	r4, [r4, #32]
 8005576:	6323      	str	r3, [r4, #48]	; 0x30
 8005578:	bd10      	pop	{r4, pc}
 800557a:	bf00      	nop
 800557c:	08005781 	.word	0x08005781
 8005580:	080057a3 	.word	0x080057a3
 8005584:	080057db 	.word	0x080057db
 8005588:	080057ff 	.word	0x080057ff

0800558c <stdio_exit_handler>:
 800558c:	4a02      	ldr	r2, [pc, #8]	; (8005598 <stdio_exit_handler+0xc>)
 800558e:	4903      	ldr	r1, [pc, #12]	; (800559c <stdio_exit_handler+0x10>)
 8005590:	4803      	ldr	r0, [pc, #12]	; (80055a0 <stdio_exit_handler+0x14>)
 8005592:	f000 b869 	b.w	8005668 <_fwalk_sglue>
 8005596:	bf00      	nop
 8005598:	20000010 	.word	0x20000010
 800559c:	080062c9 	.word	0x080062c9
 80055a0:	2000001c 	.word	0x2000001c

080055a4 <cleanup_stdio>:
 80055a4:	6841      	ldr	r1, [r0, #4]
 80055a6:	4b0c      	ldr	r3, [pc, #48]	; (80055d8 <cleanup_stdio+0x34>)
 80055a8:	4299      	cmp	r1, r3
 80055aa:	b510      	push	{r4, lr}
 80055ac:	4604      	mov	r4, r0
 80055ae:	d001      	beq.n	80055b4 <cleanup_stdio+0x10>
 80055b0:	f000 fe8a 	bl	80062c8 <_fflush_r>
 80055b4:	68a1      	ldr	r1, [r4, #8]
 80055b6:	4b09      	ldr	r3, [pc, #36]	; (80055dc <cleanup_stdio+0x38>)
 80055b8:	4299      	cmp	r1, r3
 80055ba:	d002      	beq.n	80055c2 <cleanup_stdio+0x1e>
 80055bc:	4620      	mov	r0, r4
 80055be:	f000 fe83 	bl	80062c8 <_fflush_r>
 80055c2:	68e1      	ldr	r1, [r4, #12]
 80055c4:	4b06      	ldr	r3, [pc, #24]	; (80055e0 <cleanup_stdio+0x3c>)
 80055c6:	4299      	cmp	r1, r3
 80055c8:	d004      	beq.n	80055d4 <cleanup_stdio+0x30>
 80055ca:	4620      	mov	r0, r4
 80055cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055d0:	f000 be7a 	b.w	80062c8 <_fflush_r>
 80055d4:	bd10      	pop	{r4, pc}
 80055d6:	bf00      	nop
 80055d8:	200031a8 	.word	0x200031a8
 80055dc:	20003210 	.word	0x20003210
 80055e0:	20003278 	.word	0x20003278

080055e4 <global_stdio_init.part.0>:
 80055e4:	b510      	push	{r4, lr}
 80055e6:	4b0b      	ldr	r3, [pc, #44]	; (8005614 <global_stdio_init.part.0+0x30>)
 80055e8:	4c0b      	ldr	r4, [pc, #44]	; (8005618 <global_stdio_init.part.0+0x34>)
 80055ea:	4a0c      	ldr	r2, [pc, #48]	; (800561c <global_stdio_init.part.0+0x38>)
 80055ec:	601a      	str	r2, [r3, #0]
 80055ee:	4620      	mov	r0, r4
 80055f0:	2200      	movs	r2, #0
 80055f2:	2104      	movs	r1, #4
 80055f4:	f7ff ffa6 	bl	8005544 <std>
 80055f8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80055fc:	2201      	movs	r2, #1
 80055fe:	2109      	movs	r1, #9
 8005600:	f7ff ffa0 	bl	8005544 <std>
 8005604:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005608:	2202      	movs	r2, #2
 800560a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800560e:	2112      	movs	r1, #18
 8005610:	f7ff bf98 	b.w	8005544 <std>
 8005614:	200032e0 	.word	0x200032e0
 8005618:	200031a8 	.word	0x200031a8
 800561c:	0800558d 	.word	0x0800558d

08005620 <__sfp_lock_acquire>:
 8005620:	4801      	ldr	r0, [pc, #4]	; (8005628 <__sfp_lock_acquire+0x8>)
 8005622:	f000 b9fd 	b.w	8005a20 <__retarget_lock_acquire_recursive>
 8005626:	bf00      	nop
 8005628:	200032e9 	.word	0x200032e9

0800562c <__sfp_lock_release>:
 800562c:	4801      	ldr	r0, [pc, #4]	; (8005634 <__sfp_lock_release+0x8>)
 800562e:	f000 b9f8 	b.w	8005a22 <__retarget_lock_release_recursive>
 8005632:	bf00      	nop
 8005634:	200032e9 	.word	0x200032e9

08005638 <__sinit>:
 8005638:	b510      	push	{r4, lr}
 800563a:	4604      	mov	r4, r0
 800563c:	f7ff fff0 	bl	8005620 <__sfp_lock_acquire>
 8005640:	6a23      	ldr	r3, [r4, #32]
 8005642:	b11b      	cbz	r3, 800564c <__sinit+0x14>
 8005644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005648:	f7ff bff0 	b.w	800562c <__sfp_lock_release>
 800564c:	4b04      	ldr	r3, [pc, #16]	; (8005660 <__sinit+0x28>)
 800564e:	6223      	str	r3, [r4, #32]
 8005650:	4b04      	ldr	r3, [pc, #16]	; (8005664 <__sinit+0x2c>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d1f5      	bne.n	8005644 <__sinit+0xc>
 8005658:	f7ff ffc4 	bl	80055e4 <global_stdio_init.part.0>
 800565c:	e7f2      	b.n	8005644 <__sinit+0xc>
 800565e:	bf00      	nop
 8005660:	080055a5 	.word	0x080055a5
 8005664:	200032e0 	.word	0x200032e0

08005668 <_fwalk_sglue>:
 8005668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800566c:	4607      	mov	r7, r0
 800566e:	4688      	mov	r8, r1
 8005670:	4614      	mov	r4, r2
 8005672:	2600      	movs	r6, #0
 8005674:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005678:	f1b9 0901 	subs.w	r9, r9, #1
 800567c:	d505      	bpl.n	800568a <_fwalk_sglue+0x22>
 800567e:	6824      	ldr	r4, [r4, #0]
 8005680:	2c00      	cmp	r4, #0
 8005682:	d1f7      	bne.n	8005674 <_fwalk_sglue+0xc>
 8005684:	4630      	mov	r0, r6
 8005686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800568a:	89ab      	ldrh	r3, [r5, #12]
 800568c:	2b01      	cmp	r3, #1
 800568e:	d907      	bls.n	80056a0 <_fwalk_sglue+0x38>
 8005690:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005694:	3301      	adds	r3, #1
 8005696:	d003      	beq.n	80056a0 <_fwalk_sglue+0x38>
 8005698:	4629      	mov	r1, r5
 800569a:	4638      	mov	r0, r7
 800569c:	47c0      	blx	r8
 800569e:	4306      	orrs	r6, r0
 80056a0:	3568      	adds	r5, #104	; 0x68
 80056a2:	e7e9      	b.n	8005678 <_fwalk_sglue+0x10>

080056a4 <iprintf>:
 80056a4:	b40f      	push	{r0, r1, r2, r3}
 80056a6:	b507      	push	{r0, r1, r2, lr}
 80056a8:	4906      	ldr	r1, [pc, #24]	; (80056c4 <iprintf+0x20>)
 80056aa:	ab04      	add	r3, sp, #16
 80056ac:	6808      	ldr	r0, [r1, #0]
 80056ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80056b2:	6881      	ldr	r1, [r0, #8]
 80056b4:	9301      	str	r3, [sp, #4]
 80056b6:	f000 fad7 	bl	8005c68 <_vfiprintf_r>
 80056ba:	b003      	add	sp, #12
 80056bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80056c0:	b004      	add	sp, #16
 80056c2:	4770      	bx	lr
 80056c4:	20000068 	.word	0x20000068

080056c8 <_puts_r>:
 80056c8:	6a03      	ldr	r3, [r0, #32]
 80056ca:	b570      	push	{r4, r5, r6, lr}
 80056cc:	6884      	ldr	r4, [r0, #8]
 80056ce:	4605      	mov	r5, r0
 80056d0:	460e      	mov	r6, r1
 80056d2:	b90b      	cbnz	r3, 80056d8 <_puts_r+0x10>
 80056d4:	f7ff ffb0 	bl	8005638 <__sinit>
 80056d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80056da:	07db      	lsls	r3, r3, #31
 80056dc:	d405      	bmi.n	80056ea <_puts_r+0x22>
 80056de:	89a3      	ldrh	r3, [r4, #12]
 80056e0:	0598      	lsls	r0, r3, #22
 80056e2:	d402      	bmi.n	80056ea <_puts_r+0x22>
 80056e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056e6:	f000 f99b 	bl	8005a20 <__retarget_lock_acquire_recursive>
 80056ea:	89a3      	ldrh	r3, [r4, #12]
 80056ec:	0719      	lsls	r1, r3, #28
 80056ee:	d513      	bpl.n	8005718 <_puts_r+0x50>
 80056f0:	6923      	ldr	r3, [r4, #16]
 80056f2:	b18b      	cbz	r3, 8005718 <_puts_r+0x50>
 80056f4:	3e01      	subs	r6, #1
 80056f6:	68a3      	ldr	r3, [r4, #8]
 80056f8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80056fc:	3b01      	subs	r3, #1
 80056fe:	60a3      	str	r3, [r4, #8]
 8005700:	b9e9      	cbnz	r1, 800573e <_puts_r+0x76>
 8005702:	2b00      	cmp	r3, #0
 8005704:	da2e      	bge.n	8005764 <_puts_r+0x9c>
 8005706:	4622      	mov	r2, r4
 8005708:	210a      	movs	r1, #10
 800570a:	4628      	mov	r0, r5
 800570c:	f000 f87b 	bl	8005806 <__swbuf_r>
 8005710:	3001      	adds	r0, #1
 8005712:	d007      	beq.n	8005724 <_puts_r+0x5c>
 8005714:	250a      	movs	r5, #10
 8005716:	e007      	b.n	8005728 <_puts_r+0x60>
 8005718:	4621      	mov	r1, r4
 800571a:	4628      	mov	r0, r5
 800571c:	f000 f8b0 	bl	8005880 <__swsetup_r>
 8005720:	2800      	cmp	r0, #0
 8005722:	d0e7      	beq.n	80056f4 <_puts_r+0x2c>
 8005724:	f04f 35ff 	mov.w	r5, #4294967295
 8005728:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800572a:	07da      	lsls	r2, r3, #31
 800572c:	d405      	bmi.n	800573a <_puts_r+0x72>
 800572e:	89a3      	ldrh	r3, [r4, #12]
 8005730:	059b      	lsls	r3, r3, #22
 8005732:	d402      	bmi.n	800573a <_puts_r+0x72>
 8005734:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005736:	f000 f974 	bl	8005a22 <__retarget_lock_release_recursive>
 800573a:	4628      	mov	r0, r5
 800573c:	bd70      	pop	{r4, r5, r6, pc}
 800573e:	2b00      	cmp	r3, #0
 8005740:	da04      	bge.n	800574c <_puts_r+0x84>
 8005742:	69a2      	ldr	r2, [r4, #24]
 8005744:	429a      	cmp	r2, r3
 8005746:	dc06      	bgt.n	8005756 <_puts_r+0x8e>
 8005748:	290a      	cmp	r1, #10
 800574a:	d004      	beq.n	8005756 <_puts_r+0x8e>
 800574c:	6823      	ldr	r3, [r4, #0]
 800574e:	1c5a      	adds	r2, r3, #1
 8005750:	6022      	str	r2, [r4, #0]
 8005752:	7019      	strb	r1, [r3, #0]
 8005754:	e7cf      	b.n	80056f6 <_puts_r+0x2e>
 8005756:	4622      	mov	r2, r4
 8005758:	4628      	mov	r0, r5
 800575a:	f000 f854 	bl	8005806 <__swbuf_r>
 800575e:	3001      	adds	r0, #1
 8005760:	d1c9      	bne.n	80056f6 <_puts_r+0x2e>
 8005762:	e7df      	b.n	8005724 <_puts_r+0x5c>
 8005764:	6823      	ldr	r3, [r4, #0]
 8005766:	250a      	movs	r5, #10
 8005768:	1c5a      	adds	r2, r3, #1
 800576a:	6022      	str	r2, [r4, #0]
 800576c:	701d      	strb	r5, [r3, #0]
 800576e:	e7db      	b.n	8005728 <_puts_r+0x60>

08005770 <puts>:
 8005770:	4b02      	ldr	r3, [pc, #8]	; (800577c <puts+0xc>)
 8005772:	4601      	mov	r1, r0
 8005774:	6818      	ldr	r0, [r3, #0]
 8005776:	f7ff bfa7 	b.w	80056c8 <_puts_r>
 800577a:	bf00      	nop
 800577c:	20000068 	.word	0x20000068

08005780 <__sread>:
 8005780:	b510      	push	{r4, lr}
 8005782:	460c      	mov	r4, r1
 8005784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005788:	f000 f8fc 	bl	8005984 <_read_r>
 800578c:	2800      	cmp	r0, #0
 800578e:	bfab      	itete	ge
 8005790:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005792:	89a3      	ldrhlt	r3, [r4, #12]
 8005794:	181b      	addge	r3, r3, r0
 8005796:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800579a:	bfac      	ite	ge
 800579c:	6563      	strge	r3, [r4, #84]	; 0x54
 800579e:	81a3      	strhlt	r3, [r4, #12]
 80057a0:	bd10      	pop	{r4, pc}

080057a2 <__swrite>:
 80057a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057a6:	461f      	mov	r7, r3
 80057a8:	898b      	ldrh	r3, [r1, #12]
 80057aa:	05db      	lsls	r3, r3, #23
 80057ac:	4605      	mov	r5, r0
 80057ae:	460c      	mov	r4, r1
 80057b0:	4616      	mov	r6, r2
 80057b2:	d505      	bpl.n	80057c0 <__swrite+0x1e>
 80057b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057b8:	2302      	movs	r3, #2
 80057ba:	2200      	movs	r2, #0
 80057bc:	f000 f8d0 	bl	8005960 <_lseek_r>
 80057c0:	89a3      	ldrh	r3, [r4, #12]
 80057c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057ca:	81a3      	strh	r3, [r4, #12]
 80057cc:	4632      	mov	r2, r6
 80057ce:	463b      	mov	r3, r7
 80057d0:	4628      	mov	r0, r5
 80057d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057d6:	f000 b8e7 	b.w	80059a8 <_write_r>

080057da <__sseek>:
 80057da:	b510      	push	{r4, lr}
 80057dc:	460c      	mov	r4, r1
 80057de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057e2:	f000 f8bd 	bl	8005960 <_lseek_r>
 80057e6:	1c43      	adds	r3, r0, #1
 80057e8:	89a3      	ldrh	r3, [r4, #12]
 80057ea:	bf15      	itete	ne
 80057ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80057ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80057f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80057f6:	81a3      	strheq	r3, [r4, #12]
 80057f8:	bf18      	it	ne
 80057fa:	81a3      	strhne	r3, [r4, #12]
 80057fc:	bd10      	pop	{r4, pc}

080057fe <__sclose>:
 80057fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005802:	f000 b89d 	b.w	8005940 <_close_r>

08005806 <__swbuf_r>:
 8005806:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005808:	460e      	mov	r6, r1
 800580a:	4614      	mov	r4, r2
 800580c:	4605      	mov	r5, r0
 800580e:	b118      	cbz	r0, 8005818 <__swbuf_r+0x12>
 8005810:	6a03      	ldr	r3, [r0, #32]
 8005812:	b90b      	cbnz	r3, 8005818 <__swbuf_r+0x12>
 8005814:	f7ff ff10 	bl	8005638 <__sinit>
 8005818:	69a3      	ldr	r3, [r4, #24]
 800581a:	60a3      	str	r3, [r4, #8]
 800581c:	89a3      	ldrh	r3, [r4, #12]
 800581e:	071a      	lsls	r2, r3, #28
 8005820:	d525      	bpl.n	800586e <__swbuf_r+0x68>
 8005822:	6923      	ldr	r3, [r4, #16]
 8005824:	b31b      	cbz	r3, 800586e <__swbuf_r+0x68>
 8005826:	6823      	ldr	r3, [r4, #0]
 8005828:	6922      	ldr	r2, [r4, #16]
 800582a:	1a98      	subs	r0, r3, r2
 800582c:	6963      	ldr	r3, [r4, #20]
 800582e:	b2f6      	uxtb	r6, r6
 8005830:	4283      	cmp	r3, r0
 8005832:	4637      	mov	r7, r6
 8005834:	dc04      	bgt.n	8005840 <__swbuf_r+0x3a>
 8005836:	4621      	mov	r1, r4
 8005838:	4628      	mov	r0, r5
 800583a:	f000 fd45 	bl	80062c8 <_fflush_r>
 800583e:	b9e0      	cbnz	r0, 800587a <__swbuf_r+0x74>
 8005840:	68a3      	ldr	r3, [r4, #8]
 8005842:	3b01      	subs	r3, #1
 8005844:	60a3      	str	r3, [r4, #8]
 8005846:	6823      	ldr	r3, [r4, #0]
 8005848:	1c5a      	adds	r2, r3, #1
 800584a:	6022      	str	r2, [r4, #0]
 800584c:	701e      	strb	r6, [r3, #0]
 800584e:	6962      	ldr	r2, [r4, #20]
 8005850:	1c43      	adds	r3, r0, #1
 8005852:	429a      	cmp	r2, r3
 8005854:	d004      	beq.n	8005860 <__swbuf_r+0x5a>
 8005856:	89a3      	ldrh	r3, [r4, #12]
 8005858:	07db      	lsls	r3, r3, #31
 800585a:	d506      	bpl.n	800586a <__swbuf_r+0x64>
 800585c:	2e0a      	cmp	r6, #10
 800585e:	d104      	bne.n	800586a <__swbuf_r+0x64>
 8005860:	4621      	mov	r1, r4
 8005862:	4628      	mov	r0, r5
 8005864:	f000 fd30 	bl	80062c8 <_fflush_r>
 8005868:	b938      	cbnz	r0, 800587a <__swbuf_r+0x74>
 800586a:	4638      	mov	r0, r7
 800586c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800586e:	4621      	mov	r1, r4
 8005870:	4628      	mov	r0, r5
 8005872:	f000 f805 	bl	8005880 <__swsetup_r>
 8005876:	2800      	cmp	r0, #0
 8005878:	d0d5      	beq.n	8005826 <__swbuf_r+0x20>
 800587a:	f04f 37ff 	mov.w	r7, #4294967295
 800587e:	e7f4      	b.n	800586a <__swbuf_r+0x64>

08005880 <__swsetup_r>:
 8005880:	b538      	push	{r3, r4, r5, lr}
 8005882:	4b2a      	ldr	r3, [pc, #168]	; (800592c <__swsetup_r+0xac>)
 8005884:	4605      	mov	r5, r0
 8005886:	6818      	ldr	r0, [r3, #0]
 8005888:	460c      	mov	r4, r1
 800588a:	b118      	cbz	r0, 8005894 <__swsetup_r+0x14>
 800588c:	6a03      	ldr	r3, [r0, #32]
 800588e:	b90b      	cbnz	r3, 8005894 <__swsetup_r+0x14>
 8005890:	f7ff fed2 	bl	8005638 <__sinit>
 8005894:	89a3      	ldrh	r3, [r4, #12]
 8005896:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800589a:	0718      	lsls	r0, r3, #28
 800589c:	d422      	bmi.n	80058e4 <__swsetup_r+0x64>
 800589e:	06d9      	lsls	r1, r3, #27
 80058a0:	d407      	bmi.n	80058b2 <__swsetup_r+0x32>
 80058a2:	2309      	movs	r3, #9
 80058a4:	602b      	str	r3, [r5, #0]
 80058a6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80058aa:	81a3      	strh	r3, [r4, #12]
 80058ac:	f04f 30ff 	mov.w	r0, #4294967295
 80058b0:	e034      	b.n	800591c <__swsetup_r+0x9c>
 80058b2:	0758      	lsls	r0, r3, #29
 80058b4:	d512      	bpl.n	80058dc <__swsetup_r+0x5c>
 80058b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058b8:	b141      	cbz	r1, 80058cc <__swsetup_r+0x4c>
 80058ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058be:	4299      	cmp	r1, r3
 80058c0:	d002      	beq.n	80058c8 <__swsetup_r+0x48>
 80058c2:	4628      	mov	r0, r5
 80058c4:	f000 f8ae 	bl	8005a24 <_free_r>
 80058c8:	2300      	movs	r3, #0
 80058ca:	6363      	str	r3, [r4, #52]	; 0x34
 80058cc:	89a3      	ldrh	r3, [r4, #12]
 80058ce:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80058d2:	81a3      	strh	r3, [r4, #12]
 80058d4:	2300      	movs	r3, #0
 80058d6:	6063      	str	r3, [r4, #4]
 80058d8:	6923      	ldr	r3, [r4, #16]
 80058da:	6023      	str	r3, [r4, #0]
 80058dc:	89a3      	ldrh	r3, [r4, #12]
 80058de:	f043 0308 	orr.w	r3, r3, #8
 80058e2:	81a3      	strh	r3, [r4, #12]
 80058e4:	6923      	ldr	r3, [r4, #16]
 80058e6:	b94b      	cbnz	r3, 80058fc <__swsetup_r+0x7c>
 80058e8:	89a3      	ldrh	r3, [r4, #12]
 80058ea:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80058ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058f2:	d003      	beq.n	80058fc <__swsetup_r+0x7c>
 80058f4:	4621      	mov	r1, r4
 80058f6:	4628      	mov	r0, r5
 80058f8:	f000 fd34 	bl	8006364 <__smakebuf_r>
 80058fc:	89a0      	ldrh	r0, [r4, #12]
 80058fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005902:	f010 0301 	ands.w	r3, r0, #1
 8005906:	d00a      	beq.n	800591e <__swsetup_r+0x9e>
 8005908:	2300      	movs	r3, #0
 800590a:	60a3      	str	r3, [r4, #8]
 800590c:	6963      	ldr	r3, [r4, #20]
 800590e:	425b      	negs	r3, r3
 8005910:	61a3      	str	r3, [r4, #24]
 8005912:	6923      	ldr	r3, [r4, #16]
 8005914:	b943      	cbnz	r3, 8005928 <__swsetup_r+0xa8>
 8005916:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800591a:	d1c4      	bne.n	80058a6 <__swsetup_r+0x26>
 800591c:	bd38      	pop	{r3, r4, r5, pc}
 800591e:	0781      	lsls	r1, r0, #30
 8005920:	bf58      	it	pl
 8005922:	6963      	ldrpl	r3, [r4, #20]
 8005924:	60a3      	str	r3, [r4, #8]
 8005926:	e7f4      	b.n	8005912 <__swsetup_r+0x92>
 8005928:	2000      	movs	r0, #0
 800592a:	e7f7      	b.n	800591c <__swsetup_r+0x9c>
 800592c:	20000068 	.word	0x20000068

08005930 <memset>:
 8005930:	4402      	add	r2, r0
 8005932:	4603      	mov	r3, r0
 8005934:	4293      	cmp	r3, r2
 8005936:	d100      	bne.n	800593a <memset+0xa>
 8005938:	4770      	bx	lr
 800593a:	f803 1b01 	strb.w	r1, [r3], #1
 800593e:	e7f9      	b.n	8005934 <memset+0x4>

08005940 <_close_r>:
 8005940:	b538      	push	{r3, r4, r5, lr}
 8005942:	4d06      	ldr	r5, [pc, #24]	; (800595c <_close_r+0x1c>)
 8005944:	2300      	movs	r3, #0
 8005946:	4604      	mov	r4, r0
 8005948:	4608      	mov	r0, r1
 800594a:	602b      	str	r3, [r5, #0]
 800594c:	f7fc fce3 	bl	8002316 <_close>
 8005950:	1c43      	adds	r3, r0, #1
 8005952:	d102      	bne.n	800595a <_close_r+0x1a>
 8005954:	682b      	ldr	r3, [r5, #0]
 8005956:	b103      	cbz	r3, 800595a <_close_r+0x1a>
 8005958:	6023      	str	r3, [r4, #0]
 800595a:	bd38      	pop	{r3, r4, r5, pc}
 800595c:	200032e4 	.word	0x200032e4

08005960 <_lseek_r>:
 8005960:	b538      	push	{r3, r4, r5, lr}
 8005962:	4d07      	ldr	r5, [pc, #28]	; (8005980 <_lseek_r+0x20>)
 8005964:	4604      	mov	r4, r0
 8005966:	4608      	mov	r0, r1
 8005968:	4611      	mov	r1, r2
 800596a:	2200      	movs	r2, #0
 800596c:	602a      	str	r2, [r5, #0]
 800596e:	461a      	mov	r2, r3
 8005970:	f7fc fcf8 	bl	8002364 <_lseek>
 8005974:	1c43      	adds	r3, r0, #1
 8005976:	d102      	bne.n	800597e <_lseek_r+0x1e>
 8005978:	682b      	ldr	r3, [r5, #0]
 800597a:	b103      	cbz	r3, 800597e <_lseek_r+0x1e>
 800597c:	6023      	str	r3, [r4, #0]
 800597e:	bd38      	pop	{r3, r4, r5, pc}
 8005980:	200032e4 	.word	0x200032e4

08005984 <_read_r>:
 8005984:	b538      	push	{r3, r4, r5, lr}
 8005986:	4d07      	ldr	r5, [pc, #28]	; (80059a4 <_read_r+0x20>)
 8005988:	4604      	mov	r4, r0
 800598a:	4608      	mov	r0, r1
 800598c:	4611      	mov	r1, r2
 800598e:	2200      	movs	r2, #0
 8005990:	602a      	str	r2, [r5, #0]
 8005992:	461a      	mov	r2, r3
 8005994:	f7fc fc86 	bl	80022a4 <_read>
 8005998:	1c43      	adds	r3, r0, #1
 800599a:	d102      	bne.n	80059a2 <_read_r+0x1e>
 800599c:	682b      	ldr	r3, [r5, #0]
 800599e:	b103      	cbz	r3, 80059a2 <_read_r+0x1e>
 80059a0:	6023      	str	r3, [r4, #0]
 80059a2:	bd38      	pop	{r3, r4, r5, pc}
 80059a4:	200032e4 	.word	0x200032e4

080059a8 <_write_r>:
 80059a8:	b538      	push	{r3, r4, r5, lr}
 80059aa:	4d07      	ldr	r5, [pc, #28]	; (80059c8 <_write_r+0x20>)
 80059ac:	4604      	mov	r4, r0
 80059ae:	4608      	mov	r0, r1
 80059b0:	4611      	mov	r1, r2
 80059b2:	2200      	movs	r2, #0
 80059b4:	602a      	str	r2, [r5, #0]
 80059b6:	461a      	mov	r2, r3
 80059b8:	f7fc fc91 	bl	80022de <_write>
 80059bc:	1c43      	adds	r3, r0, #1
 80059be:	d102      	bne.n	80059c6 <_write_r+0x1e>
 80059c0:	682b      	ldr	r3, [r5, #0]
 80059c2:	b103      	cbz	r3, 80059c6 <_write_r+0x1e>
 80059c4:	6023      	str	r3, [r4, #0]
 80059c6:	bd38      	pop	{r3, r4, r5, pc}
 80059c8:	200032e4 	.word	0x200032e4

080059cc <__errno>:
 80059cc:	4b01      	ldr	r3, [pc, #4]	; (80059d4 <__errno+0x8>)
 80059ce:	6818      	ldr	r0, [r3, #0]
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop
 80059d4:	20000068 	.word	0x20000068

080059d8 <__libc_init_array>:
 80059d8:	b570      	push	{r4, r5, r6, lr}
 80059da:	4d0d      	ldr	r5, [pc, #52]	; (8005a10 <__libc_init_array+0x38>)
 80059dc:	4c0d      	ldr	r4, [pc, #52]	; (8005a14 <__libc_init_array+0x3c>)
 80059de:	1b64      	subs	r4, r4, r5
 80059e0:	10a4      	asrs	r4, r4, #2
 80059e2:	2600      	movs	r6, #0
 80059e4:	42a6      	cmp	r6, r4
 80059e6:	d109      	bne.n	80059fc <__libc_init_array+0x24>
 80059e8:	4d0b      	ldr	r5, [pc, #44]	; (8005a18 <__libc_init_array+0x40>)
 80059ea:	4c0c      	ldr	r4, [pc, #48]	; (8005a1c <__libc_init_array+0x44>)
 80059ec:	f000 fd28 	bl	8006440 <_init>
 80059f0:	1b64      	subs	r4, r4, r5
 80059f2:	10a4      	asrs	r4, r4, #2
 80059f4:	2600      	movs	r6, #0
 80059f6:	42a6      	cmp	r6, r4
 80059f8:	d105      	bne.n	8005a06 <__libc_init_array+0x2e>
 80059fa:	bd70      	pop	{r4, r5, r6, pc}
 80059fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a00:	4798      	blx	r3
 8005a02:	3601      	adds	r6, #1
 8005a04:	e7ee      	b.n	80059e4 <__libc_init_array+0xc>
 8005a06:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a0a:	4798      	blx	r3
 8005a0c:	3601      	adds	r6, #1
 8005a0e:	e7f2      	b.n	80059f6 <__libc_init_array+0x1e>
 8005a10:	080064cc 	.word	0x080064cc
 8005a14:	080064cc 	.word	0x080064cc
 8005a18:	080064cc 	.word	0x080064cc
 8005a1c:	080064d0 	.word	0x080064d0

08005a20 <__retarget_lock_acquire_recursive>:
 8005a20:	4770      	bx	lr

08005a22 <__retarget_lock_release_recursive>:
 8005a22:	4770      	bx	lr

08005a24 <_free_r>:
 8005a24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a26:	2900      	cmp	r1, #0
 8005a28:	d044      	beq.n	8005ab4 <_free_r+0x90>
 8005a2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a2e:	9001      	str	r0, [sp, #4]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f1a1 0404 	sub.w	r4, r1, #4
 8005a36:	bfb8      	it	lt
 8005a38:	18e4      	addlt	r4, r4, r3
 8005a3a:	f000 f8df 	bl	8005bfc <__malloc_lock>
 8005a3e:	4a1e      	ldr	r2, [pc, #120]	; (8005ab8 <_free_r+0x94>)
 8005a40:	9801      	ldr	r0, [sp, #4]
 8005a42:	6813      	ldr	r3, [r2, #0]
 8005a44:	b933      	cbnz	r3, 8005a54 <_free_r+0x30>
 8005a46:	6063      	str	r3, [r4, #4]
 8005a48:	6014      	str	r4, [r2, #0]
 8005a4a:	b003      	add	sp, #12
 8005a4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a50:	f000 b8da 	b.w	8005c08 <__malloc_unlock>
 8005a54:	42a3      	cmp	r3, r4
 8005a56:	d908      	bls.n	8005a6a <_free_r+0x46>
 8005a58:	6825      	ldr	r5, [r4, #0]
 8005a5a:	1961      	adds	r1, r4, r5
 8005a5c:	428b      	cmp	r3, r1
 8005a5e:	bf01      	itttt	eq
 8005a60:	6819      	ldreq	r1, [r3, #0]
 8005a62:	685b      	ldreq	r3, [r3, #4]
 8005a64:	1949      	addeq	r1, r1, r5
 8005a66:	6021      	streq	r1, [r4, #0]
 8005a68:	e7ed      	b.n	8005a46 <_free_r+0x22>
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	b10b      	cbz	r3, 8005a74 <_free_r+0x50>
 8005a70:	42a3      	cmp	r3, r4
 8005a72:	d9fa      	bls.n	8005a6a <_free_r+0x46>
 8005a74:	6811      	ldr	r1, [r2, #0]
 8005a76:	1855      	adds	r5, r2, r1
 8005a78:	42a5      	cmp	r5, r4
 8005a7a:	d10b      	bne.n	8005a94 <_free_r+0x70>
 8005a7c:	6824      	ldr	r4, [r4, #0]
 8005a7e:	4421      	add	r1, r4
 8005a80:	1854      	adds	r4, r2, r1
 8005a82:	42a3      	cmp	r3, r4
 8005a84:	6011      	str	r1, [r2, #0]
 8005a86:	d1e0      	bne.n	8005a4a <_free_r+0x26>
 8005a88:	681c      	ldr	r4, [r3, #0]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	6053      	str	r3, [r2, #4]
 8005a8e:	440c      	add	r4, r1
 8005a90:	6014      	str	r4, [r2, #0]
 8005a92:	e7da      	b.n	8005a4a <_free_r+0x26>
 8005a94:	d902      	bls.n	8005a9c <_free_r+0x78>
 8005a96:	230c      	movs	r3, #12
 8005a98:	6003      	str	r3, [r0, #0]
 8005a9a:	e7d6      	b.n	8005a4a <_free_r+0x26>
 8005a9c:	6825      	ldr	r5, [r4, #0]
 8005a9e:	1961      	adds	r1, r4, r5
 8005aa0:	428b      	cmp	r3, r1
 8005aa2:	bf04      	itt	eq
 8005aa4:	6819      	ldreq	r1, [r3, #0]
 8005aa6:	685b      	ldreq	r3, [r3, #4]
 8005aa8:	6063      	str	r3, [r4, #4]
 8005aaa:	bf04      	itt	eq
 8005aac:	1949      	addeq	r1, r1, r5
 8005aae:	6021      	streq	r1, [r4, #0]
 8005ab0:	6054      	str	r4, [r2, #4]
 8005ab2:	e7ca      	b.n	8005a4a <_free_r+0x26>
 8005ab4:	b003      	add	sp, #12
 8005ab6:	bd30      	pop	{r4, r5, pc}
 8005ab8:	200032ec 	.word	0x200032ec

08005abc <sbrk_aligned>:
 8005abc:	b570      	push	{r4, r5, r6, lr}
 8005abe:	4e0e      	ldr	r6, [pc, #56]	; (8005af8 <sbrk_aligned+0x3c>)
 8005ac0:	460c      	mov	r4, r1
 8005ac2:	6831      	ldr	r1, [r6, #0]
 8005ac4:	4605      	mov	r5, r0
 8005ac6:	b911      	cbnz	r1, 8005ace <sbrk_aligned+0x12>
 8005ac8:	f000 fcaa 	bl	8006420 <_sbrk_r>
 8005acc:	6030      	str	r0, [r6, #0]
 8005ace:	4621      	mov	r1, r4
 8005ad0:	4628      	mov	r0, r5
 8005ad2:	f000 fca5 	bl	8006420 <_sbrk_r>
 8005ad6:	1c43      	adds	r3, r0, #1
 8005ad8:	d00a      	beq.n	8005af0 <sbrk_aligned+0x34>
 8005ada:	1cc4      	adds	r4, r0, #3
 8005adc:	f024 0403 	bic.w	r4, r4, #3
 8005ae0:	42a0      	cmp	r0, r4
 8005ae2:	d007      	beq.n	8005af4 <sbrk_aligned+0x38>
 8005ae4:	1a21      	subs	r1, r4, r0
 8005ae6:	4628      	mov	r0, r5
 8005ae8:	f000 fc9a 	bl	8006420 <_sbrk_r>
 8005aec:	3001      	adds	r0, #1
 8005aee:	d101      	bne.n	8005af4 <sbrk_aligned+0x38>
 8005af0:	f04f 34ff 	mov.w	r4, #4294967295
 8005af4:	4620      	mov	r0, r4
 8005af6:	bd70      	pop	{r4, r5, r6, pc}
 8005af8:	200032f0 	.word	0x200032f0

08005afc <_malloc_r>:
 8005afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b00:	1ccd      	adds	r5, r1, #3
 8005b02:	f025 0503 	bic.w	r5, r5, #3
 8005b06:	3508      	adds	r5, #8
 8005b08:	2d0c      	cmp	r5, #12
 8005b0a:	bf38      	it	cc
 8005b0c:	250c      	movcc	r5, #12
 8005b0e:	2d00      	cmp	r5, #0
 8005b10:	4607      	mov	r7, r0
 8005b12:	db01      	blt.n	8005b18 <_malloc_r+0x1c>
 8005b14:	42a9      	cmp	r1, r5
 8005b16:	d905      	bls.n	8005b24 <_malloc_r+0x28>
 8005b18:	230c      	movs	r3, #12
 8005b1a:	603b      	str	r3, [r7, #0]
 8005b1c:	2600      	movs	r6, #0
 8005b1e:	4630      	mov	r0, r6
 8005b20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b24:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005bf8 <_malloc_r+0xfc>
 8005b28:	f000 f868 	bl	8005bfc <__malloc_lock>
 8005b2c:	f8d8 3000 	ldr.w	r3, [r8]
 8005b30:	461c      	mov	r4, r3
 8005b32:	bb5c      	cbnz	r4, 8005b8c <_malloc_r+0x90>
 8005b34:	4629      	mov	r1, r5
 8005b36:	4638      	mov	r0, r7
 8005b38:	f7ff ffc0 	bl	8005abc <sbrk_aligned>
 8005b3c:	1c43      	adds	r3, r0, #1
 8005b3e:	4604      	mov	r4, r0
 8005b40:	d155      	bne.n	8005bee <_malloc_r+0xf2>
 8005b42:	f8d8 4000 	ldr.w	r4, [r8]
 8005b46:	4626      	mov	r6, r4
 8005b48:	2e00      	cmp	r6, #0
 8005b4a:	d145      	bne.n	8005bd8 <_malloc_r+0xdc>
 8005b4c:	2c00      	cmp	r4, #0
 8005b4e:	d048      	beq.n	8005be2 <_malloc_r+0xe6>
 8005b50:	6823      	ldr	r3, [r4, #0]
 8005b52:	4631      	mov	r1, r6
 8005b54:	4638      	mov	r0, r7
 8005b56:	eb04 0903 	add.w	r9, r4, r3
 8005b5a:	f000 fc61 	bl	8006420 <_sbrk_r>
 8005b5e:	4581      	cmp	r9, r0
 8005b60:	d13f      	bne.n	8005be2 <_malloc_r+0xe6>
 8005b62:	6821      	ldr	r1, [r4, #0]
 8005b64:	1a6d      	subs	r5, r5, r1
 8005b66:	4629      	mov	r1, r5
 8005b68:	4638      	mov	r0, r7
 8005b6a:	f7ff ffa7 	bl	8005abc <sbrk_aligned>
 8005b6e:	3001      	adds	r0, #1
 8005b70:	d037      	beq.n	8005be2 <_malloc_r+0xe6>
 8005b72:	6823      	ldr	r3, [r4, #0]
 8005b74:	442b      	add	r3, r5
 8005b76:	6023      	str	r3, [r4, #0]
 8005b78:	f8d8 3000 	ldr.w	r3, [r8]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d038      	beq.n	8005bf2 <_malloc_r+0xf6>
 8005b80:	685a      	ldr	r2, [r3, #4]
 8005b82:	42a2      	cmp	r2, r4
 8005b84:	d12b      	bne.n	8005bde <_malloc_r+0xe2>
 8005b86:	2200      	movs	r2, #0
 8005b88:	605a      	str	r2, [r3, #4]
 8005b8a:	e00f      	b.n	8005bac <_malloc_r+0xb0>
 8005b8c:	6822      	ldr	r2, [r4, #0]
 8005b8e:	1b52      	subs	r2, r2, r5
 8005b90:	d41f      	bmi.n	8005bd2 <_malloc_r+0xd6>
 8005b92:	2a0b      	cmp	r2, #11
 8005b94:	d917      	bls.n	8005bc6 <_malloc_r+0xca>
 8005b96:	1961      	adds	r1, r4, r5
 8005b98:	42a3      	cmp	r3, r4
 8005b9a:	6025      	str	r5, [r4, #0]
 8005b9c:	bf18      	it	ne
 8005b9e:	6059      	strne	r1, [r3, #4]
 8005ba0:	6863      	ldr	r3, [r4, #4]
 8005ba2:	bf08      	it	eq
 8005ba4:	f8c8 1000 	streq.w	r1, [r8]
 8005ba8:	5162      	str	r2, [r4, r5]
 8005baa:	604b      	str	r3, [r1, #4]
 8005bac:	4638      	mov	r0, r7
 8005bae:	f104 060b 	add.w	r6, r4, #11
 8005bb2:	f000 f829 	bl	8005c08 <__malloc_unlock>
 8005bb6:	f026 0607 	bic.w	r6, r6, #7
 8005bba:	1d23      	adds	r3, r4, #4
 8005bbc:	1af2      	subs	r2, r6, r3
 8005bbe:	d0ae      	beq.n	8005b1e <_malloc_r+0x22>
 8005bc0:	1b9b      	subs	r3, r3, r6
 8005bc2:	50a3      	str	r3, [r4, r2]
 8005bc4:	e7ab      	b.n	8005b1e <_malloc_r+0x22>
 8005bc6:	42a3      	cmp	r3, r4
 8005bc8:	6862      	ldr	r2, [r4, #4]
 8005bca:	d1dd      	bne.n	8005b88 <_malloc_r+0x8c>
 8005bcc:	f8c8 2000 	str.w	r2, [r8]
 8005bd0:	e7ec      	b.n	8005bac <_malloc_r+0xb0>
 8005bd2:	4623      	mov	r3, r4
 8005bd4:	6864      	ldr	r4, [r4, #4]
 8005bd6:	e7ac      	b.n	8005b32 <_malloc_r+0x36>
 8005bd8:	4634      	mov	r4, r6
 8005bda:	6876      	ldr	r6, [r6, #4]
 8005bdc:	e7b4      	b.n	8005b48 <_malloc_r+0x4c>
 8005bde:	4613      	mov	r3, r2
 8005be0:	e7cc      	b.n	8005b7c <_malloc_r+0x80>
 8005be2:	230c      	movs	r3, #12
 8005be4:	603b      	str	r3, [r7, #0]
 8005be6:	4638      	mov	r0, r7
 8005be8:	f000 f80e 	bl	8005c08 <__malloc_unlock>
 8005bec:	e797      	b.n	8005b1e <_malloc_r+0x22>
 8005bee:	6025      	str	r5, [r4, #0]
 8005bf0:	e7dc      	b.n	8005bac <_malloc_r+0xb0>
 8005bf2:	605b      	str	r3, [r3, #4]
 8005bf4:	deff      	udf	#255	; 0xff
 8005bf6:	bf00      	nop
 8005bf8:	200032ec 	.word	0x200032ec

08005bfc <__malloc_lock>:
 8005bfc:	4801      	ldr	r0, [pc, #4]	; (8005c04 <__malloc_lock+0x8>)
 8005bfe:	f7ff bf0f 	b.w	8005a20 <__retarget_lock_acquire_recursive>
 8005c02:	bf00      	nop
 8005c04:	200032e8 	.word	0x200032e8

08005c08 <__malloc_unlock>:
 8005c08:	4801      	ldr	r0, [pc, #4]	; (8005c10 <__malloc_unlock+0x8>)
 8005c0a:	f7ff bf0a 	b.w	8005a22 <__retarget_lock_release_recursive>
 8005c0e:	bf00      	nop
 8005c10:	200032e8 	.word	0x200032e8

08005c14 <__sfputc_r>:
 8005c14:	6893      	ldr	r3, [r2, #8]
 8005c16:	3b01      	subs	r3, #1
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	b410      	push	{r4}
 8005c1c:	6093      	str	r3, [r2, #8]
 8005c1e:	da08      	bge.n	8005c32 <__sfputc_r+0x1e>
 8005c20:	6994      	ldr	r4, [r2, #24]
 8005c22:	42a3      	cmp	r3, r4
 8005c24:	db01      	blt.n	8005c2a <__sfputc_r+0x16>
 8005c26:	290a      	cmp	r1, #10
 8005c28:	d103      	bne.n	8005c32 <__sfputc_r+0x1e>
 8005c2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c2e:	f7ff bdea 	b.w	8005806 <__swbuf_r>
 8005c32:	6813      	ldr	r3, [r2, #0]
 8005c34:	1c58      	adds	r0, r3, #1
 8005c36:	6010      	str	r0, [r2, #0]
 8005c38:	7019      	strb	r1, [r3, #0]
 8005c3a:	4608      	mov	r0, r1
 8005c3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c40:	4770      	bx	lr

08005c42 <__sfputs_r>:
 8005c42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c44:	4606      	mov	r6, r0
 8005c46:	460f      	mov	r7, r1
 8005c48:	4614      	mov	r4, r2
 8005c4a:	18d5      	adds	r5, r2, r3
 8005c4c:	42ac      	cmp	r4, r5
 8005c4e:	d101      	bne.n	8005c54 <__sfputs_r+0x12>
 8005c50:	2000      	movs	r0, #0
 8005c52:	e007      	b.n	8005c64 <__sfputs_r+0x22>
 8005c54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c58:	463a      	mov	r2, r7
 8005c5a:	4630      	mov	r0, r6
 8005c5c:	f7ff ffda 	bl	8005c14 <__sfputc_r>
 8005c60:	1c43      	adds	r3, r0, #1
 8005c62:	d1f3      	bne.n	8005c4c <__sfputs_r+0xa>
 8005c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005c68 <_vfiprintf_r>:
 8005c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c6c:	460d      	mov	r5, r1
 8005c6e:	b09d      	sub	sp, #116	; 0x74
 8005c70:	4614      	mov	r4, r2
 8005c72:	4698      	mov	r8, r3
 8005c74:	4606      	mov	r6, r0
 8005c76:	b118      	cbz	r0, 8005c80 <_vfiprintf_r+0x18>
 8005c78:	6a03      	ldr	r3, [r0, #32]
 8005c7a:	b90b      	cbnz	r3, 8005c80 <_vfiprintf_r+0x18>
 8005c7c:	f7ff fcdc 	bl	8005638 <__sinit>
 8005c80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c82:	07d9      	lsls	r1, r3, #31
 8005c84:	d405      	bmi.n	8005c92 <_vfiprintf_r+0x2a>
 8005c86:	89ab      	ldrh	r3, [r5, #12]
 8005c88:	059a      	lsls	r2, r3, #22
 8005c8a:	d402      	bmi.n	8005c92 <_vfiprintf_r+0x2a>
 8005c8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c8e:	f7ff fec7 	bl	8005a20 <__retarget_lock_acquire_recursive>
 8005c92:	89ab      	ldrh	r3, [r5, #12]
 8005c94:	071b      	lsls	r3, r3, #28
 8005c96:	d501      	bpl.n	8005c9c <_vfiprintf_r+0x34>
 8005c98:	692b      	ldr	r3, [r5, #16]
 8005c9a:	b99b      	cbnz	r3, 8005cc4 <_vfiprintf_r+0x5c>
 8005c9c:	4629      	mov	r1, r5
 8005c9e:	4630      	mov	r0, r6
 8005ca0:	f7ff fdee 	bl	8005880 <__swsetup_r>
 8005ca4:	b170      	cbz	r0, 8005cc4 <_vfiprintf_r+0x5c>
 8005ca6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ca8:	07dc      	lsls	r4, r3, #31
 8005caa:	d504      	bpl.n	8005cb6 <_vfiprintf_r+0x4e>
 8005cac:	f04f 30ff 	mov.w	r0, #4294967295
 8005cb0:	b01d      	add	sp, #116	; 0x74
 8005cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cb6:	89ab      	ldrh	r3, [r5, #12]
 8005cb8:	0598      	lsls	r0, r3, #22
 8005cba:	d4f7      	bmi.n	8005cac <_vfiprintf_r+0x44>
 8005cbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005cbe:	f7ff feb0 	bl	8005a22 <__retarget_lock_release_recursive>
 8005cc2:	e7f3      	b.n	8005cac <_vfiprintf_r+0x44>
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	9309      	str	r3, [sp, #36]	; 0x24
 8005cc8:	2320      	movs	r3, #32
 8005cca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005cce:	f8cd 800c 	str.w	r8, [sp, #12]
 8005cd2:	2330      	movs	r3, #48	; 0x30
 8005cd4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005e88 <_vfiprintf_r+0x220>
 8005cd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005cdc:	f04f 0901 	mov.w	r9, #1
 8005ce0:	4623      	mov	r3, r4
 8005ce2:	469a      	mov	sl, r3
 8005ce4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ce8:	b10a      	cbz	r2, 8005cee <_vfiprintf_r+0x86>
 8005cea:	2a25      	cmp	r2, #37	; 0x25
 8005cec:	d1f9      	bne.n	8005ce2 <_vfiprintf_r+0x7a>
 8005cee:	ebba 0b04 	subs.w	fp, sl, r4
 8005cf2:	d00b      	beq.n	8005d0c <_vfiprintf_r+0xa4>
 8005cf4:	465b      	mov	r3, fp
 8005cf6:	4622      	mov	r2, r4
 8005cf8:	4629      	mov	r1, r5
 8005cfa:	4630      	mov	r0, r6
 8005cfc:	f7ff ffa1 	bl	8005c42 <__sfputs_r>
 8005d00:	3001      	adds	r0, #1
 8005d02:	f000 80a9 	beq.w	8005e58 <_vfiprintf_r+0x1f0>
 8005d06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d08:	445a      	add	r2, fp
 8005d0a:	9209      	str	r2, [sp, #36]	; 0x24
 8005d0c:	f89a 3000 	ldrb.w	r3, [sl]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	f000 80a1 	beq.w	8005e58 <_vfiprintf_r+0x1f0>
 8005d16:	2300      	movs	r3, #0
 8005d18:	f04f 32ff 	mov.w	r2, #4294967295
 8005d1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d20:	f10a 0a01 	add.w	sl, sl, #1
 8005d24:	9304      	str	r3, [sp, #16]
 8005d26:	9307      	str	r3, [sp, #28]
 8005d28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d2c:	931a      	str	r3, [sp, #104]	; 0x68
 8005d2e:	4654      	mov	r4, sl
 8005d30:	2205      	movs	r2, #5
 8005d32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d36:	4854      	ldr	r0, [pc, #336]	; (8005e88 <_vfiprintf_r+0x220>)
 8005d38:	f7fa fa4a 	bl	80001d0 <memchr>
 8005d3c:	9a04      	ldr	r2, [sp, #16]
 8005d3e:	b9d8      	cbnz	r0, 8005d78 <_vfiprintf_r+0x110>
 8005d40:	06d1      	lsls	r1, r2, #27
 8005d42:	bf44      	itt	mi
 8005d44:	2320      	movmi	r3, #32
 8005d46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d4a:	0713      	lsls	r3, r2, #28
 8005d4c:	bf44      	itt	mi
 8005d4e:	232b      	movmi	r3, #43	; 0x2b
 8005d50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d54:	f89a 3000 	ldrb.w	r3, [sl]
 8005d58:	2b2a      	cmp	r3, #42	; 0x2a
 8005d5a:	d015      	beq.n	8005d88 <_vfiprintf_r+0x120>
 8005d5c:	9a07      	ldr	r2, [sp, #28]
 8005d5e:	4654      	mov	r4, sl
 8005d60:	2000      	movs	r0, #0
 8005d62:	f04f 0c0a 	mov.w	ip, #10
 8005d66:	4621      	mov	r1, r4
 8005d68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d6c:	3b30      	subs	r3, #48	; 0x30
 8005d6e:	2b09      	cmp	r3, #9
 8005d70:	d94d      	bls.n	8005e0e <_vfiprintf_r+0x1a6>
 8005d72:	b1b0      	cbz	r0, 8005da2 <_vfiprintf_r+0x13a>
 8005d74:	9207      	str	r2, [sp, #28]
 8005d76:	e014      	b.n	8005da2 <_vfiprintf_r+0x13a>
 8005d78:	eba0 0308 	sub.w	r3, r0, r8
 8005d7c:	fa09 f303 	lsl.w	r3, r9, r3
 8005d80:	4313      	orrs	r3, r2
 8005d82:	9304      	str	r3, [sp, #16]
 8005d84:	46a2      	mov	sl, r4
 8005d86:	e7d2      	b.n	8005d2e <_vfiprintf_r+0xc6>
 8005d88:	9b03      	ldr	r3, [sp, #12]
 8005d8a:	1d19      	adds	r1, r3, #4
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	9103      	str	r1, [sp, #12]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	bfbb      	ittet	lt
 8005d94:	425b      	neglt	r3, r3
 8005d96:	f042 0202 	orrlt.w	r2, r2, #2
 8005d9a:	9307      	strge	r3, [sp, #28]
 8005d9c:	9307      	strlt	r3, [sp, #28]
 8005d9e:	bfb8      	it	lt
 8005da0:	9204      	strlt	r2, [sp, #16]
 8005da2:	7823      	ldrb	r3, [r4, #0]
 8005da4:	2b2e      	cmp	r3, #46	; 0x2e
 8005da6:	d10c      	bne.n	8005dc2 <_vfiprintf_r+0x15a>
 8005da8:	7863      	ldrb	r3, [r4, #1]
 8005daa:	2b2a      	cmp	r3, #42	; 0x2a
 8005dac:	d134      	bne.n	8005e18 <_vfiprintf_r+0x1b0>
 8005dae:	9b03      	ldr	r3, [sp, #12]
 8005db0:	1d1a      	adds	r2, r3, #4
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	9203      	str	r2, [sp, #12]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	bfb8      	it	lt
 8005dba:	f04f 33ff 	movlt.w	r3, #4294967295
 8005dbe:	3402      	adds	r4, #2
 8005dc0:	9305      	str	r3, [sp, #20]
 8005dc2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005e98 <_vfiprintf_r+0x230>
 8005dc6:	7821      	ldrb	r1, [r4, #0]
 8005dc8:	2203      	movs	r2, #3
 8005dca:	4650      	mov	r0, sl
 8005dcc:	f7fa fa00 	bl	80001d0 <memchr>
 8005dd0:	b138      	cbz	r0, 8005de2 <_vfiprintf_r+0x17a>
 8005dd2:	9b04      	ldr	r3, [sp, #16]
 8005dd4:	eba0 000a 	sub.w	r0, r0, sl
 8005dd8:	2240      	movs	r2, #64	; 0x40
 8005dda:	4082      	lsls	r2, r0
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	3401      	adds	r4, #1
 8005de0:	9304      	str	r3, [sp, #16]
 8005de2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005de6:	4829      	ldr	r0, [pc, #164]	; (8005e8c <_vfiprintf_r+0x224>)
 8005de8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005dec:	2206      	movs	r2, #6
 8005dee:	f7fa f9ef 	bl	80001d0 <memchr>
 8005df2:	2800      	cmp	r0, #0
 8005df4:	d03f      	beq.n	8005e76 <_vfiprintf_r+0x20e>
 8005df6:	4b26      	ldr	r3, [pc, #152]	; (8005e90 <_vfiprintf_r+0x228>)
 8005df8:	bb1b      	cbnz	r3, 8005e42 <_vfiprintf_r+0x1da>
 8005dfa:	9b03      	ldr	r3, [sp, #12]
 8005dfc:	3307      	adds	r3, #7
 8005dfe:	f023 0307 	bic.w	r3, r3, #7
 8005e02:	3308      	adds	r3, #8
 8005e04:	9303      	str	r3, [sp, #12]
 8005e06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e08:	443b      	add	r3, r7
 8005e0a:	9309      	str	r3, [sp, #36]	; 0x24
 8005e0c:	e768      	b.n	8005ce0 <_vfiprintf_r+0x78>
 8005e0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e12:	460c      	mov	r4, r1
 8005e14:	2001      	movs	r0, #1
 8005e16:	e7a6      	b.n	8005d66 <_vfiprintf_r+0xfe>
 8005e18:	2300      	movs	r3, #0
 8005e1a:	3401      	adds	r4, #1
 8005e1c:	9305      	str	r3, [sp, #20]
 8005e1e:	4619      	mov	r1, r3
 8005e20:	f04f 0c0a 	mov.w	ip, #10
 8005e24:	4620      	mov	r0, r4
 8005e26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e2a:	3a30      	subs	r2, #48	; 0x30
 8005e2c:	2a09      	cmp	r2, #9
 8005e2e:	d903      	bls.n	8005e38 <_vfiprintf_r+0x1d0>
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d0c6      	beq.n	8005dc2 <_vfiprintf_r+0x15a>
 8005e34:	9105      	str	r1, [sp, #20]
 8005e36:	e7c4      	b.n	8005dc2 <_vfiprintf_r+0x15a>
 8005e38:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e3c:	4604      	mov	r4, r0
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e7f0      	b.n	8005e24 <_vfiprintf_r+0x1bc>
 8005e42:	ab03      	add	r3, sp, #12
 8005e44:	9300      	str	r3, [sp, #0]
 8005e46:	462a      	mov	r2, r5
 8005e48:	4b12      	ldr	r3, [pc, #72]	; (8005e94 <_vfiprintf_r+0x22c>)
 8005e4a:	a904      	add	r1, sp, #16
 8005e4c:	4630      	mov	r0, r6
 8005e4e:	f3af 8000 	nop.w
 8005e52:	4607      	mov	r7, r0
 8005e54:	1c78      	adds	r0, r7, #1
 8005e56:	d1d6      	bne.n	8005e06 <_vfiprintf_r+0x19e>
 8005e58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e5a:	07d9      	lsls	r1, r3, #31
 8005e5c:	d405      	bmi.n	8005e6a <_vfiprintf_r+0x202>
 8005e5e:	89ab      	ldrh	r3, [r5, #12]
 8005e60:	059a      	lsls	r2, r3, #22
 8005e62:	d402      	bmi.n	8005e6a <_vfiprintf_r+0x202>
 8005e64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e66:	f7ff fddc 	bl	8005a22 <__retarget_lock_release_recursive>
 8005e6a:	89ab      	ldrh	r3, [r5, #12]
 8005e6c:	065b      	lsls	r3, r3, #25
 8005e6e:	f53f af1d 	bmi.w	8005cac <_vfiprintf_r+0x44>
 8005e72:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e74:	e71c      	b.n	8005cb0 <_vfiprintf_r+0x48>
 8005e76:	ab03      	add	r3, sp, #12
 8005e78:	9300      	str	r3, [sp, #0]
 8005e7a:	462a      	mov	r2, r5
 8005e7c:	4b05      	ldr	r3, [pc, #20]	; (8005e94 <_vfiprintf_r+0x22c>)
 8005e7e:	a904      	add	r1, sp, #16
 8005e80:	4630      	mov	r0, r6
 8005e82:	f000 f879 	bl	8005f78 <_printf_i>
 8005e86:	e7e4      	b.n	8005e52 <_vfiprintf_r+0x1ea>
 8005e88:	08006490 	.word	0x08006490
 8005e8c:	0800649a 	.word	0x0800649a
 8005e90:	00000000 	.word	0x00000000
 8005e94:	08005c43 	.word	0x08005c43
 8005e98:	08006496 	.word	0x08006496

08005e9c <_printf_common>:
 8005e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ea0:	4616      	mov	r6, r2
 8005ea2:	4699      	mov	r9, r3
 8005ea4:	688a      	ldr	r2, [r1, #8]
 8005ea6:	690b      	ldr	r3, [r1, #16]
 8005ea8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005eac:	4293      	cmp	r3, r2
 8005eae:	bfb8      	it	lt
 8005eb0:	4613      	movlt	r3, r2
 8005eb2:	6033      	str	r3, [r6, #0]
 8005eb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005eb8:	4607      	mov	r7, r0
 8005eba:	460c      	mov	r4, r1
 8005ebc:	b10a      	cbz	r2, 8005ec2 <_printf_common+0x26>
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	6033      	str	r3, [r6, #0]
 8005ec2:	6823      	ldr	r3, [r4, #0]
 8005ec4:	0699      	lsls	r1, r3, #26
 8005ec6:	bf42      	ittt	mi
 8005ec8:	6833      	ldrmi	r3, [r6, #0]
 8005eca:	3302      	addmi	r3, #2
 8005ecc:	6033      	strmi	r3, [r6, #0]
 8005ece:	6825      	ldr	r5, [r4, #0]
 8005ed0:	f015 0506 	ands.w	r5, r5, #6
 8005ed4:	d106      	bne.n	8005ee4 <_printf_common+0x48>
 8005ed6:	f104 0a19 	add.w	sl, r4, #25
 8005eda:	68e3      	ldr	r3, [r4, #12]
 8005edc:	6832      	ldr	r2, [r6, #0]
 8005ede:	1a9b      	subs	r3, r3, r2
 8005ee0:	42ab      	cmp	r3, r5
 8005ee2:	dc26      	bgt.n	8005f32 <_printf_common+0x96>
 8005ee4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ee8:	1e13      	subs	r3, r2, #0
 8005eea:	6822      	ldr	r2, [r4, #0]
 8005eec:	bf18      	it	ne
 8005eee:	2301      	movne	r3, #1
 8005ef0:	0692      	lsls	r2, r2, #26
 8005ef2:	d42b      	bmi.n	8005f4c <_printf_common+0xb0>
 8005ef4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ef8:	4649      	mov	r1, r9
 8005efa:	4638      	mov	r0, r7
 8005efc:	47c0      	blx	r8
 8005efe:	3001      	adds	r0, #1
 8005f00:	d01e      	beq.n	8005f40 <_printf_common+0xa4>
 8005f02:	6823      	ldr	r3, [r4, #0]
 8005f04:	6922      	ldr	r2, [r4, #16]
 8005f06:	f003 0306 	and.w	r3, r3, #6
 8005f0a:	2b04      	cmp	r3, #4
 8005f0c:	bf02      	ittt	eq
 8005f0e:	68e5      	ldreq	r5, [r4, #12]
 8005f10:	6833      	ldreq	r3, [r6, #0]
 8005f12:	1aed      	subeq	r5, r5, r3
 8005f14:	68a3      	ldr	r3, [r4, #8]
 8005f16:	bf0c      	ite	eq
 8005f18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f1c:	2500      	movne	r5, #0
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	bfc4      	itt	gt
 8005f22:	1a9b      	subgt	r3, r3, r2
 8005f24:	18ed      	addgt	r5, r5, r3
 8005f26:	2600      	movs	r6, #0
 8005f28:	341a      	adds	r4, #26
 8005f2a:	42b5      	cmp	r5, r6
 8005f2c:	d11a      	bne.n	8005f64 <_printf_common+0xc8>
 8005f2e:	2000      	movs	r0, #0
 8005f30:	e008      	b.n	8005f44 <_printf_common+0xa8>
 8005f32:	2301      	movs	r3, #1
 8005f34:	4652      	mov	r2, sl
 8005f36:	4649      	mov	r1, r9
 8005f38:	4638      	mov	r0, r7
 8005f3a:	47c0      	blx	r8
 8005f3c:	3001      	adds	r0, #1
 8005f3e:	d103      	bne.n	8005f48 <_printf_common+0xac>
 8005f40:	f04f 30ff 	mov.w	r0, #4294967295
 8005f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f48:	3501      	adds	r5, #1
 8005f4a:	e7c6      	b.n	8005eda <_printf_common+0x3e>
 8005f4c:	18e1      	adds	r1, r4, r3
 8005f4e:	1c5a      	adds	r2, r3, #1
 8005f50:	2030      	movs	r0, #48	; 0x30
 8005f52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f56:	4422      	add	r2, r4
 8005f58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f60:	3302      	adds	r3, #2
 8005f62:	e7c7      	b.n	8005ef4 <_printf_common+0x58>
 8005f64:	2301      	movs	r3, #1
 8005f66:	4622      	mov	r2, r4
 8005f68:	4649      	mov	r1, r9
 8005f6a:	4638      	mov	r0, r7
 8005f6c:	47c0      	blx	r8
 8005f6e:	3001      	adds	r0, #1
 8005f70:	d0e6      	beq.n	8005f40 <_printf_common+0xa4>
 8005f72:	3601      	adds	r6, #1
 8005f74:	e7d9      	b.n	8005f2a <_printf_common+0x8e>
	...

08005f78 <_printf_i>:
 8005f78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f7c:	7e0f      	ldrb	r7, [r1, #24]
 8005f7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005f80:	2f78      	cmp	r7, #120	; 0x78
 8005f82:	4691      	mov	r9, r2
 8005f84:	4680      	mov	r8, r0
 8005f86:	460c      	mov	r4, r1
 8005f88:	469a      	mov	sl, r3
 8005f8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005f8e:	d807      	bhi.n	8005fa0 <_printf_i+0x28>
 8005f90:	2f62      	cmp	r7, #98	; 0x62
 8005f92:	d80a      	bhi.n	8005faa <_printf_i+0x32>
 8005f94:	2f00      	cmp	r7, #0
 8005f96:	f000 80d4 	beq.w	8006142 <_printf_i+0x1ca>
 8005f9a:	2f58      	cmp	r7, #88	; 0x58
 8005f9c:	f000 80c0 	beq.w	8006120 <_printf_i+0x1a8>
 8005fa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fa4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005fa8:	e03a      	b.n	8006020 <_printf_i+0xa8>
 8005faa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005fae:	2b15      	cmp	r3, #21
 8005fb0:	d8f6      	bhi.n	8005fa0 <_printf_i+0x28>
 8005fb2:	a101      	add	r1, pc, #4	; (adr r1, 8005fb8 <_printf_i+0x40>)
 8005fb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005fb8:	08006011 	.word	0x08006011
 8005fbc:	08006025 	.word	0x08006025
 8005fc0:	08005fa1 	.word	0x08005fa1
 8005fc4:	08005fa1 	.word	0x08005fa1
 8005fc8:	08005fa1 	.word	0x08005fa1
 8005fcc:	08005fa1 	.word	0x08005fa1
 8005fd0:	08006025 	.word	0x08006025
 8005fd4:	08005fa1 	.word	0x08005fa1
 8005fd8:	08005fa1 	.word	0x08005fa1
 8005fdc:	08005fa1 	.word	0x08005fa1
 8005fe0:	08005fa1 	.word	0x08005fa1
 8005fe4:	08006129 	.word	0x08006129
 8005fe8:	08006051 	.word	0x08006051
 8005fec:	080060e3 	.word	0x080060e3
 8005ff0:	08005fa1 	.word	0x08005fa1
 8005ff4:	08005fa1 	.word	0x08005fa1
 8005ff8:	0800614b 	.word	0x0800614b
 8005ffc:	08005fa1 	.word	0x08005fa1
 8006000:	08006051 	.word	0x08006051
 8006004:	08005fa1 	.word	0x08005fa1
 8006008:	08005fa1 	.word	0x08005fa1
 800600c:	080060eb 	.word	0x080060eb
 8006010:	682b      	ldr	r3, [r5, #0]
 8006012:	1d1a      	adds	r2, r3, #4
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	602a      	str	r2, [r5, #0]
 8006018:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800601c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006020:	2301      	movs	r3, #1
 8006022:	e09f      	b.n	8006164 <_printf_i+0x1ec>
 8006024:	6820      	ldr	r0, [r4, #0]
 8006026:	682b      	ldr	r3, [r5, #0]
 8006028:	0607      	lsls	r7, r0, #24
 800602a:	f103 0104 	add.w	r1, r3, #4
 800602e:	6029      	str	r1, [r5, #0]
 8006030:	d501      	bpl.n	8006036 <_printf_i+0xbe>
 8006032:	681e      	ldr	r6, [r3, #0]
 8006034:	e003      	b.n	800603e <_printf_i+0xc6>
 8006036:	0646      	lsls	r6, r0, #25
 8006038:	d5fb      	bpl.n	8006032 <_printf_i+0xba>
 800603a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800603e:	2e00      	cmp	r6, #0
 8006040:	da03      	bge.n	800604a <_printf_i+0xd2>
 8006042:	232d      	movs	r3, #45	; 0x2d
 8006044:	4276      	negs	r6, r6
 8006046:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800604a:	485a      	ldr	r0, [pc, #360]	; (80061b4 <_printf_i+0x23c>)
 800604c:	230a      	movs	r3, #10
 800604e:	e012      	b.n	8006076 <_printf_i+0xfe>
 8006050:	682b      	ldr	r3, [r5, #0]
 8006052:	6820      	ldr	r0, [r4, #0]
 8006054:	1d19      	adds	r1, r3, #4
 8006056:	6029      	str	r1, [r5, #0]
 8006058:	0605      	lsls	r5, r0, #24
 800605a:	d501      	bpl.n	8006060 <_printf_i+0xe8>
 800605c:	681e      	ldr	r6, [r3, #0]
 800605e:	e002      	b.n	8006066 <_printf_i+0xee>
 8006060:	0641      	lsls	r1, r0, #25
 8006062:	d5fb      	bpl.n	800605c <_printf_i+0xe4>
 8006064:	881e      	ldrh	r6, [r3, #0]
 8006066:	4853      	ldr	r0, [pc, #332]	; (80061b4 <_printf_i+0x23c>)
 8006068:	2f6f      	cmp	r7, #111	; 0x6f
 800606a:	bf0c      	ite	eq
 800606c:	2308      	moveq	r3, #8
 800606e:	230a      	movne	r3, #10
 8006070:	2100      	movs	r1, #0
 8006072:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006076:	6865      	ldr	r5, [r4, #4]
 8006078:	60a5      	str	r5, [r4, #8]
 800607a:	2d00      	cmp	r5, #0
 800607c:	bfa2      	ittt	ge
 800607e:	6821      	ldrge	r1, [r4, #0]
 8006080:	f021 0104 	bicge.w	r1, r1, #4
 8006084:	6021      	strge	r1, [r4, #0]
 8006086:	b90e      	cbnz	r6, 800608c <_printf_i+0x114>
 8006088:	2d00      	cmp	r5, #0
 800608a:	d04b      	beq.n	8006124 <_printf_i+0x1ac>
 800608c:	4615      	mov	r5, r2
 800608e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006092:	fb03 6711 	mls	r7, r3, r1, r6
 8006096:	5dc7      	ldrb	r7, [r0, r7]
 8006098:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800609c:	4637      	mov	r7, r6
 800609e:	42bb      	cmp	r3, r7
 80060a0:	460e      	mov	r6, r1
 80060a2:	d9f4      	bls.n	800608e <_printf_i+0x116>
 80060a4:	2b08      	cmp	r3, #8
 80060a6:	d10b      	bne.n	80060c0 <_printf_i+0x148>
 80060a8:	6823      	ldr	r3, [r4, #0]
 80060aa:	07de      	lsls	r6, r3, #31
 80060ac:	d508      	bpl.n	80060c0 <_printf_i+0x148>
 80060ae:	6923      	ldr	r3, [r4, #16]
 80060b0:	6861      	ldr	r1, [r4, #4]
 80060b2:	4299      	cmp	r1, r3
 80060b4:	bfde      	ittt	le
 80060b6:	2330      	movle	r3, #48	; 0x30
 80060b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80060bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80060c0:	1b52      	subs	r2, r2, r5
 80060c2:	6122      	str	r2, [r4, #16]
 80060c4:	f8cd a000 	str.w	sl, [sp]
 80060c8:	464b      	mov	r3, r9
 80060ca:	aa03      	add	r2, sp, #12
 80060cc:	4621      	mov	r1, r4
 80060ce:	4640      	mov	r0, r8
 80060d0:	f7ff fee4 	bl	8005e9c <_printf_common>
 80060d4:	3001      	adds	r0, #1
 80060d6:	d14a      	bne.n	800616e <_printf_i+0x1f6>
 80060d8:	f04f 30ff 	mov.w	r0, #4294967295
 80060dc:	b004      	add	sp, #16
 80060de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060e2:	6823      	ldr	r3, [r4, #0]
 80060e4:	f043 0320 	orr.w	r3, r3, #32
 80060e8:	6023      	str	r3, [r4, #0]
 80060ea:	4833      	ldr	r0, [pc, #204]	; (80061b8 <_printf_i+0x240>)
 80060ec:	2778      	movs	r7, #120	; 0x78
 80060ee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80060f2:	6823      	ldr	r3, [r4, #0]
 80060f4:	6829      	ldr	r1, [r5, #0]
 80060f6:	061f      	lsls	r7, r3, #24
 80060f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80060fc:	d402      	bmi.n	8006104 <_printf_i+0x18c>
 80060fe:	065f      	lsls	r7, r3, #25
 8006100:	bf48      	it	mi
 8006102:	b2b6      	uxthmi	r6, r6
 8006104:	07df      	lsls	r7, r3, #31
 8006106:	bf48      	it	mi
 8006108:	f043 0320 	orrmi.w	r3, r3, #32
 800610c:	6029      	str	r1, [r5, #0]
 800610e:	bf48      	it	mi
 8006110:	6023      	strmi	r3, [r4, #0]
 8006112:	b91e      	cbnz	r6, 800611c <_printf_i+0x1a4>
 8006114:	6823      	ldr	r3, [r4, #0]
 8006116:	f023 0320 	bic.w	r3, r3, #32
 800611a:	6023      	str	r3, [r4, #0]
 800611c:	2310      	movs	r3, #16
 800611e:	e7a7      	b.n	8006070 <_printf_i+0xf8>
 8006120:	4824      	ldr	r0, [pc, #144]	; (80061b4 <_printf_i+0x23c>)
 8006122:	e7e4      	b.n	80060ee <_printf_i+0x176>
 8006124:	4615      	mov	r5, r2
 8006126:	e7bd      	b.n	80060a4 <_printf_i+0x12c>
 8006128:	682b      	ldr	r3, [r5, #0]
 800612a:	6826      	ldr	r6, [r4, #0]
 800612c:	6961      	ldr	r1, [r4, #20]
 800612e:	1d18      	adds	r0, r3, #4
 8006130:	6028      	str	r0, [r5, #0]
 8006132:	0635      	lsls	r5, r6, #24
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	d501      	bpl.n	800613c <_printf_i+0x1c4>
 8006138:	6019      	str	r1, [r3, #0]
 800613a:	e002      	b.n	8006142 <_printf_i+0x1ca>
 800613c:	0670      	lsls	r0, r6, #25
 800613e:	d5fb      	bpl.n	8006138 <_printf_i+0x1c0>
 8006140:	8019      	strh	r1, [r3, #0]
 8006142:	2300      	movs	r3, #0
 8006144:	6123      	str	r3, [r4, #16]
 8006146:	4615      	mov	r5, r2
 8006148:	e7bc      	b.n	80060c4 <_printf_i+0x14c>
 800614a:	682b      	ldr	r3, [r5, #0]
 800614c:	1d1a      	adds	r2, r3, #4
 800614e:	602a      	str	r2, [r5, #0]
 8006150:	681d      	ldr	r5, [r3, #0]
 8006152:	6862      	ldr	r2, [r4, #4]
 8006154:	2100      	movs	r1, #0
 8006156:	4628      	mov	r0, r5
 8006158:	f7fa f83a 	bl	80001d0 <memchr>
 800615c:	b108      	cbz	r0, 8006162 <_printf_i+0x1ea>
 800615e:	1b40      	subs	r0, r0, r5
 8006160:	6060      	str	r0, [r4, #4]
 8006162:	6863      	ldr	r3, [r4, #4]
 8006164:	6123      	str	r3, [r4, #16]
 8006166:	2300      	movs	r3, #0
 8006168:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800616c:	e7aa      	b.n	80060c4 <_printf_i+0x14c>
 800616e:	6923      	ldr	r3, [r4, #16]
 8006170:	462a      	mov	r2, r5
 8006172:	4649      	mov	r1, r9
 8006174:	4640      	mov	r0, r8
 8006176:	47d0      	blx	sl
 8006178:	3001      	adds	r0, #1
 800617a:	d0ad      	beq.n	80060d8 <_printf_i+0x160>
 800617c:	6823      	ldr	r3, [r4, #0]
 800617e:	079b      	lsls	r3, r3, #30
 8006180:	d413      	bmi.n	80061aa <_printf_i+0x232>
 8006182:	68e0      	ldr	r0, [r4, #12]
 8006184:	9b03      	ldr	r3, [sp, #12]
 8006186:	4298      	cmp	r0, r3
 8006188:	bfb8      	it	lt
 800618a:	4618      	movlt	r0, r3
 800618c:	e7a6      	b.n	80060dc <_printf_i+0x164>
 800618e:	2301      	movs	r3, #1
 8006190:	4632      	mov	r2, r6
 8006192:	4649      	mov	r1, r9
 8006194:	4640      	mov	r0, r8
 8006196:	47d0      	blx	sl
 8006198:	3001      	adds	r0, #1
 800619a:	d09d      	beq.n	80060d8 <_printf_i+0x160>
 800619c:	3501      	adds	r5, #1
 800619e:	68e3      	ldr	r3, [r4, #12]
 80061a0:	9903      	ldr	r1, [sp, #12]
 80061a2:	1a5b      	subs	r3, r3, r1
 80061a4:	42ab      	cmp	r3, r5
 80061a6:	dcf2      	bgt.n	800618e <_printf_i+0x216>
 80061a8:	e7eb      	b.n	8006182 <_printf_i+0x20a>
 80061aa:	2500      	movs	r5, #0
 80061ac:	f104 0619 	add.w	r6, r4, #25
 80061b0:	e7f5      	b.n	800619e <_printf_i+0x226>
 80061b2:	bf00      	nop
 80061b4:	080064a1 	.word	0x080064a1
 80061b8:	080064b2 	.word	0x080064b2

080061bc <__sflush_r>:
 80061bc:	898a      	ldrh	r2, [r1, #12]
 80061be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061c2:	4605      	mov	r5, r0
 80061c4:	0710      	lsls	r0, r2, #28
 80061c6:	460c      	mov	r4, r1
 80061c8:	d458      	bmi.n	800627c <__sflush_r+0xc0>
 80061ca:	684b      	ldr	r3, [r1, #4]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	dc05      	bgt.n	80061dc <__sflush_r+0x20>
 80061d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	dc02      	bgt.n	80061dc <__sflush_r+0x20>
 80061d6:	2000      	movs	r0, #0
 80061d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80061de:	2e00      	cmp	r6, #0
 80061e0:	d0f9      	beq.n	80061d6 <__sflush_r+0x1a>
 80061e2:	2300      	movs	r3, #0
 80061e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80061e8:	682f      	ldr	r7, [r5, #0]
 80061ea:	6a21      	ldr	r1, [r4, #32]
 80061ec:	602b      	str	r3, [r5, #0]
 80061ee:	d032      	beq.n	8006256 <__sflush_r+0x9a>
 80061f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80061f2:	89a3      	ldrh	r3, [r4, #12]
 80061f4:	075a      	lsls	r2, r3, #29
 80061f6:	d505      	bpl.n	8006204 <__sflush_r+0x48>
 80061f8:	6863      	ldr	r3, [r4, #4]
 80061fa:	1ac0      	subs	r0, r0, r3
 80061fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80061fe:	b10b      	cbz	r3, 8006204 <__sflush_r+0x48>
 8006200:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006202:	1ac0      	subs	r0, r0, r3
 8006204:	2300      	movs	r3, #0
 8006206:	4602      	mov	r2, r0
 8006208:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800620a:	6a21      	ldr	r1, [r4, #32]
 800620c:	4628      	mov	r0, r5
 800620e:	47b0      	blx	r6
 8006210:	1c43      	adds	r3, r0, #1
 8006212:	89a3      	ldrh	r3, [r4, #12]
 8006214:	d106      	bne.n	8006224 <__sflush_r+0x68>
 8006216:	6829      	ldr	r1, [r5, #0]
 8006218:	291d      	cmp	r1, #29
 800621a:	d82b      	bhi.n	8006274 <__sflush_r+0xb8>
 800621c:	4a29      	ldr	r2, [pc, #164]	; (80062c4 <__sflush_r+0x108>)
 800621e:	410a      	asrs	r2, r1
 8006220:	07d6      	lsls	r6, r2, #31
 8006222:	d427      	bmi.n	8006274 <__sflush_r+0xb8>
 8006224:	2200      	movs	r2, #0
 8006226:	6062      	str	r2, [r4, #4]
 8006228:	04d9      	lsls	r1, r3, #19
 800622a:	6922      	ldr	r2, [r4, #16]
 800622c:	6022      	str	r2, [r4, #0]
 800622e:	d504      	bpl.n	800623a <__sflush_r+0x7e>
 8006230:	1c42      	adds	r2, r0, #1
 8006232:	d101      	bne.n	8006238 <__sflush_r+0x7c>
 8006234:	682b      	ldr	r3, [r5, #0]
 8006236:	b903      	cbnz	r3, 800623a <__sflush_r+0x7e>
 8006238:	6560      	str	r0, [r4, #84]	; 0x54
 800623a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800623c:	602f      	str	r7, [r5, #0]
 800623e:	2900      	cmp	r1, #0
 8006240:	d0c9      	beq.n	80061d6 <__sflush_r+0x1a>
 8006242:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006246:	4299      	cmp	r1, r3
 8006248:	d002      	beq.n	8006250 <__sflush_r+0x94>
 800624a:	4628      	mov	r0, r5
 800624c:	f7ff fbea 	bl	8005a24 <_free_r>
 8006250:	2000      	movs	r0, #0
 8006252:	6360      	str	r0, [r4, #52]	; 0x34
 8006254:	e7c0      	b.n	80061d8 <__sflush_r+0x1c>
 8006256:	2301      	movs	r3, #1
 8006258:	4628      	mov	r0, r5
 800625a:	47b0      	blx	r6
 800625c:	1c41      	adds	r1, r0, #1
 800625e:	d1c8      	bne.n	80061f2 <__sflush_r+0x36>
 8006260:	682b      	ldr	r3, [r5, #0]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d0c5      	beq.n	80061f2 <__sflush_r+0x36>
 8006266:	2b1d      	cmp	r3, #29
 8006268:	d001      	beq.n	800626e <__sflush_r+0xb2>
 800626a:	2b16      	cmp	r3, #22
 800626c:	d101      	bne.n	8006272 <__sflush_r+0xb6>
 800626e:	602f      	str	r7, [r5, #0]
 8006270:	e7b1      	b.n	80061d6 <__sflush_r+0x1a>
 8006272:	89a3      	ldrh	r3, [r4, #12]
 8006274:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006278:	81a3      	strh	r3, [r4, #12]
 800627a:	e7ad      	b.n	80061d8 <__sflush_r+0x1c>
 800627c:	690f      	ldr	r7, [r1, #16]
 800627e:	2f00      	cmp	r7, #0
 8006280:	d0a9      	beq.n	80061d6 <__sflush_r+0x1a>
 8006282:	0793      	lsls	r3, r2, #30
 8006284:	680e      	ldr	r6, [r1, #0]
 8006286:	bf08      	it	eq
 8006288:	694b      	ldreq	r3, [r1, #20]
 800628a:	600f      	str	r7, [r1, #0]
 800628c:	bf18      	it	ne
 800628e:	2300      	movne	r3, #0
 8006290:	eba6 0807 	sub.w	r8, r6, r7
 8006294:	608b      	str	r3, [r1, #8]
 8006296:	f1b8 0f00 	cmp.w	r8, #0
 800629a:	dd9c      	ble.n	80061d6 <__sflush_r+0x1a>
 800629c:	6a21      	ldr	r1, [r4, #32]
 800629e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80062a0:	4643      	mov	r3, r8
 80062a2:	463a      	mov	r2, r7
 80062a4:	4628      	mov	r0, r5
 80062a6:	47b0      	blx	r6
 80062a8:	2800      	cmp	r0, #0
 80062aa:	dc06      	bgt.n	80062ba <__sflush_r+0xfe>
 80062ac:	89a3      	ldrh	r3, [r4, #12]
 80062ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062b2:	81a3      	strh	r3, [r4, #12]
 80062b4:	f04f 30ff 	mov.w	r0, #4294967295
 80062b8:	e78e      	b.n	80061d8 <__sflush_r+0x1c>
 80062ba:	4407      	add	r7, r0
 80062bc:	eba8 0800 	sub.w	r8, r8, r0
 80062c0:	e7e9      	b.n	8006296 <__sflush_r+0xda>
 80062c2:	bf00      	nop
 80062c4:	dfbffffe 	.word	0xdfbffffe

080062c8 <_fflush_r>:
 80062c8:	b538      	push	{r3, r4, r5, lr}
 80062ca:	690b      	ldr	r3, [r1, #16]
 80062cc:	4605      	mov	r5, r0
 80062ce:	460c      	mov	r4, r1
 80062d0:	b913      	cbnz	r3, 80062d8 <_fflush_r+0x10>
 80062d2:	2500      	movs	r5, #0
 80062d4:	4628      	mov	r0, r5
 80062d6:	bd38      	pop	{r3, r4, r5, pc}
 80062d8:	b118      	cbz	r0, 80062e2 <_fflush_r+0x1a>
 80062da:	6a03      	ldr	r3, [r0, #32]
 80062dc:	b90b      	cbnz	r3, 80062e2 <_fflush_r+0x1a>
 80062de:	f7ff f9ab 	bl	8005638 <__sinit>
 80062e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d0f3      	beq.n	80062d2 <_fflush_r+0xa>
 80062ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80062ec:	07d0      	lsls	r0, r2, #31
 80062ee:	d404      	bmi.n	80062fa <_fflush_r+0x32>
 80062f0:	0599      	lsls	r1, r3, #22
 80062f2:	d402      	bmi.n	80062fa <_fflush_r+0x32>
 80062f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062f6:	f7ff fb93 	bl	8005a20 <__retarget_lock_acquire_recursive>
 80062fa:	4628      	mov	r0, r5
 80062fc:	4621      	mov	r1, r4
 80062fe:	f7ff ff5d 	bl	80061bc <__sflush_r>
 8006302:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006304:	07da      	lsls	r2, r3, #31
 8006306:	4605      	mov	r5, r0
 8006308:	d4e4      	bmi.n	80062d4 <_fflush_r+0xc>
 800630a:	89a3      	ldrh	r3, [r4, #12]
 800630c:	059b      	lsls	r3, r3, #22
 800630e:	d4e1      	bmi.n	80062d4 <_fflush_r+0xc>
 8006310:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006312:	f7ff fb86 	bl	8005a22 <__retarget_lock_release_recursive>
 8006316:	e7dd      	b.n	80062d4 <_fflush_r+0xc>

08006318 <__swhatbuf_r>:
 8006318:	b570      	push	{r4, r5, r6, lr}
 800631a:	460c      	mov	r4, r1
 800631c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006320:	2900      	cmp	r1, #0
 8006322:	b096      	sub	sp, #88	; 0x58
 8006324:	4615      	mov	r5, r2
 8006326:	461e      	mov	r6, r3
 8006328:	da0d      	bge.n	8006346 <__swhatbuf_r+0x2e>
 800632a:	89a3      	ldrh	r3, [r4, #12]
 800632c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006330:	f04f 0100 	mov.w	r1, #0
 8006334:	bf0c      	ite	eq
 8006336:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800633a:	2340      	movne	r3, #64	; 0x40
 800633c:	2000      	movs	r0, #0
 800633e:	6031      	str	r1, [r6, #0]
 8006340:	602b      	str	r3, [r5, #0]
 8006342:	b016      	add	sp, #88	; 0x58
 8006344:	bd70      	pop	{r4, r5, r6, pc}
 8006346:	466a      	mov	r2, sp
 8006348:	f000 f848 	bl	80063dc <_fstat_r>
 800634c:	2800      	cmp	r0, #0
 800634e:	dbec      	blt.n	800632a <__swhatbuf_r+0x12>
 8006350:	9901      	ldr	r1, [sp, #4]
 8006352:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006356:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800635a:	4259      	negs	r1, r3
 800635c:	4159      	adcs	r1, r3
 800635e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006362:	e7eb      	b.n	800633c <__swhatbuf_r+0x24>

08006364 <__smakebuf_r>:
 8006364:	898b      	ldrh	r3, [r1, #12]
 8006366:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006368:	079d      	lsls	r5, r3, #30
 800636a:	4606      	mov	r6, r0
 800636c:	460c      	mov	r4, r1
 800636e:	d507      	bpl.n	8006380 <__smakebuf_r+0x1c>
 8006370:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006374:	6023      	str	r3, [r4, #0]
 8006376:	6123      	str	r3, [r4, #16]
 8006378:	2301      	movs	r3, #1
 800637a:	6163      	str	r3, [r4, #20]
 800637c:	b002      	add	sp, #8
 800637e:	bd70      	pop	{r4, r5, r6, pc}
 8006380:	ab01      	add	r3, sp, #4
 8006382:	466a      	mov	r2, sp
 8006384:	f7ff ffc8 	bl	8006318 <__swhatbuf_r>
 8006388:	9900      	ldr	r1, [sp, #0]
 800638a:	4605      	mov	r5, r0
 800638c:	4630      	mov	r0, r6
 800638e:	f7ff fbb5 	bl	8005afc <_malloc_r>
 8006392:	b948      	cbnz	r0, 80063a8 <__smakebuf_r+0x44>
 8006394:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006398:	059a      	lsls	r2, r3, #22
 800639a:	d4ef      	bmi.n	800637c <__smakebuf_r+0x18>
 800639c:	f023 0303 	bic.w	r3, r3, #3
 80063a0:	f043 0302 	orr.w	r3, r3, #2
 80063a4:	81a3      	strh	r3, [r4, #12]
 80063a6:	e7e3      	b.n	8006370 <__smakebuf_r+0xc>
 80063a8:	89a3      	ldrh	r3, [r4, #12]
 80063aa:	6020      	str	r0, [r4, #0]
 80063ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063b0:	81a3      	strh	r3, [r4, #12]
 80063b2:	9b00      	ldr	r3, [sp, #0]
 80063b4:	6163      	str	r3, [r4, #20]
 80063b6:	9b01      	ldr	r3, [sp, #4]
 80063b8:	6120      	str	r0, [r4, #16]
 80063ba:	b15b      	cbz	r3, 80063d4 <__smakebuf_r+0x70>
 80063bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063c0:	4630      	mov	r0, r6
 80063c2:	f000 f81d 	bl	8006400 <_isatty_r>
 80063c6:	b128      	cbz	r0, 80063d4 <__smakebuf_r+0x70>
 80063c8:	89a3      	ldrh	r3, [r4, #12]
 80063ca:	f023 0303 	bic.w	r3, r3, #3
 80063ce:	f043 0301 	orr.w	r3, r3, #1
 80063d2:	81a3      	strh	r3, [r4, #12]
 80063d4:	89a3      	ldrh	r3, [r4, #12]
 80063d6:	431d      	orrs	r5, r3
 80063d8:	81a5      	strh	r5, [r4, #12]
 80063da:	e7cf      	b.n	800637c <__smakebuf_r+0x18>

080063dc <_fstat_r>:
 80063dc:	b538      	push	{r3, r4, r5, lr}
 80063de:	4d07      	ldr	r5, [pc, #28]	; (80063fc <_fstat_r+0x20>)
 80063e0:	2300      	movs	r3, #0
 80063e2:	4604      	mov	r4, r0
 80063e4:	4608      	mov	r0, r1
 80063e6:	4611      	mov	r1, r2
 80063e8:	602b      	str	r3, [r5, #0]
 80063ea:	f7fb ffa0 	bl	800232e <_fstat>
 80063ee:	1c43      	adds	r3, r0, #1
 80063f0:	d102      	bne.n	80063f8 <_fstat_r+0x1c>
 80063f2:	682b      	ldr	r3, [r5, #0]
 80063f4:	b103      	cbz	r3, 80063f8 <_fstat_r+0x1c>
 80063f6:	6023      	str	r3, [r4, #0]
 80063f8:	bd38      	pop	{r3, r4, r5, pc}
 80063fa:	bf00      	nop
 80063fc:	200032e4 	.word	0x200032e4

08006400 <_isatty_r>:
 8006400:	b538      	push	{r3, r4, r5, lr}
 8006402:	4d06      	ldr	r5, [pc, #24]	; (800641c <_isatty_r+0x1c>)
 8006404:	2300      	movs	r3, #0
 8006406:	4604      	mov	r4, r0
 8006408:	4608      	mov	r0, r1
 800640a:	602b      	str	r3, [r5, #0]
 800640c:	f7fb ff9f 	bl	800234e <_isatty>
 8006410:	1c43      	adds	r3, r0, #1
 8006412:	d102      	bne.n	800641a <_isatty_r+0x1a>
 8006414:	682b      	ldr	r3, [r5, #0]
 8006416:	b103      	cbz	r3, 800641a <_isatty_r+0x1a>
 8006418:	6023      	str	r3, [r4, #0]
 800641a:	bd38      	pop	{r3, r4, r5, pc}
 800641c:	200032e4 	.word	0x200032e4

08006420 <_sbrk_r>:
 8006420:	b538      	push	{r3, r4, r5, lr}
 8006422:	4d06      	ldr	r5, [pc, #24]	; (800643c <_sbrk_r+0x1c>)
 8006424:	2300      	movs	r3, #0
 8006426:	4604      	mov	r4, r0
 8006428:	4608      	mov	r0, r1
 800642a:	602b      	str	r3, [r5, #0]
 800642c:	f7fb ffa8 	bl	8002380 <_sbrk>
 8006430:	1c43      	adds	r3, r0, #1
 8006432:	d102      	bne.n	800643a <_sbrk_r+0x1a>
 8006434:	682b      	ldr	r3, [r5, #0]
 8006436:	b103      	cbz	r3, 800643a <_sbrk_r+0x1a>
 8006438:	6023      	str	r3, [r4, #0]
 800643a:	bd38      	pop	{r3, r4, r5, pc}
 800643c:	200032e4 	.word	0x200032e4

08006440 <_init>:
 8006440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006442:	bf00      	nop
 8006444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006446:	bc08      	pop	{r3}
 8006448:	469e      	mov	lr, r3
 800644a:	4770      	bx	lr

0800644c <_fini>:
 800644c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800644e:	bf00      	nop
 8006450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006452:	bc08      	pop	{r3}
 8006454:	469e      	mov	lr, r3
 8006456:	4770      	bx	lr
