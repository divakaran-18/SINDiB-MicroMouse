
MicromouseFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08006964  08006964  00016964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069d8  080069d8  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080069d8  080069d8  000169d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069e0  080069e0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069e0  080069e0  000169e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069e4  080069e4  000169e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080069e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00000450  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004b8  200004b8  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   000126e2  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002aca  00000000  00000000  000327bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001148  00000000  00000000  00035288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d73  00000000  00000000  000363d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000234c0  00000000  00000000  00037143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00015b4b  00000000  00000000  0005a603  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d19d4  00000000  00000000  0007014e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004fa4  00000000  00000000  00141b24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000091  00000000  00000000  00146ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800694c 	.word	0x0800694c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	0800694c 	.word	0x0800694c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <L3GD20_Init>:
uint32_t currentTime = 0;
int ss;


void L3GD20_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,GPIO_PIN_RESET);
 8000570:	2200      	movs	r2, #0
 8000572:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000576:	485c      	ldr	r0, [pc, #368]	; (80006e8 <L3GD20_Init+0x17c>)
 8000578:	f002 fe7e 	bl	8003278 <HAL_GPIO_WritePin>
	spiTxBuf[0]=0x0F;//who i am register address
 800057c:	4b5b      	ldr	r3, [pc, #364]	; (80006ec <L3GD20_Init+0x180>)
 800057e:	220f      	movs	r2, #15
 8000580:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1,spiTxBuf,1,50);
 8000582:	2332      	movs	r3, #50	; 0x32
 8000584:	2201      	movs	r2, #1
 8000586:	4959      	ldr	r1, [pc, #356]	; (80006ec <L3GD20_Init+0x180>)
 8000588:	4859      	ldr	r0, [pc, #356]	; (80006f0 <L3GD20_Init+0x184>)
 800058a:	f003 fbae 	bl	8003cea <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1,&spiRxBuf[1],1,50);
 800058e:	2332      	movs	r3, #50	; 0x32
 8000590:	2201      	movs	r2, #1
 8000592:	4958      	ldr	r1, [pc, #352]	; (80006f4 <L3GD20_Init+0x188>)
 8000594:	4856      	ldr	r0, [pc, #344]	; (80006f0 <L3GD20_Init+0x184>)
 8000596:	f003 fce4 	bl	8003f62 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,GPIO_PIN_SET);
 800059a:	2201      	movs	r2, #1
 800059c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005a0:	4851      	ldr	r0, [pc, #324]	; (80006e8 <L3GD20_Init+0x17c>)
 80005a2:	f002 fe69 	bl	8003278 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,GPIO_PIN_SET);
 80005a6:	2201      	movs	r2, #1
 80005a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005ac:	484e      	ldr	r0, [pc, #312]	; (80006e8 <L3GD20_Init+0x17c>)
 80005ae:	f002 fe63 	bl	8003278 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80005b2:	2014      	movs	r0, #20
 80005b4:	f001 fa68 	bl	8001a88 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005be:	484a      	ldr	r0, [pc, #296]	; (80006e8 <L3GD20_Init+0x17c>)
 80005c0:	f002 fe5a 	bl	8003278 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80005c4:	2014      	movs	r0, #20
 80005c6:	f001 fa5f 	bl	8001a88 <HAL_Delay>
	spiTxBuf[0]=0x20;
 80005ca:	4b48      	ldr	r3, [pc, #288]	; (80006ec <L3GD20_Init+0x180>)
 80005cc:	2220      	movs	r2, #32
 80005ce:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0xff;
 80005d0:	4b46      	ldr	r3, [pc, #280]	; (80006ec <L3GD20_Init+0x180>)
 80005d2:	22ff      	movs	r2, #255	; 0xff
 80005d4:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi1,spiTxBuf,2,50);
 80005d6:	2332      	movs	r3, #50	; 0x32
 80005d8:	2202      	movs	r2, #2
 80005da:	4944      	ldr	r1, [pc, #272]	; (80006ec <L3GD20_Init+0x180>)
 80005dc:	4844      	ldr	r0, [pc, #272]	; (80006f0 <L3GD20_Init+0x184>)
 80005de:	f003 fb84 	bl	8003cea <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,GPIO_PIN_SET);
 80005e2:	2201      	movs	r2, #1
 80005e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e8:	483f      	ldr	r0, [pc, #252]	; (80006e8 <L3GD20_Init+0x17c>)
 80005ea:	f002 fe45 	bl	8003278 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80005ee:	2014      	movs	r0, #20
 80005f0:	f001 fa4a 	bl	8001a88 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,GPIO_PIN_RESET);
 80005f4:	2200      	movs	r2, #0
 80005f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005fa:	483b      	ldr	r0, [pc, #236]	; (80006e8 <L3GD20_Init+0x17c>)
 80005fc:	f002 fe3c 	bl	8003278 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000600:	2014      	movs	r0, #20
 8000602:	f001 fa41 	bl	8001a88 <HAL_Delay>
	spiTxBuf[0]=0x21;
 8000606:	4b39      	ldr	r3, [pc, #228]	; (80006ec <L3GD20_Init+0x180>)
 8000608:	2221      	movs	r2, #33	; 0x21
 800060a:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x00;
 800060c:	4b37      	ldr	r3, [pc, #220]	; (80006ec <L3GD20_Init+0x180>)
 800060e:	2200      	movs	r2, #0
 8000610:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi1,spiTxBuf,2,50);
 8000612:	2332      	movs	r3, #50	; 0x32
 8000614:	2202      	movs	r2, #2
 8000616:	4935      	ldr	r1, [pc, #212]	; (80006ec <L3GD20_Init+0x180>)
 8000618:	4835      	ldr	r0, [pc, #212]	; (80006f0 <L3GD20_Init+0x184>)
 800061a:	f003 fb66 	bl	8003cea <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,GPIO_PIN_SET);
 800061e:	2201      	movs	r2, #1
 8000620:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000624:	4830      	ldr	r0, [pc, #192]	; (80006e8 <L3GD20_Init+0x17c>)
 8000626:	f002 fe27 	bl	8003278 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800062a:	2014      	movs	r0, #20
 800062c:	f001 fa2c 	bl	8001a88 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,GPIO_PIN_RESET);
 8000630:	2200      	movs	r2, #0
 8000632:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000636:	482c      	ldr	r0, [pc, #176]	; (80006e8 <L3GD20_Init+0x17c>)
 8000638:	f002 fe1e 	bl	8003278 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800063c:	2014      	movs	r0, #20
 800063e:	f001 fa23 	bl	8001a88 <HAL_Delay>
	spiTxBuf[0]=0x22;
 8000642:	4b2a      	ldr	r3, [pc, #168]	; (80006ec <L3GD20_Init+0x180>)
 8000644:	2222      	movs	r2, #34	; 0x22
 8000646:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x00;
 8000648:	4b28      	ldr	r3, [pc, #160]	; (80006ec <L3GD20_Init+0x180>)
 800064a:	2200      	movs	r2, #0
 800064c:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi1,spiTxBuf,2,50);
 800064e:	2332      	movs	r3, #50	; 0x32
 8000650:	2202      	movs	r2, #2
 8000652:	4926      	ldr	r1, [pc, #152]	; (80006ec <L3GD20_Init+0x180>)
 8000654:	4826      	ldr	r0, [pc, #152]	; (80006f0 <L3GD20_Init+0x184>)
 8000656:	f003 fb48 	bl	8003cea <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,GPIO_PIN_SET);
 800065a:	2201      	movs	r2, #1
 800065c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000660:	4821      	ldr	r0, [pc, #132]	; (80006e8 <L3GD20_Init+0x17c>)
 8000662:	f002 fe09 	bl	8003278 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000666:	2014      	movs	r0, #20
 8000668:	f001 fa0e 	bl	8001a88 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,GPIO_PIN_RESET);
 800066c:	2200      	movs	r2, #0
 800066e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000672:	481d      	ldr	r0, [pc, #116]	; (80006e8 <L3GD20_Init+0x17c>)
 8000674:	f002 fe00 	bl	8003278 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000678:	2014      	movs	r0, #20
 800067a:	f001 fa05 	bl	8001a88 <HAL_Delay>
	spiTxBuf[0]=0x23;
 800067e:	4b1b      	ldr	r3, [pc, #108]	; (80006ec <L3GD20_Init+0x180>)
 8000680:	2223      	movs	r2, #35	; 0x23
 8000682:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x20;
 8000684:	4b19      	ldr	r3, [pc, #100]	; (80006ec <L3GD20_Init+0x180>)
 8000686:	2220      	movs	r2, #32
 8000688:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi1,spiTxBuf,2,50);
 800068a:	2332      	movs	r3, #50	; 0x32
 800068c:	2202      	movs	r2, #2
 800068e:	4917      	ldr	r1, [pc, #92]	; (80006ec <L3GD20_Init+0x180>)
 8000690:	4817      	ldr	r0, [pc, #92]	; (80006f0 <L3GD20_Init+0x184>)
 8000692:	f003 fb2a 	bl	8003cea <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,GPIO_PIN_SET);
 8000696:	2201      	movs	r2, #1
 8000698:	f44f 7180 	mov.w	r1, #256	; 0x100
 800069c:	4812      	ldr	r0, [pc, #72]	; (80006e8 <L3GD20_Init+0x17c>)
 800069e:	f002 fdeb 	bl	8003278 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80006a2:	2014      	movs	r0, #20
 80006a4:	f001 f9f0 	bl	8001a88 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,GPIO_PIN_RESET);
 80006a8:	2200      	movs	r2, #0
 80006aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006ae:	480e      	ldr	r0, [pc, #56]	; (80006e8 <L3GD20_Init+0x17c>)
 80006b0:	f002 fde2 	bl	8003278 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80006b4:	2014      	movs	r0, #20
 80006b6:	f001 f9e7 	bl	8001a88 <HAL_Delay>
	spiTxBuf[0]=0x24;
 80006ba:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <L3GD20_Init+0x180>)
 80006bc:	2224      	movs	r2, #36	; 0x24
 80006be:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x10;
 80006c0:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <L3GD20_Init+0x180>)
 80006c2:	2210      	movs	r2, #16
 80006c4:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi1,spiTxBuf,2,50);
 80006c6:	2332      	movs	r3, #50	; 0x32
 80006c8:	2202      	movs	r2, #2
 80006ca:	4908      	ldr	r1, [pc, #32]	; (80006ec <L3GD20_Init+0x180>)
 80006cc:	4808      	ldr	r0, [pc, #32]	; (80006f0 <L3GD20_Init+0x184>)
 80006ce:	f003 fb0c 	bl	8003cea <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,GPIO_PIN_SET);
 80006d2:	2201      	movs	r2, #1
 80006d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006d8:	4803      	ldr	r0, [pc, #12]	; (80006e8 <L3GD20_Init+0x17c>)
 80006da:	f002 fdcd 	bl	8003278 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80006de:	2014      	movs	r0, #20
 80006e0:	f001 f9d2 	bl	8001a88 <HAL_Delay>

}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40020800 	.word	0x40020800
 80006ec:	20000084 	.word	0x20000084
 80006f0:	20000138 	.word	0x20000138
 80006f4:	20000089 	.word	0x20000089

080006f8 <_Z8fastIdlev>:

int fastIdle()
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
    return 5;
 80006fc:	2305      	movs	r3, #5
    //         return 7;
    //     }

    // }

}
 80006fe:	4618      	mov	r0, r3
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr

08000708 <_Z11fastForwardv>:

int fastForward()
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
    //     {
    //         return 7;
    //     }
    // }

    return 6;
 800070c:	2306      	movs	r3, #6
}
 800070e:	4618      	mov	r0, r3
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr

08000718 <_Z12fastBackwardv>:

int fastBackward()
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
    //         return 7;
    //     }

    // }

    return 7;
 800071c:	2307      	movs	r3, #7
}
 800071e:	4618      	mov	r0, r3
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800072c:	f001 f93a 	bl	80019a4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000730:	f000 f908 	bl	8000944 <_Z18SystemClock_Configv>

	/* USER CODE BEGIN SysInit */
	ITM_Port32(31) = 1;
 8000734:	4b3b      	ldr	r3, [pc, #236]	; (8000824 <main+0xfc>)
 8000736:	2201      	movs	r2, #1
 8000738:	601a      	str	r2, [r3, #0]
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */

	MX_GPIO_Init();
 800073a:	f000 fc79 	bl	8001030 <_ZL12MX_GPIO_Initv>
	MX_DMA_Init();
 800073e:	f000 fc57 	bl	8000ff0 <_ZL11MX_DMA_Initv>
	MX_SPI1_Init();
 8000742:	f000 fa1f 	bl	8000b84 <_ZL12MX_SPI1_Initv>
	MX_TIM4_Init();
 8000746:	f000 fafd 	bl	8000d44 <_ZL12MX_TIM4_Initv>
	MX_ADC1_Init();
 800074a:	f000 f961 	bl	8000a10 <_ZL12MX_ADC1_Initv>
	MX_SPI2_Init();
 800074e:	f000 fa55 	bl	8000bfc <_ZL12MX_SPI2_Initv>
	MX_TIM2_Init();
 8000752:	f000 fa8f 	bl	8000c74 <_ZL12MX_TIM2_Initv>
	MX_USART1_UART_Init();
 8000756:	f000 fc1d 	bl	8000f94 <_ZL19MX_USART1_UART_Initv>
	MX_TIM6_Init();
 800075a:	f000 fbb3 	bl	8000ec4 <_ZL12MX_TIM6_Initv>
	MX_TIM14_Init();
 800075e:	f000 fbf1 	bl	8000f44 <_ZL13MX_TIM14_Initv>

	/* USER CODE BEGIN 2 */
	printf("hello world\r\n");
 8000762:	4831      	ldr	r0, [pc, #196]	; (8000828 <main+0x100>)
 8000764:	f005 fb36 	bl	8005dd4 <puts>
	ITM_Port32(31) = 2;
 8000768:	4b2e      	ldr	r3, [pc, #184]	; (8000824 <main+0xfc>)
 800076a:	2202      	movs	r2, #2
 800076c:	601a      	str	r2, [r3, #0]

	L3GD20_Init();
 800076e:	f7ff fefd 	bl	800056c <L3GD20_Init>
//	  	z = DisplayAxisValues();
//	  	HAL_Delay(100);
//		L3GD20_loop();
//		HAL_Delay(1);

		switch (mouseState) {
 8000772:	4b2e      	ldr	r3, [pc, #184]	; (800082c <main+0x104>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2b07      	cmp	r3, #7
 8000778:	d842      	bhi.n	8000800 <main+0xd8>
 800077a:	a201      	add	r2, pc, #4	; (adr r2, 8000780 <main+0x58>)
 800077c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000780:	080007a1 	.word	0x080007a1
 8000784:	080007ad 	.word	0x080007ad
 8000788:	080007b9 	.word	0x080007b9
 800078c:	080007c5 	.word	0x080007c5
 8000790:	080007d1 	.word	0x080007d1
 8000794:	080007dd 	.word	0x080007dd
 8000798:	080007e9 	.word	0x080007e9
 800079c:	080007f5 	.word	0x080007f5

		case 0:
			mouseState = idle();
 80007a0:	f000 ffec 	bl	800177c <_Z4idlev>
 80007a4:	4603      	mov	r3, r0
 80007a6:	4a21      	ldr	r2, [pc, #132]	; (800082c <main+0x104>)
 80007a8:	6013      	str	r3, [r2, #0]
			break;
 80007aa:	e02a      	b.n	8000802 <main+0xda>

		case 1:
			mouseState = searchIdle();
 80007ac:	f000 fd1d 	bl	80011ea <_Z10searchIdlev>
 80007b0:	4603      	mov	r3, r0
 80007b2:	4a1e      	ldr	r2, [pc, #120]	; (800082c <main+0x104>)
 80007b4:	6013      	str	r3, [r2, #0]
			break;
 80007b6:	e024      	b.n	8000802 <main+0xda>

		case 2:
			mouseState = searchForward();
 80007b8:	f000 fd1f 	bl	80011fa <_Z13searchForwardv>
 80007bc:	4603      	mov	r3, r0
 80007be:	4a1b      	ldr	r2, [pc, #108]	; (800082c <main+0x104>)
 80007c0:	6013      	str	r3, [r2, #0]
			break;
 80007c2:	e01e      	b.n	8000802 <main+0xda>

		case 3:
			mouseState = searchBackward();
 80007c4:	f000 fd21 	bl	800120a <_Z14searchBackwardv>
 80007c8:	4603      	mov	r3, r0
 80007ca:	4a18      	ldr	r2, [pc, #96]	; (800082c <main+0x104>)
 80007cc:	6013      	str	r3, [r2, #0]
			break;
 80007ce:	e018      	b.n	8000802 <main+0xda>

		case 4:
			mouseState = fastIdle();
 80007d0:	f7ff ff92 	bl	80006f8 <_Z8fastIdlev>
 80007d4:	4603      	mov	r3, r0
 80007d6:	4a15      	ldr	r2, [pc, #84]	; (800082c <main+0x104>)
 80007d8:	6013      	str	r3, [r2, #0]
			break;
 80007da:	e012      	b.n	8000802 <main+0xda>

		case 5:
			mouseState = fastForward();
 80007dc:	f7ff ff94 	bl	8000708 <_Z11fastForwardv>
 80007e0:	4603      	mov	r3, r0
 80007e2:	4a12      	ldr	r2, [pc, #72]	; (800082c <main+0x104>)
 80007e4:	6013      	str	r3, [r2, #0]
			break;
 80007e6:	e00c      	b.n	8000802 <main+0xda>

		case 6:
			mouseState = fastBackward();
 80007e8:	f7ff ff96 	bl	8000718 <_Z12fastBackwardv>
 80007ec:	4603      	mov	r3, r0
 80007ee:	4a0f      	ldr	r2, [pc, #60]	; (800082c <main+0x104>)
 80007f0:	6013      	str	r3, [r2, #0]
			break;
 80007f2:	e006      	b.n	8000802 <main+0xda>

		case 7:
			mouseState = speedAdjust();
 80007f4:	f000 ffdc 	bl	80017b0 <_Z11speedAdjustv>
 80007f8:	4603      	mov	r3, r0
 80007fa:	4a0c      	ldr	r2, [pc, #48]	; (800082c <main+0x104>)
 80007fc:	6013      	str	r3, [r2, #0]
			break;
 80007fe:	e000      	b.n	8000802 <main+0xda>

		default:
			break;
 8000800:	bf00      	nop
		}

		HAL_Delay(100);
 8000802:	2064      	movs	r0, #100	; 0x64
 8000804:	f001 f940 	bl	8001a88 <HAL_Delay>
		printf("i value : %i\r\n", i);
 8000808:	4b09      	ldr	r3, [pc, #36]	; (8000830 <main+0x108>)
 800080a:	881b      	ldrh	r3, [r3, #0]
 800080c:	4619      	mov	r1, r3
 800080e:	4809      	ldr	r0, [pc, #36]	; (8000834 <main+0x10c>)
 8000810:	f005 fa7a 	bl	8005d08 <iprintf>
		i = i + 1;
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <main+0x108>)
 8000816:	881b      	ldrh	r3, [r3, #0]
 8000818:	3301      	adds	r3, #1
 800081a:	b29a      	uxth	r2, r3
 800081c:	4b04      	ldr	r3, [pc, #16]	; (8000830 <main+0x108>)
 800081e:	801a      	strh	r2, [r3, #0]
		switch (mouseState) {
 8000820:	e7a7      	b.n	8000772 <main+0x4a>
 8000822:	bf00      	nop
 8000824:	e000007c 	.word	0xe000007c
 8000828:	08006964 	.word	0x08006964
 800082c:	2000035c 	.word	0x2000035c
 8000830:	20000358 	.word	0x20000358
 8000834:	08006974 	.word	0x08006974

08000838 <HAL_TIM_PeriodElapsedCallback>:
	}
	/* USER CODE END 3 */
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  if (htim == &htim14 )
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	4a30      	ldr	r2, [pc, #192]	; (8000904 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000844:	4293      	cmp	r3, r2
 8000846:	d159      	bne.n	80008fc <HAL_TIM_PeriodElapsedCallback+0xc4>
  {
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)adcResultsDMA, adcChannelCount);
 8000848:	2204      	movs	r2, #4
 800084a:	492f      	ldr	r1, [pc, #188]	; (8000908 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800084c:	482f      	ldr	r0, [pc, #188]	; (800090c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800084e:	f001 f983 	bl	8001b58 <HAL_ADC_Start_DMA>
	while(adcConversionComplete == 0){
 8000852:	bf00      	nop
 8000854:	4b2e      	ldr	r3, [pc, #184]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2b00      	cmp	r3, #0
 800085a:	bf0c      	ite	eq
 800085c:	2301      	moveq	r3, #1
 800085e:	2300      	movne	r3, #0
 8000860:	b2db      	uxtb	r3, r3
 8000862:	2b00      	cmp	r3, #0
 8000864:	d1f6      	bne.n	8000854 <HAL_TIM_PeriodElapsedCallback+0x1c>

	}
	adcConversionComplete = 0;
 8000866:	4b2a      	ldr	r3, [pc, #168]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]

	if(adcResultsDMA[0]>1000){
 800086c:	4b26      	ldr	r3, [pc, #152]	; (8000908 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800086e:	881b      	ldrh	r3, [r3, #0]
 8000870:	b29b      	uxth	r3, r3
 8000872:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000876:	bf8c      	ite	hi
 8000878:	2301      	movhi	r3, #1
 800087a:	2300      	movls	r3, #0
 800087c:	b2db      	uxtb	r3, r3
 800087e:	2b00      	cmp	r3, #0
 8000880:	d003      	beq.n	800088a <HAL_TIM_PeriodElapsedCallback+0x52>
		LF =true;
 8000882:	4b24      	ldr	r3, [pc, #144]	; (8000914 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000884:	2201      	movs	r2, #1
 8000886:	701a      	strb	r2, [r3, #0]
 8000888:	e002      	b.n	8000890 <HAL_TIM_PeriodElapsedCallback+0x58>
	}
	else{
		LF =false;
 800088a:	4b22      	ldr	r3, [pc, #136]	; (8000914 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800088c:	2200      	movs	r2, #0
 800088e:	701a      	strb	r2, [r3, #0]
	}
	if(adcResultsDMA[1]>1000){
 8000890:	4b1d      	ldr	r3, [pc, #116]	; (8000908 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000892:	885b      	ldrh	r3, [r3, #2]
 8000894:	b29b      	uxth	r3, r3
 8000896:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800089a:	bf8c      	ite	hi
 800089c:	2301      	movhi	r3, #1
 800089e:	2300      	movls	r3, #0
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d003      	beq.n	80008ae <HAL_TIM_PeriodElapsedCallback+0x76>
		RF =true;
 80008a6:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	701a      	strb	r2, [r3, #0]
 80008ac:	e002      	b.n	80008b4 <HAL_TIM_PeriodElapsedCallback+0x7c>
	}
	else{
		RF =false;
 80008ae:	4b1a      	ldr	r3, [pc, #104]	; (8000918 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	701a      	strb	r2, [r3, #0]
	}
	if(adcResultsDMA[2]>1000){
 80008b4:	4b14      	ldr	r3, [pc, #80]	; (8000908 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80008b6:	889b      	ldrh	r3, [r3, #4]
 80008b8:	b29b      	uxth	r3, r3
 80008ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80008be:	bf8c      	ite	hi
 80008c0:	2301      	movhi	r3, #1
 80008c2:	2300      	movls	r3, #0
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d003      	beq.n	80008d2 <HAL_TIM_PeriodElapsedCallback+0x9a>
		LD =true;
 80008ca:	4b14      	ldr	r3, [pc, #80]	; (800091c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	701a      	strb	r2, [r3, #0]
 80008d0:	e002      	b.n	80008d8 <HAL_TIM_PeriodElapsedCallback+0xa0>
	}
	else{
		LD =false;
 80008d2:	4b12      	ldr	r3, [pc, #72]	; (800091c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	701a      	strb	r2, [r3, #0]
	}
	if(adcResultsDMA[3]>1000){
 80008d8:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80008da:	88db      	ldrh	r3, [r3, #6]
 80008dc:	b29b      	uxth	r3, r3
 80008de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80008e2:	bf8c      	ite	hi
 80008e4:	2301      	movhi	r3, #1
 80008e6:	2300      	movls	r3, #0
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d003      	beq.n	80008f6 <HAL_TIM_PeriodElapsedCallback+0xbe>
		RD =true;
 80008ee:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	701a      	strb	r2, [r3, #0]
		RD =false;
	}

  }

}
 80008f4:	e002      	b.n	80008fc <HAL_TIM_PeriodElapsedCallback+0xc4>
		RD =false;
 80008f6:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	701a      	strb	r2, [r3, #0]
}
 80008fc:	bf00      	nop
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	200002c0 	.word	0x200002c0
 8000908:	2000034c 	.word	0x2000034c
 800090c:	20000090 	.word	0x20000090
 8000910:	20000354 	.word	0x20000354
 8000914:	20000360 	.word	0x20000360
 8000918:	20000361 	.word	0x20000361
 800091c:	20000362 	.word	0x20000362
 8000920:	20000363 	.word	0x20000363

08000924 <HAL_ADC_ConvCpltCallback>:


__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	adcConversionComplete = 1;
 800092c:	4b04      	ldr	r3, [pc, #16]	; (8000940 <HAL_ADC_ConvCpltCallback+0x1c>)
 800092e:	2201      	movs	r2, #1
 8000930:	601a      	str	r2, [r3, #0]
//  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8000932:	bf00      	nop
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	20000354 	.word	0x20000354

08000944 <_Z18SystemClock_Configv>:
			break;
		}
	}
}

void SystemClock_Config(void) {
 8000944:	b580      	push	{r7, lr}
 8000946:	b094      	sub	sp, #80	; 0x50
 8000948:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800094a:	f107 0320 	add.w	r3, r7, #32
 800094e:	2230      	movs	r2, #48	; 0x30
 8000950:	2100      	movs	r1, #0
 8000952:	4618      	mov	r0, r3
 8000954:	f005 fb1e 	bl	8005f94 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000958:	f107 030c 	add.w	r3, r7, #12
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000968:	2300      	movs	r3, #0
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	4b26      	ldr	r3, [pc, #152]	; (8000a08 <_Z18SystemClock_Configv+0xc4>)
 800096e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000970:	4a25      	ldr	r2, [pc, #148]	; (8000a08 <_Z18SystemClock_Configv+0xc4>)
 8000972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000976:	6413      	str	r3, [r2, #64]	; 0x40
 8000978:	4b23      	ldr	r3, [pc, #140]	; (8000a08 <_Z18SystemClock_Configv+0xc4>)
 800097a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000980:	60bb      	str	r3, [r7, #8]
 8000982:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000984:	2300      	movs	r3, #0
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	4b20      	ldr	r3, [pc, #128]	; (8000a0c <_Z18SystemClock_Configv+0xc8>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a1f      	ldr	r2, [pc, #124]	; (8000a0c <_Z18SystemClock_Configv+0xc8>)
 800098e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000992:	6013      	str	r3, [r2, #0]
 8000994:	4b1d      	ldr	r3, [pc, #116]	; (8000a0c <_Z18SystemClock_Configv+0xc8>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009a0:	2301      	movs	r3, #1
 80009a2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009aa:	2300      	movs	r3, #0
 80009ac:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80009ae:	f107 0320 	add.w	r3, r7, #32
 80009b2:	4618      	mov	r0, r3
 80009b4:	f002 fc7a 	bl	80032ac <HAL_RCC_OscConfig>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	bf14      	ite	ne
 80009be:	2301      	movne	r3, #1
 80009c0:	2300      	moveq	r3, #0
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <_Z18SystemClock_Configv+0x88>
		Error_Handler();
 80009c8:	f000 fc0a 	bl	80011e0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80009cc:	230f      	movs	r3, #15
 80009ce:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80009d0:	2301      	movs	r3, #1
 80009d2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009d8:	2300      	movs	r3, #0
 80009da:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009dc:	2300      	movs	r3, #0
 80009de:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80009e0:	f107 030c 	add.w	r3, r7, #12
 80009e4:	2100      	movs	r1, #0
 80009e6:	4618      	mov	r0, r3
 80009e8:	f002 fed8 	bl	800379c <HAL_RCC_ClockConfig>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	bf14      	ite	ne
 80009f2:	2301      	movne	r3, #1
 80009f4:	2300      	moveq	r3, #0
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <_Z18SystemClock_Configv+0xbc>
		Error_Handler();
 80009fc:	f000 fbf0 	bl	80011e0 <Error_Handler>
	}
}
 8000a00:	bf00      	nop
 8000a02:	3750      	adds	r7, #80	; 0x50
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40007000 	.word	0x40007000

08000a10 <_ZL12MX_ADC1_Initv>:

static void MX_ADC1_Init(void) {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08c      	sub	sp, #48	; 0x30
 8000a14:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000a16:	f107 0320 	add.w	r3, r7, #32
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	60da      	str	r2, [r3, #12]
	ADC_InjectionConfTypeDef sConfigInjected = { 0 };
 8000a24:	463b      	mov	r3, r7
 8000a26:	2220      	movs	r2, #32
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f005 fab2 	bl	8005f94 <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000a30:	4b50      	ldr	r3, [pc, #320]	; (8000b74 <_ZL12MX_ADC1_Initv+0x164>)
 8000a32:	4a51      	ldr	r2, [pc, #324]	; (8000b78 <_ZL12MX_ADC1_Initv+0x168>)
 8000a34:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000a36:	4b4f      	ldr	r3, [pc, #316]	; (8000b74 <_ZL12MX_ADC1_Initv+0x164>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a3c:	4b4d      	ldr	r3, [pc, #308]	; (8000b74 <_ZL12MX_ADC1_Initv+0x164>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 8000a42:	4b4c      	ldr	r3, [pc, #304]	; (8000b74 <_ZL12MX_ADC1_Initv+0x164>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000a48:	4b4a      	ldr	r3, [pc, #296]	; (8000b74 <_ZL12MX_ADC1_Initv+0x164>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a4e:	4b49      	ldr	r3, [pc, #292]	; (8000b74 <_ZL12MX_ADC1_Initv+0x164>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a56:	4b47      	ldr	r3, [pc, #284]	; (8000b74 <_ZL12MX_ADC1_Initv+0x164>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a5c:	4b45      	ldr	r3, [pc, #276]	; (8000b74 <_ZL12MX_ADC1_Initv+0x164>)
 8000a5e:	4a47      	ldr	r2, [pc, #284]	; (8000b7c <_ZL12MX_ADC1_Initv+0x16c>)
 8000a60:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a62:	4b44      	ldr	r3, [pc, #272]	; (8000b74 <_ZL12MX_ADC1_Initv+0x164>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8000a68:	4b42      	ldr	r3, [pc, #264]	; (8000b74 <_ZL12MX_ADC1_Initv+0x164>)
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a6e:	4b41      	ldr	r3, [pc, #260]	; (8000b74 <_ZL12MX_ADC1_Initv+0x164>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a76:	4b3f      	ldr	r3, [pc, #252]	; (8000b74 <_ZL12MX_ADC1_Initv+0x164>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000a7c:	483d      	ldr	r0, [pc, #244]	; (8000b74 <_ZL12MX_ADC1_Initv+0x164>)
 8000a7e:	f001 f827 	bl	8001ad0 <HAL_ADC_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	bf14      	ite	ne
 8000a88:	2301      	movne	r3, #1
 8000a8a:	2300      	moveq	r3, #0
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <_ZL12MX_ADC1_Initv+0x86>
		Error_Handler();
 8000a92:	f000 fba5 	bl	80011e0 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 8000a96:	2304      	movs	r3, #4
 8000a98:	623b      	str	r3, [r7, #32]
	sConfig.Rank = 1;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000aa2:	f107 0320 	add.w	r3, r7, #32
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4832      	ldr	r0, [pc, #200]	; (8000b74 <_ZL12MX_ADC1_Initv+0x164>)
 8000aaa:	f001 f979 	bl	8001da0 <HAL_ADC_ConfigChannel>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	bf14      	ite	ne
 8000ab4:	2301      	movne	r3, #1
 8000ab6:	2300      	moveq	r3, #0
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <_ZL12MX_ADC1_Initv+0xb2>
		Error_Handler();
 8000abe:	f000 fb8f 	bl	80011e0 <Error_Handler>
	}

	/** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
	 */
	sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8000ac2:	2304      	movs	r3, #4
 8000ac4:	603b      	str	r3, [r7, #0]
	sConfigInjected.InjectedRank = 1;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	607b      	str	r3, [r7, #4]
	sConfigInjected.InjectedNbrOfConversion = 4;
 8000aca:	2304      	movs	r3, #4
 8000acc:	613b      	str	r3, [r7, #16]
	sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60bb      	str	r3, [r7, #8]
	sConfigInjected.ExternalTrigInjecConvEdge =
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61fb      	str	r3, [r7, #28]
			ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
	sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000ad6:	4b2a      	ldr	r3, [pc, #168]	; (8000b80 <_ZL12MX_ADC1_Initv+0x170>)
 8000ad8:	61bb      	str	r3, [r7, #24]
	sConfigInjected.AutoInjectedConv = DISABLE;
 8000ada:	2300      	movs	r3, #0
 8000adc:	757b      	strb	r3, [r7, #21]
	sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	753b      	strb	r3, [r7, #20]
	sConfigInjected.InjectedOffset = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]
	if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK) {
 8000ae6:	463b      	mov	r3, r7
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4822      	ldr	r0, [pc, #136]	; (8000b74 <_ZL12MX_ADC1_Initv+0x164>)
 8000aec:	f001 fbf8 	bl	80022e0 <HAL_ADCEx_InjectedConfigChannel>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	bf14      	ite	ne
 8000af6:	2301      	movne	r3, #1
 8000af8:	2300      	moveq	r3, #0
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <_ZL12MX_ADC1_Initv+0xf4>
		Error_Handler();
 8000b00:	f000 fb6e 	bl	80011e0 <Error_Handler>
	}

	/** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
	 */
	sConfigInjected.InjectedRank = 2;
 8000b04:	2302      	movs	r3, #2
 8000b06:	607b      	str	r3, [r7, #4]
	if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK) {
 8000b08:	463b      	mov	r3, r7
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4819      	ldr	r0, [pc, #100]	; (8000b74 <_ZL12MX_ADC1_Initv+0x164>)
 8000b0e:	f001 fbe7 	bl	80022e0 <HAL_ADCEx_InjectedConfigChannel>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	bf14      	ite	ne
 8000b18:	2301      	movne	r3, #1
 8000b1a:	2300      	moveq	r3, #0
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <_ZL12MX_ADC1_Initv+0x116>
		Error_Handler();
 8000b22:	f000 fb5d 	bl	80011e0 <Error_Handler>
	}

	/** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
	 */
	sConfigInjected.InjectedRank = 3;
 8000b26:	2303      	movs	r3, #3
 8000b28:	607b      	str	r3, [r7, #4]
	if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK) {
 8000b2a:	463b      	mov	r3, r7
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4811      	ldr	r0, [pc, #68]	; (8000b74 <_ZL12MX_ADC1_Initv+0x164>)
 8000b30:	f001 fbd6 	bl	80022e0 <HAL_ADCEx_InjectedConfigChannel>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	bf14      	ite	ne
 8000b3a:	2301      	movne	r3, #1
 8000b3c:	2300      	moveq	r3, #0
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <_ZL12MX_ADC1_Initv+0x138>
		Error_Handler();
 8000b44:	f000 fb4c 	bl	80011e0 <Error_Handler>
	}

	/** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
	 */
	sConfigInjected.InjectedRank = 4;
 8000b48:	2304      	movs	r3, #4
 8000b4a:	607b      	str	r3, [r7, #4]
	if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK) {
 8000b4c:	463b      	mov	r3, r7
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4808      	ldr	r0, [pc, #32]	; (8000b74 <_ZL12MX_ADC1_Initv+0x164>)
 8000b52:	f001 fbc5 	bl	80022e0 <HAL_ADCEx_InjectedConfigChannel>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	bf14      	ite	ne
 8000b5c:	2301      	movne	r3, #1
 8000b5e:	2300      	moveq	r3, #0
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <_ZL12MX_ADC1_Initv+0x15a>
		Error_Handler();
 8000b66:	f000 fb3b 	bl	80011e0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000b6a:	bf00      	nop
 8000b6c:	3730      	adds	r7, #48	; 0x30
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000090 	.word	0x20000090
 8000b78:	40012000 	.word	0x40012000
 8000b7c:	0f000001 	.word	0x0f000001
 8000b80:	000f0001 	.word	0x000f0001

08000b84 <_ZL12MX_SPI1_Initv>:

static void MX_SPI1_Init(void) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000b88:	4b1a      	ldr	r3, [pc, #104]	; (8000bf4 <_ZL12MX_SPI1_Initv+0x70>)
 8000b8a:	4a1b      	ldr	r2, [pc, #108]	; (8000bf8 <_ZL12MX_SPI1_Initv+0x74>)
 8000b8c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b8e:	4b19      	ldr	r3, [pc, #100]	; (8000bf4 <_ZL12MX_SPI1_Initv+0x70>)
 8000b90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b94:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b96:	4b17      	ldr	r3, [pc, #92]	; (8000bf4 <_ZL12MX_SPI1_Initv+0x70>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b9c:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <_ZL12MX_SPI1_Initv+0x70>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ba2:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <_ZL12MX_SPI1_Initv+0x70>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ba8:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <_ZL12MX_SPI1_Initv+0x70>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bae:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <_ZL12MX_SPI1_Initv+0x70>)
 8000bb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bb4:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000bb6:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <_ZL12MX_SPI1_Initv+0x70>)
 8000bb8:	2218      	movs	r2, #24
 8000bba:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bbc:	4b0d      	ldr	r3, [pc, #52]	; (8000bf4 <_ZL12MX_SPI1_Initv+0x70>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <_ZL12MX_SPI1_Initv+0x70>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bc8:	4b0a      	ldr	r3, [pc, #40]	; (8000bf4 <_ZL12MX_SPI1_Initv+0x70>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000bce:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <_ZL12MX_SPI1_Initv+0x70>)
 8000bd0:	220a      	movs	r2, #10
 8000bd2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000bd4:	4807      	ldr	r0, [pc, #28]	; (8000bf4 <_ZL12MX_SPI1_Initv+0x70>)
 8000bd6:	f002 ffff 	bl	8003bd8 <HAL_SPI_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	bf14      	ite	ne
 8000be0:	2301      	movne	r3, #1
 8000be2:	2300      	moveq	r3, #0
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <_ZL12MX_SPI1_Initv+0x6a>
		Error_Handler();
 8000bea:	f000 faf9 	bl	80011e0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000138 	.word	0x20000138
 8000bf8:	40013000 	.word	0x40013000

08000bfc <_ZL12MX_SPI2_Initv>:

static void MX_SPI2_Init(void) {
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8000c00:	4b1a      	ldr	r3, [pc, #104]	; (8000c6c <_ZL12MX_SPI2_Initv+0x70>)
 8000c02:	4a1b      	ldr	r2, [pc, #108]	; (8000c70 <_ZL12MX_SPI2_Initv+0x74>)
 8000c04:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c06:	4b19      	ldr	r3, [pc, #100]	; (8000c6c <_ZL12MX_SPI2_Initv+0x70>)
 8000c08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c0c:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000c0e:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <_ZL12MX_SPI2_Initv+0x70>)
 8000c10:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c14:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c16:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <_ZL12MX_SPI2_Initv+0x70>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c1c:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <_ZL12MX_SPI2_Initv+0x70>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c22:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <_ZL12MX_SPI2_Initv+0x70>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8000c28:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <_ZL12MX_SPI2_Initv+0x70>)
 8000c2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c2e:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c30:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <_ZL12MX_SPI2_Initv+0x70>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c36:	4b0d      	ldr	r3, [pc, #52]	; (8000c6c <_ZL12MX_SPI2_Initv+0x70>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c3c:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <_ZL12MX_SPI2_Initv+0x70>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c42:	4b0a      	ldr	r3, [pc, #40]	; (8000c6c <_ZL12MX_SPI2_Initv+0x70>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <_ZL12MX_SPI2_Initv+0x70>)
 8000c4a:	220a      	movs	r2, #10
 8000c4c:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8000c4e:	4807      	ldr	r0, [pc, #28]	; (8000c6c <_ZL12MX_SPI2_Initv+0x70>)
 8000c50:	f002 ffc2 	bl	8003bd8 <HAL_SPI_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	bf14      	ite	ne
 8000c5a:	2301      	movne	r3, #1
 8000c5c:	2300      	moveq	r3, #0
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <_ZL12MX_SPI2_Initv+0x6c>
		Error_Handler();
 8000c64:	f000 fabc 	bl	80011e0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20000190 	.word	0x20000190
 8000c70:	40003800 	.word	0x40003800

08000c74 <_ZL12MX_TIM2_Initv>:


static void MX_TIM2_Init(void) {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08a      	sub	sp, #40	; 0x28
 8000c78:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000c7a:	f107 0320 	add.w	r3, r7, #32
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000c84:	1d3b      	adds	r3, r7, #4
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
 8000c8c:	609a      	str	r2, [r3, #8]
 8000c8e:	60da      	str	r2, [r3, #12]
 8000c90:	611a      	str	r2, [r3, #16]
 8000c92:	615a      	str	r2, [r3, #20]
 8000c94:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000c96:	4b2a      	ldr	r3, [pc, #168]	; (8000d40 <_ZL12MX_TIM2_Initv+0xcc>)
 8000c98:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c9c:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8000c9e:	4b28      	ldr	r3, [pc, #160]	; (8000d40 <_ZL12MX_TIM2_Initv+0xcc>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca4:	4b26      	ldr	r3, [pc, #152]	; (8000d40 <_ZL12MX_TIM2_Initv+0xcc>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8000caa:	4b25      	ldr	r3, [pc, #148]	; (8000d40 <_ZL12MX_TIM2_Initv+0xcc>)
 8000cac:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb0:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb2:	4b23      	ldr	r3, [pc, #140]	; (8000d40 <_ZL12MX_TIM2_Initv+0xcc>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb8:	4b21      	ldr	r3, [pc, #132]	; (8000d40 <_ZL12MX_TIM2_Initv+0xcc>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8000cbe:	4820      	ldr	r0, [pc, #128]	; (8000d40 <_ZL12MX_TIM2_Initv+0xcc>)
 8000cc0:	f003 fd81 	bl	80047c6 <HAL_TIM_PWM_Init>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	bf14      	ite	ne
 8000cca:	2301      	movne	r3, #1
 8000ccc:	2300      	moveq	r3, #0
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <_ZL12MX_TIM2_Initv+0x64>
		Error_Handler();
 8000cd4:	f000 fa84 	bl	80011e0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000ce0:	f107 0320 	add.w	r3, r7, #32
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4816      	ldr	r0, [pc, #88]	; (8000d40 <_ZL12MX_TIM2_Initv+0xcc>)
 8000ce8:	f004 fb60 	bl	80053ac <HAL_TIMEx_MasterConfigSynchronization>
 8000cec:	4603      	mov	r3, r0
			!= HAL_OK) {
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	bf14      	ite	ne
 8000cf2:	2301      	movne	r3, #1
 8000cf4:	2300      	moveq	r3, #0
 8000cf6:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <_ZL12MX_TIM2_Initv+0x8c>
		Error_Handler();
 8000cfc:	f000 fa70 	bl	80011e0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d00:	2360      	movs	r3, #96	; 0x60
 8000d02:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 8000d10:	1d3b      	adds	r3, r7, #4
 8000d12:	2208      	movs	r2, #8
 8000d14:	4619      	mov	r1, r3
 8000d16:	480a      	ldr	r0, [pc, #40]	; (8000d40 <_ZL12MX_TIM2_Initv+0xcc>)
 8000d18:	f003 feac 	bl	8004a74 <HAL_TIM_PWM_ConfigChannel>
 8000d1c:	4603      	mov	r3, r0
			!= HAL_OK) {
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	bf14      	ite	ne
 8000d22:	2301      	movne	r3, #1
 8000d24:	2300      	moveq	r3, #0
 8000d26:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <_ZL12MX_TIM2_Initv+0xbc>
		Error_Handler();
 8000d2c:	f000 fa58 	bl	80011e0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8000d30:	4803      	ldr	r0, [pc, #12]	; (8000d40 <_ZL12MX_TIM2_Initv+0xcc>)
 8000d32:	f000 fc3d 	bl	80015b0 <HAL_TIM_MspPostInit>

}
 8000d36:	bf00      	nop
 8000d38:	3728      	adds	r7, #40	; 0x28
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	200001e8 	.word	0x200001e8

08000d44 <_ZL12MX_TIM4_Initv>:

static void MX_TIM4_Init(void) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08e      	sub	sp, #56	; 0x38
 8000d48:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000d4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	605a      	str	r2, [r3, #4]
 8000d54:	609a      	str	r2, [r3, #8]
 8000d56:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000d58:	f107 0320 	add.w	r3, r7, #32
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
 8000d70:	615a      	str	r2, [r3, #20]
 8000d72:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8000d74:	4b51      	ldr	r3, [pc, #324]	; (8000ebc <_ZL12MX_TIM4_Initv+0x178>)
 8000d76:	4a52      	ldr	r2, [pc, #328]	; (8000ec0 <_ZL12MX_TIM4_Initv+0x17c>)
 8000d78:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8000d7a:	4b50      	ldr	r3, [pc, #320]	; (8000ebc <_ZL12MX_TIM4_Initv+0x178>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d80:	4b4e      	ldr	r3, [pc, #312]	; (8000ebc <_ZL12MX_TIM4_Initv+0x178>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8000d86:	4b4d      	ldr	r3, [pc, #308]	; (8000ebc <_ZL12MX_TIM4_Initv+0x178>)
 8000d88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d8c:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d8e:	4b4b      	ldr	r3, [pc, #300]	; (8000ebc <_ZL12MX_TIM4_Initv+0x178>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d94:	4b49      	ldr	r3, [pc, #292]	; (8000ebc <_ZL12MX_TIM4_Initv+0x178>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8000d9a:	4848      	ldr	r0, [pc, #288]	; (8000ebc <_ZL12MX_TIM4_Initv+0x178>)
 8000d9c:	f003 fcc4 	bl	8004728 <HAL_TIM_Base_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	bf14      	ite	ne
 8000da6:	2301      	movne	r3, #1
 8000da8:	2300      	moveq	r3, #0
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <_ZL12MX_TIM4_Initv+0x70>
		Error_Handler();
 8000db0:	f000 fa16 	bl	80011e0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000db4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000db8:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8000dba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	483e      	ldr	r0, [pc, #248]	; (8000ebc <_ZL12MX_TIM4_Initv+0x178>)
 8000dc2:	f003 ff19 	bl	8004bf8 <HAL_TIM_ConfigClockSource>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	bf14      	ite	ne
 8000dcc:	2301      	movne	r3, #1
 8000dce:	2300      	moveq	r3, #0
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <_ZL12MX_TIM4_Initv+0x96>
		Error_Handler();
 8000dd6:	f000 fa03 	bl	80011e0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 8000dda:	4838      	ldr	r0, [pc, #224]	; (8000ebc <_ZL12MX_TIM4_Initv+0x178>)
 8000ddc:	f003 fcf3 	bl	80047c6 <HAL_TIM_PWM_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	bf14      	ite	ne
 8000de6:	2301      	movne	r3, #1
 8000de8:	2300      	moveq	r3, #0
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <_ZL12MX_TIM4_Initv+0xb0>
		Error_Handler();
 8000df0:	f000 f9f6 	bl	80011e0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df4:	2300      	movs	r3, #0
 8000df6:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8000dfc:	f107 0320 	add.w	r3, r7, #32
 8000e00:	4619      	mov	r1, r3
 8000e02:	482e      	ldr	r0, [pc, #184]	; (8000ebc <_ZL12MX_TIM4_Initv+0x178>)
 8000e04:	f004 fad2 	bl	80053ac <HAL_TIMEx_MasterConfigSynchronization>
 8000e08:	4603      	mov	r3, r0
			!= HAL_OK) {
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	bf14      	ite	ne
 8000e0e:	2301      	movne	r3, #1
 8000e10:	2300      	moveq	r3, #0
 8000e12:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <_ZL12MX_TIM4_Initv+0xd8>
		Error_Handler();
 8000e18:	f000 f9e2 	bl	80011e0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e1c:	2360      	movs	r3, #96	; 0x60
 8000e1e:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e24:	2300      	movs	r3, #0
 8000e26:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1)
 8000e2c:	1d3b      	adds	r3, r7, #4
 8000e2e:	2200      	movs	r2, #0
 8000e30:	4619      	mov	r1, r3
 8000e32:	4822      	ldr	r0, [pc, #136]	; (8000ebc <_ZL12MX_TIM4_Initv+0x178>)
 8000e34:	f003 fe1e 	bl	8004a74 <HAL_TIM_PWM_ConfigChannel>
 8000e38:	4603      	mov	r3, r0
			!= HAL_OK) {
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	bf14      	ite	ne
 8000e3e:	2301      	movne	r3, #1
 8000e40:	2300      	moveq	r3, #0
 8000e42:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1)
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <_ZL12MX_TIM4_Initv+0x108>
		Error_Handler();
 8000e48:	f000 f9ca 	bl	80011e0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2)
 8000e4c:	1d3b      	adds	r3, r7, #4
 8000e4e:	2204      	movs	r2, #4
 8000e50:	4619      	mov	r1, r3
 8000e52:	481a      	ldr	r0, [pc, #104]	; (8000ebc <_ZL12MX_TIM4_Initv+0x178>)
 8000e54:	f003 fe0e 	bl	8004a74 <HAL_TIM_PWM_ConfigChannel>
 8000e58:	4603      	mov	r3, r0
			!= HAL_OK) {
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	bf14      	ite	ne
 8000e5e:	2301      	movne	r3, #1
 8000e60:	2300      	moveq	r3, #0
 8000e62:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2)
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <_ZL12MX_TIM4_Initv+0x128>
		Error_Handler();
 8000e68:	f000 f9ba 	bl	80011e0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3)
 8000e6c:	1d3b      	adds	r3, r7, #4
 8000e6e:	2208      	movs	r2, #8
 8000e70:	4619      	mov	r1, r3
 8000e72:	4812      	ldr	r0, [pc, #72]	; (8000ebc <_ZL12MX_TIM4_Initv+0x178>)
 8000e74:	f003 fdfe 	bl	8004a74 <HAL_TIM_PWM_ConfigChannel>
 8000e78:	4603      	mov	r3, r0
			!= HAL_OK) {
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	bf14      	ite	ne
 8000e7e:	2301      	movne	r3, #1
 8000e80:	2300      	moveq	r3, #0
 8000e82:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3)
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <_ZL12MX_TIM4_Initv+0x148>
		Error_Handler();
 8000e88:	f000 f9aa 	bl	80011e0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4)
 8000e8c:	1d3b      	adds	r3, r7, #4
 8000e8e:	220c      	movs	r2, #12
 8000e90:	4619      	mov	r1, r3
 8000e92:	480a      	ldr	r0, [pc, #40]	; (8000ebc <_ZL12MX_TIM4_Initv+0x178>)
 8000e94:	f003 fdee 	bl	8004a74 <HAL_TIM_PWM_ConfigChannel>
 8000e98:	4603      	mov	r3, r0
			!= HAL_OK) {
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	bf14      	ite	ne
 8000e9e:	2301      	movne	r3, #1
 8000ea0:	2300      	moveq	r3, #0
 8000ea2:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4)
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <_ZL12MX_TIM4_Initv+0x168>
		Error_Handler();
 8000ea8:	f000 f99a 	bl	80011e0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 8000eac:	4803      	ldr	r0, [pc, #12]	; (8000ebc <_ZL12MX_TIM4_Initv+0x178>)
 8000eae:	f000 fb7f 	bl	80015b0 <HAL_TIM_MspPostInit>

}
 8000eb2:	bf00      	nop
 8000eb4:	3738      	adds	r7, #56	; 0x38
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000230 	.word	0x20000230
 8000ec0:	40000800 	.word	0x40000800

08000ec4 <_ZL12MX_TIM6_Initv>:

static void MX_TIM6_Init(void) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000eca:	463b      	mov	r3, r7
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 8000ed2:	4b1a      	ldr	r3, [pc, #104]	; (8000f3c <_ZL12MX_TIM6_Initv+0x78>)
 8000ed4:	4a1a      	ldr	r2, [pc, #104]	; (8000f40 <_ZL12MX_TIM6_Initv+0x7c>)
 8000ed6:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 0;
 8000ed8:	4b18      	ldr	r3, [pc, #96]	; (8000f3c <_ZL12MX_TIM6_Initv+0x78>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ede:	4b17      	ldr	r3, [pc, #92]	; (8000f3c <_ZL12MX_TIM6_Initv+0x78>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 65535;
 8000ee4:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <_ZL12MX_TIM6_Initv+0x78>)
 8000ee6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eea:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eec:	4b13      	ldr	r3, [pc, #76]	; (8000f3c <_ZL12MX_TIM6_Initv+0x78>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8000ef2:	4812      	ldr	r0, [pc, #72]	; (8000f3c <_ZL12MX_TIM6_Initv+0x78>)
 8000ef4:	f003 fc18 	bl	8004728 <HAL_TIM_Base_Init>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	bf14      	ite	ne
 8000efe:	2301      	movne	r3, #1
 8000f00:	2300      	moveq	r3, #0
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <_ZL12MX_TIM6_Initv+0x48>
		Error_Handler();
 8000f08:	f000 f96a 	bl	80011e0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f10:	2300      	movs	r3, #0
 8000f12:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig)
 8000f14:	463b      	mov	r3, r7
 8000f16:	4619      	mov	r1, r3
 8000f18:	4808      	ldr	r0, [pc, #32]	; (8000f3c <_ZL12MX_TIM6_Initv+0x78>)
 8000f1a:	f004 fa47 	bl	80053ac <HAL_TIMEx_MasterConfigSynchronization>
 8000f1e:	4603      	mov	r3, r0
			!= HAL_OK) {
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	bf14      	ite	ne
 8000f24:	2301      	movne	r3, #1
 8000f26:	2300      	moveq	r3, #0
 8000f28:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig)
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <_ZL12MX_TIM6_Initv+0x6e>
		Error_Handler();
 8000f2e:	f000 f957 	bl	80011e0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000278 	.word	0x20000278
 8000f40:	40001000 	.word	0x40001000

08000f44 <_ZL13MX_TIM14_Initv>:

static void MX_TIM14_Init(void) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
	/* USER CODE END TIM14_Init 0 */

	/* USER CODE BEGIN TIM14_Init 1 */

	/* USER CODE END TIM14_Init 1 */
	htim14.Instance = TIM14;
 8000f48:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <_ZL13MX_TIM14_Initv+0x48>)
 8000f4a:	4a11      	ldr	r2, [pc, #68]	; (8000f90 <_ZL13MX_TIM14_Initv+0x4c>)
 8000f4c:	601a      	str	r2, [r3, #0]
	htim14.Init.Prescaler = 8;
 8000f4e:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <_ZL13MX_TIM14_Initv+0x48>)
 8000f50:	2208      	movs	r2, #8
 8000f52:	605a      	str	r2, [r3, #4]
	htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f54:	4b0d      	ldr	r3, [pc, #52]	; (8000f8c <_ZL13MX_TIM14_Initv+0x48>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
	htim14.Init.Period = 65535;
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <_ZL13MX_TIM14_Initv+0x48>)
 8000f5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f60:	60da      	str	r2, [r3, #12]
	htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f62:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <_ZL13MX_TIM14_Initv+0x48>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
	htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f68:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <_ZL13MX_TIM14_Initv+0x48>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim14) != HAL_OK) {
 8000f6e:	4807      	ldr	r0, [pc, #28]	; (8000f8c <_ZL13MX_TIM14_Initv+0x48>)
 8000f70:	f003 fbda 	bl	8004728 <HAL_TIM_Base_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	bf14      	ite	ne
 8000f7a:	2301      	movne	r3, #1
 8000f7c:	2300      	moveq	r3, #0
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <_ZL13MX_TIM14_Initv+0x44>
		Error_Handler();
 8000f84:	f000 f92c 	bl	80011e0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM14_Init 2 */

	/* USER CODE END TIM14_Init 2 */

}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	200002c0 	.word	0x200002c0
 8000f90:	40002000 	.word	0x40002000

08000f94 <_ZL19MX_USART1_UART_Initv>:

static void MX_USART1_UART_Init(void) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000f98:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000f9a:	4a14      	ldr	r2, [pc, #80]	; (8000fec <_ZL19MX_USART1_UART_Initv+0x58>)
 8000f9c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000f9e:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000fa0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fa4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fa6:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000fac:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000fb2:	4b0d      	ldr	r3, [pc, #52]	; (8000fe8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000fb8:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000fba:	220c      	movs	r2, #12
 8000fbc:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fbe:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000fca:	4807      	ldr	r0, [pc, #28]	; (8000fe8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000fcc:	f004 fa7e 	bl	80054cc <HAL_UART_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	bf14      	ite	ne
 8000fd6:	2301      	movne	r3, #1
 8000fd8:	2300      	moveq	r3, #0
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <_ZL19MX_USART1_UART_Initv+0x50>
		Error_Handler();
 8000fe0:	f000 f8fe 	bl	80011e0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000308 	.word	0x20000308
 8000fec:	40011000 	.word	0x40011000

08000ff0 <_ZL11MX_DMA_Initv>:

static void MX_DMA_Init(void) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	607b      	str	r3, [r7, #4]
 8000ffa:	4b0c      	ldr	r3, [pc, #48]	; (800102c <_ZL11MX_DMA_Initv+0x3c>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	4a0b      	ldr	r2, [pc, #44]	; (800102c <_ZL11MX_DMA_Initv+0x3c>)
 8001000:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
 8001006:	4b09      	ldr	r3, [pc, #36]	; (800102c <_ZL11MX_DMA_Initv+0x3c>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001012:	2200      	movs	r2, #0
 8001014:	2100      	movs	r1, #0
 8001016:	2038      	movs	r0, #56	; 0x38
 8001018:	f001 fbd3 	bl	80027c2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800101c:	2038      	movs	r0, #56	; 0x38
 800101e:	f001 fbec 	bl	80027fa <HAL_NVIC_EnableIRQ>

}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40023800 	.word	0x40023800

08001030 <_ZL12MX_GPIO_Initv>:

static void MX_GPIO_Init(void) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b08a      	sub	sp, #40	; 0x28
 8001034:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001036:	f107 0314 	add.w	r3, r7, #20
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]
 8001044:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	613b      	str	r3, [r7, #16]
 800104a:	4b60      	ldr	r3, [pc, #384]	; (80011cc <_ZL12MX_GPIO_Initv+0x19c>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a5f      	ldr	r2, [pc, #380]	; (80011cc <_ZL12MX_GPIO_Initv+0x19c>)
 8001050:	f043 0304 	orr.w	r3, r3, #4
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b5d      	ldr	r3, [pc, #372]	; (80011cc <_ZL12MX_GPIO_Initv+0x19c>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0304 	and.w	r3, r3, #4
 800105e:	613b      	str	r3, [r7, #16]
 8001060:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	4b59      	ldr	r3, [pc, #356]	; (80011cc <_ZL12MX_GPIO_Initv+0x19c>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a58      	ldr	r2, [pc, #352]	; (80011cc <_ZL12MX_GPIO_Initv+0x19c>)
 800106c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b56      	ldr	r3, [pc, #344]	; (80011cc <_ZL12MX_GPIO_Initv+0x19c>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	4b52      	ldr	r3, [pc, #328]	; (80011cc <_ZL12MX_GPIO_Initv+0x19c>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a51      	ldr	r2, [pc, #324]	; (80011cc <_ZL12MX_GPIO_Initv+0x19c>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b4f      	ldr	r3, [pc, #316]	; (80011cc <_ZL12MX_GPIO_Initv+0x19c>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	607b      	str	r3, [r7, #4]
 800109e:	4b4b      	ldr	r3, [pc, #300]	; (80011cc <_ZL12MX_GPIO_Initv+0x19c>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a4a      	ldr	r2, [pc, #296]	; (80011cc <_ZL12MX_GPIO_Initv+0x19c>)
 80010a4:	f043 0302 	orr.w	r3, r3, #2
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b48      	ldr	r3, [pc, #288]	; (80011cc <_ZL12MX_GPIO_Initv+0x19c>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	603b      	str	r3, [r7, #0]
 80010ba:	4b44      	ldr	r3, [pc, #272]	; (80011cc <_ZL12MX_GPIO_Initv+0x19c>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	4a43      	ldr	r2, [pc, #268]	; (80011cc <_ZL12MX_GPIO_Initv+0x19c>)
 80010c0:	f043 0308 	orr.w	r3, r3, #8
 80010c4:	6313      	str	r3, [r2, #48]	; 0x30
 80010c6:	4b41      	ldr	r3, [pc, #260]	; (80011cc <_ZL12MX_GPIO_Initv+0x19c>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	f003 0308 	and.w	r3, r3, #8
 80010ce:	603b      	str	r3, [r7, #0]
 80010d0:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC,
 80010d2:	2200      	movs	r2, #0
 80010d4:	f641 51e7 	movw	r1, #7655	; 0x1de7
 80010d8:	483d      	ldr	r0, [pc, #244]	; (80011d0 <_ZL12MX_GPIO_Initv+0x1a0>)
 80010da:	f002 f8cd 	bl	8003278 <HAL_GPIO_WritePin>
			LED10_Pin | RF_EMITTER_Pin | D_C_Pin | DIAGONAL_EMITTER_Pin | CE_Pin
					| LF_EMITTER_Pin | CS_Pin | LED3_Pin | LED4_Pin | LED5_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED11_Pin | LED9_Pin | LED8_Pin, GPIO_PIN_RESET);
 80010de:	2200      	movs	r2, #0
 80010e0:	f641 0110 	movw	r1, #6160	; 0x1810
 80010e4:	483b      	ldr	r0, [pc, #236]	; (80011d4 <_ZL12MX_GPIO_Initv+0x1a4>)
 80010e6:	f002 f8c7 	bl	8003278 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LED7_Pin | LED1_Pin | LED2_Pin, GPIO_PIN_RESET);
 80010ea:	2200      	movs	r2, #0
 80010ec:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 80010f0:	4839      	ldr	r0, [pc, #228]	; (80011d8 <_ZL12MX_GPIO_Initv+0x1a8>)
 80010f2:	f002 f8c1 	bl	8003278 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2104      	movs	r1, #4
 80010fa:	4838      	ldr	r0, [pc, #224]	; (80011dc <_ZL12MX_GPIO_Initv+0x1ac>)
 80010fc:	f002 f8bc 	bl	8003278 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : TB1_Pin */
	GPIO_InitStruct.Pin = TB1_Pin;
 8001100:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001104:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001106:	2300      	movs	r3, #0
 8001108:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(TB1_GPIO_Port, &GPIO_InitStruct);
 800110e:	f107 0314 	add.w	r3, r7, #20
 8001112:	4619      	mov	r1, r3
 8001114:	482e      	ldr	r0, [pc, #184]	; (80011d0 <_ZL12MX_GPIO_Initv+0x1a0>)
 8001116:	f001 fefb 	bl	8002f10 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED10_Pin RF_EMITTER_Pin D_C_Pin DIAGONAL_EMITTER_Pin
	 CE_Pin LF_EMITTER_Pin CS_Pin LED3_Pin
	 LED4_Pin LED5_Pin */
	GPIO_InitStruct.Pin = LED10_Pin | RF_EMITTER_Pin | D_C_Pin
 800111a:	f641 53e7 	movw	r3, #7655	; 0x1de7
 800111e:	617b      	str	r3, [r7, #20]
			| DIAGONAL_EMITTER_Pin | CE_Pin | LF_EMITTER_Pin | CS_Pin | LED3_Pin
			| LED4_Pin | LED5_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001120:	2301      	movs	r3, #1
 8001122:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001128:	2300      	movs	r3, #0
 800112a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	4619      	mov	r1, r3
 8001132:	4827      	ldr	r0, [pc, #156]	; (80011d0 <_ZL12MX_GPIO_Initv+0x1a0>)
 8001134:	f001 feec 	bl	8002f10 <HAL_GPIO_Init>

	/*Configure GPIO pins : RENCHA_Pin RENCHB_Pin DRDY_Pin LENCHA_Pin */
	GPIO_InitStruct.Pin = RENCHA_Pin | RENCHB_Pin | DRDY_Pin | LENCHA_Pin;
 8001138:	f248 030b 	movw	r3, #32779	; 0x800b
 800113c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800113e:	2300      	movs	r3, #0
 8001140:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	4619      	mov	r1, r3
 800114c:	4822      	ldr	r0, [pc, #136]	; (80011d8 <_ZL12MX_GPIO_Initv+0x1a8>)
 800114e:	f001 fedf 	bl	8002f10 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB2 INT_Pin MISO_Pin LENCHB_Pin
	 BOOT0_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | INT_Pin | MISO_Pin | LENCHB_Pin
 8001152:	f244 432c 	movw	r3, #17452	; 0x442c
 8001156:	617b      	str	r3, [r7, #20]
			| BOOT0_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001158:	2300      	movs	r3, #0
 800115a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	4619      	mov	r1, r3
 8001166:	481b      	ldr	r0, [pc, #108]	; (80011d4 <_ZL12MX_GPIO_Initv+0x1a4>)
 8001168:	f001 fed2 	bl	8002f10 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED11_Pin LED9_Pin LED8_Pin */
	GPIO_InitStruct.Pin = LED11_Pin | LED9_Pin | LED8_Pin;
 800116c:	f641 0310 	movw	r3, #6160	; 0x1810
 8001170:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001172:	2301      	movs	r3, #1
 8001174:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117a:	2300      	movs	r3, #0
 800117c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117e:	f107 0314 	add.w	r3, r7, #20
 8001182:	4619      	mov	r1, r3
 8001184:	4813      	ldr	r0, [pc, #76]	; (80011d4 <_ZL12MX_GPIO_Initv+0x1a4>)
 8001186:	f001 fec3 	bl	8002f10 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED7_Pin LED1_Pin LED2_Pin */
	GPIO_InitStruct.Pin = LED7_Pin | LED1_Pin | LED2_Pin;
 800118a:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800118e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001190:	2301      	movs	r3, #1
 8001192:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001198:	2300      	movs	r3, #0
 800119a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	4619      	mov	r1, r3
 80011a2:	480d      	ldr	r0, [pc, #52]	; (80011d8 <_ZL12MX_GPIO_Initv+0x1a8>)
 80011a4:	f001 feb4 	bl	8002f10 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED6_Pin */
	GPIO_InitStruct.Pin = LED6_Pin;
 80011a8:	2304      	movs	r3, #4
 80011aa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ac:	2301      	movs	r3, #1
 80011ae:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b4:	2300      	movs	r3, #0
 80011b6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED6_GPIO_Port, &GPIO_InitStruct);
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	4619      	mov	r1, r3
 80011be:	4807      	ldr	r0, [pc, #28]	; (80011dc <_ZL12MX_GPIO_Initv+0x1ac>)
 80011c0:	f001 fea6 	bl	8002f10 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80011c4:	bf00      	nop
 80011c6:	3728      	adds	r7, #40	; 0x28
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40020800 	.word	0x40020800
 80011d4:	40020400 	.word	0x40020400
 80011d8:	40020000 	.word	0x40020000
 80011dc:	40020c00 	.word	0x40020c00

080011e0 <Error_Handler>:

void Error_Handler(void) {
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011e4:	b672      	cpsid	i
}
 80011e6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80011e8:	e7fe      	b.n	80011e8 <Error_Handler+0x8>

080011ea <_Z10searchIdlev>:
//         3- West



int searchIdle()
{
 80011ea:	b480      	push	{r7}
 80011ec:	af00      	add	r7, sp, #0

    return 2;
 80011ee:	2302      	movs	r3, #2
    //         return 4;
    //     }

    // }

}
 80011f0:	4618      	mov	r0, r3
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <_Z13searchForwardv>:

int searchForward()
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0
    //         return 4;
    //     }

    // }

    return 3;
 80011fe:	2303      	movs	r3, #3

}
 8001200:	4618      	mov	r0, r3
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <_Z14searchBackwardv>:

int searchBackward()
{
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0
    //         return 4;
    //     }

    // }

    return 7;
 800120e:	2307      	movs	r3, #7
}
 8001210:	4618      	mov	r0, r3
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
	...

0800121c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	607b      	str	r3, [r7, #4]
 8001226:	4b10      	ldr	r3, [pc, #64]	; (8001268 <HAL_MspInit+0x4c>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122a:	4a0f      	ldr	r2, [pc, #60]	; (8001268 <HAL_MspInit+0x4c>)
 800122c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001230:	6453      	str	r3, [r2, #68]	; 0x44
 8001232:	4b0d      	ldr	r3, [pc, #52]	; (8001268 <HAL_MspInit+0x4c>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	603b      	str	r3, [r7, #0]
 8001242:	4b09      	ldr	r3, [pc, #36]	; (8001268 <HAL_MspInit+0x4c>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	4a08      	ldr	r2, [pc, #32]	; (8001268 <HAL_MspInit+0x4c>)
 8001248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800124c:	6413      	str	r3, [r2, #64]	; 0x40
 800124e:	4b06      	ldr	r3, [pc, #24]	; (8001268 <HAL_MspInit+0x4c>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	40023800 	.word	0x40023800

0800126c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08c      	sub	sp, #48	; 0x30
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 031c 	add.w	r3, r7, #28
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a49      	ldr	r2, [pc, #292]	; (80013b0 <HAL_ADC_MspInit+0x144>)
 800128a:	4293      	cmp	r3, r2
 800128c:	f040 808b 	bne.w	80013a6 <HAL_ADC_MspInit+0x13a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001290:	2300      	movs	r3, #0
 8001292:	61bb      	str	r3, [r7, #24]
 8001294:	4b47      	ldr	r3, [pc, #284]	; (80013b4 <HAL_ADC_MspInit+0x148>)
 8001296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001298:	4a46      	ldr	r2, [pc, #280]	; (80013b4 <HAL_ADC_MspInit+0x148>)
 800129a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800129e:	6453      	str	r3, [r2, #68]	; 0x44
 80012a0:	4b44      	ldr	r3, [pc, #272]	; (80013b4 <HAL_ADC_MspInit+0x148>)
 80012a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012a8:	61bb      	str	r3, [r7, #24]
 80012aa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]
 80012b0:	4b40      	ldr	r3, [pc, #256]	; (80013b4 <HAL_ADC_MspInit+0x148>)
 80012b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b4:	4a3f      	ldr	r2, [pc, #252]	; (80013b4 <HAL_ADC_MspInit+0x148>)
 80012b6:	f043 0304 	orr.w	r3, r3, #4
 80012ba:	6313      	str	r3, [r2, #48]	; 0x30
 80012bc:	4b3d      	ldr	r3, [pc, #244]	; (80013b4 <HAL_ADC_MspInit+0x148>)
 80012be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c0:	f003 0304 	and.w	r3, r3, #4
 80012c4:	617b      	str	r3, [r7, #20]
 80012c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c8:	2300      	movs	r3, #0
 80012ca:	613b      	str	r3, [r7, #16]
 80012cc:	4b39      	ldr	r3, [pc, #228]	; (80013b4 <HAL_ADC_MspInit+0x148>)
 80012ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d0:	4a38      	ldr	r2, [pc, #224]	; (80013b4 <HAL_ADC_MspInit+0x148>)
 80012d2:	f043 0301 	orr.w	r3, r3, #1
 80012d6:	6313      	str	r3, [r2, #48]	; 0x30
 80012d8:	4b36      	ldr	r3, [pc, #216]	; (80013b4 <HAL_ADC_MspInit+0x148>)
 80012da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012dc:	f003 0301 	and.w	r3, r3, #1
 80012e0:	613b      	str	r3, [r7, #16]
 80012e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e4:	2300      	movs	r3, #0
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	4b32      	ldr	r3, [pc, #200]	; (80013b4 <HAL_ADC_MspInit+0x148>)
 80012ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ec:	4a31      	ldr	r2, [pc, #196]	; (80013b4 <HAL_ADC_MspInit+0x148>)
 80012ee:	f043 0302 	orr.w	r3, r3, #2
 80012f2:	6313      	str	r3, [r2, #48]	; 0x30
 80012f4:	4b2f      	ldr	r3, [pc, #188]	; (80013b4 <HAL_ADC_MspInit+0x148>)
 80012f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f8:	f003 0302 	and.w	r3, r3, #2
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PC4     ------> ADC1_IN14
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = VOL_METER_Pin|R_RECEIVER_Pin;
 8001300:	2318      	movs	r3, #24
 8001302:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001304:	2303      	movs	r3, #3
 8001306:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800130c:	f107 031c 	add.w	r3, r7, #28
 8001310:	4619      	mov	r1, r3
 8001312:	4829      	ldr	r0, [pc, #164]	; (80013b8 <HAL_ADC_MspInit+0x14c>)
 8001314:	f001 fdfc 	bl	8002f10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RF_RECEIVER_Pin;
 8001318:	2310      	movs	r3, #16
 800131a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800131c:	2303      	movs	r3, #3
 800131e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RF_RECEIVER_GPIO_Port, &GPIO_InitStruct);
 8001324:	f107 031c 	add.w	r3, r7, #28
 8001328:	4619      	mov	r1, r3
 800132a:	4824      	ldr	r0, [pc, #144]	; (80013bc <HAL_ADC_MspInit+0x150>)
 800132c:	f001 fdf0 	bl	8002f10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = L_RECEIVER_Pin|LF_RECEIVER_Pin;
 8001330:	2303      	movs	r3, #3
 8001332:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001334:	2303      	movs	r3, #3
 8001336:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800133c:	f107 031c 	add.w	r3, r7, #28
 8001340:	4619      	mov	r1, r3
 8001342:	481f      	ldr	r0, [pc, #124]	; (80013c0 <HAL_ADC_MspInit+0x154>)
 8001344:	f001 fde4 	bl	8002f10 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001348:	4b1e      	ldr	r3, [pc, #120]	; (80013c4 <HAL_ADC_MspInit+0x158>)
 800134a:	4a1f      	ldr	r2, [pc, #124]	; (80013c8 <HAL_ADC_MspInit+0x15c>)
 800134c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800134e:	4b1d      	ldr	r3, [pc, #116]	; (80013c4 <HAL_ADC_MspInit+0x158>)
 8001350:	2200      	movs	r2, #0
 8001352:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001354:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <HAL_ADC_MspInit+0x158>)
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800135a:	4b1a      	ldr	r3, [pc, #104]	; (80013c4 <HAL_ADC_MspInit+0x158>)
 800135c:	2200      	movs	r2, #0
 800135e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001360:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <HAL_ADC_MspInit+0x158>)
 8001362:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001366:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001368:	4b16      	ldr	r3, [pc, #88]	; (80013c4 <HAL_ADC_MspInit+0x158>)
 800136a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800136e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001370:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <HAL_ADC_MspInit+0x158>)
 8001372:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001376:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001378:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <HAL_ADC_MspInit+0x158>)
 800137a:	2200      	movs	r2, #0
 800137c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800137e:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <HAL_ADC_MspInit+0x158>)
 8001380:	2200      	movs	r2, #0
 8001382:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001384:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <HAL_ADC_MspInit+0x158>)
 8001386:	2200      	movs	r2, #0
 8001388:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800138a:	480e      	ldr	r0, [pc, #56]	; (80013c4 <HAL_ADC_MspInit+0x158>)
 800138c:	f001 fa50 	bl	8002830 <HAL_DMA_Init>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <HAL_ADC_MspInit+0x12e>
    {
      Error_Handler();
 8001396:	f7ff ff23 	bl	80011e0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a09      	ldr	r2, [pc, #36]	; (80013c4 <HAL_ADC_MspInit+0x158>)
 800139e:	639a      	str	r2, [r3, #56]	; 0x38
 80013a0:	4a08      	ldr	r2, [pc, #32]	; (80013c4 <HAL_ADC_MspInit+0x158>)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013a6:	bf00      	nop
 80013a8:	3730      	adds	r7, #48	; 0x30
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40012000 	.word	0x40012000
 80013b4:	40023800 	.word	0x40023800
 80013b8:	40020800 	.word	0x40020800
 80013bc:	40020000 	.word	0x40020000
 80013c0:	40020400 	.word	0x40020400
 80013c4:	200000d8 	.word	0x200000d8
 80013c8:	40026410 	.word	0x40026410

080013cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08c      	sub	sp, #48	; 0x30
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	f107 031c 	add.w	r3, r7, #28
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a32      	ldr	r2, [pc, #200]	; (80014b4 <HAL_SPI_MspInit+0xe8>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d12c      	bne.n	8001448 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	61bb      	str	r3, [r7, #24]
 80013f2:	4b31      	ldr	r3, [pc, #196]	; (80014b8 <HAL_SPI_MspInit+0xec>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f6:	4a30      	ldr	r2, [pc, #192]	; (80014b8 <HAL_SPI_MspInit+0xec>)
 80013f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013fc:	6453      	str	r3, [r2, #68]	; 0x44
 80013fe:	4b2e      	ldr	r3, [pc, #184]	; (80014b8 <HAL_SPI_MspInit+0xec>)
 8001400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001402:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001406:	61bb      	str	r3, [r7, #24]
 8001408:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	617b      	str	r3, [r7, #20]
 800140e:	4b2a      	ldr	r3, [pc, #168]	; (80014b8 <HAL_SPI_MspInit+0xec>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	4a29      	ldr	r2, [pc, #164]	; (80014b8 <HAL_SPI_MspInit+0xec>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6313      	str	r3, [r2, #48]	; 0x30
 800141a:	4b27      	ldr	r3, [pc, #156]	; (80014b8 <HAL_SPI_MspInit+0xec>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	617b      	str	r3, [r7, #20]
 8001424:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|SDO_Pin|SDI_Pin;
 8001426:	23e0      	movs	r3, #224	; 0xe0
 8001428:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142a:	2302      	movs	r3, #2
 800142c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001432:	2303      	movs	r3, #3
 8001434:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001436:	2305      	movs	r3, #5
 8001438:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143a:	f107 031c 	add.w	r3, r7, #28
 800143e:	4619      	mov	r1, r3
 8001440:	481e      	ldr	r0, [pc, #120]	; (80014bc <HAL_SPI_MspInit+0xf0>)
 8001442:	f001 fd65 	bl	8002f10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001446:	e031      	b.n	80014ac <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a1c      	ldr	r2, [pc, #112]	; (80014c0 <HAL_SPI_MspInit+0xf4>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d12c      	bne.n	80014ac <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	613b      	str	r3, [r7, #16]
 8001456:	4b18      	ldr	r3, [pc, #96]	; (80014b8 <HAL_SPI_MspInit+0xec>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	4a17      	ldr	r2, [pc, #92]	; (80014b8 <HAL_SPI_MspInit+0xec>)
 800145c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001460:	6413      	str	r3, [r2, #64]	; 0x40
 8001462:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <HAL_SPI_MspInit+0xec>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800146a:	613b      	str	r3, [r7, #16]
 800146c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <HAL_SPI_MspInit+0xec>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	4a10      	ldr	r2, [pc, #64]	; (80014b8 <HAL_SPI_MspInit+0xec>)
 8001478:	f043 0302 	orr.w	r3, r3, #2
 800147c:	6313      	str	r3, [r2, #48]	; 0x30
 800147e:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <HAL_SPI_MspInit+0xec>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CLK_Pin|DATA_IN_Pin;
 800148a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800148e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001490:	2302      	movs	r3, #2
 8001492:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001498:	2303      	movs	r3, #3
 800149a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800149c:	2305      	movs	r3, #5
 800149e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a0:	f107 031c 	add.w	r3, r7, #28
 80014a4:	4619      	mov	r1, r3
 80014a6:	4807      	ldr	r0, [pc, #28]	; (80014c4 <HAL_SPI_MspInit+0xf8>)
 80014a8:	f001 fd32 	bl	8002f10 <HAL_GPIO_Init>
}
 80014ac:	bf00      	nop
 80014ae:	3730      	adds	r7, #48	; 0x30
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40013000 	.word	0x40013000
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40020000 	.word	0x40020000
 80014c0:	40003800 	.word	0x40003800
 80014c4:	40020400 	.word	0x40020400

080014c8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014d8:	d10d      	bne.n	80014f6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	4b09      	ldr	r3, [pc, #36]	; (8001504 <HAL_TIM_PWM_MspInit+0x3c>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	4a08      	ldr	r2, [pc, #32]	; (8001504 <HAL_TIM_PWM_MspInit+0x3c>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ea:	4b06      	ldr	r3, [pc, #24]	; (8001504 <HAL_TIM_PWM_MspInit+0x3c>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014f6:	bf00      	nop
 80014f8:	3714      	adds	r7, #20
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	40023800 	.word	0x40023800

08001508 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a22      	ldr	r2, [pc, #136]	; (80015a0 <HAL_TIM_Base_MspInit+0x98>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d10e      	bne.n	8001538 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
 800151e:	4b21      	ldr	r3, [pc, #132]	; (80015a4 <HAL_TIM_Base_MspInit+0x9c>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	4a20      	ldr	r2, [pc, #128]	; (80015a4 <HAL_TIM_Base_MspInit+0x9c>)
 8001524:	f043 0304 	orr.w	r3, r3, #4
 8001528:	6413      	str	r3, [r2, #64]	; 0x40
 800152a:	4b1e      	ldr	r3, [pc, #120]	; (80015a4 <HAL_TIM_Base_MspInit+0x9c>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	f003 0304 	and.w	r3, r3, #4
 8001532:	617b      	str	r3, [r7, #20]
 8001534:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001536:	e02e      	b.n	8001596 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM6)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a1a      	ldr	r2, [pc, #104]	; (80015a8 <HAL_TIM_Base_MspInit+0xa0>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d10e      	bne.n	8001560 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	613b      	str	r3, [r7, #16]
 8001546:	4b17      	ldr	r3, [pc, #92]	; (80015a4 <HAL_TIM_Base_MspInit+0x9c>)
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	4a16      	ldr	r2, [pc, #88]	; (80015a4 <HAL_TIM_Base_MspInit+0x9c>)
 800154c:	f043 0310 	orr.w	r3, r3, #16
 8001550:	6413      	str	r3, [r2, #64]	; 0x40
 8001552:	4b14      	ldr	r3, [pc, #80]	; (80015a4 <HAL_TIM_Base_MspInit+0x9c>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	f003 0310 	and.w	r3, r3, #16
 800155a:	613b      	str	r3, [r7, #16]
 800155c:	693b      	ldr	r3, [r7, #16]
}
 800155e:	e01a      	b.n	8001596 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM14)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a11      	ldr	r2, [pc, #68]	; (80015ac <HAL_TIM_Base_MspInit+0xa4>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d115      	bne.n	8001596 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	4b0d      	ldr	r3, [pc, #52]	; (80015a4 <HAL_TIM_Base_MspInit+0x9c>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	4a0c      	ldr	r2, [pc, #48]	; (80015a4 <HAL_TIM_Base_MspInit+0x9c>)
 8001574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001578:	6413      	str	r3, [r2, #64]	; 0x40
 800157a:	4b0a      	ldr	r3, [pc, #40]	; (80015a4 <HAL_TIM_Base_MspInit+0x9c>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8001586:	2200      	movs	r2, #0
 8001588:	2100      	movs	r1, #0
 800158a:	202d      	movs	r0, #45	; 0x2d
 800158c:	f001 f919 	bl	80027c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001590:	202d      	movs	r0, #45	; 0x2d
 8001592:	f001 f932 	bl	80027fa <HAL_NVIC_EnableIRQ>
}
 8001596:	bf00      	nop
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40000800 	.word	0x40000800
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40001000 	.word	0x40001000
 80015ac:	40002000 	.word	0x40002000

080015b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08a      	sub	sp, #40	; 0x28
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015d0:	d11e      	bne.n	8001610 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	613b      	str	r3, [r7, #16]
 80015d6:	4b22      	ldr	r3, [pc, #136]	; (8001660 <HAL_TIM_MspPostInit+0xb0>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	4a21      	ldr	r2, [pc, #132]	; (8001660 <HAL_TIM_MspPostInit+0xb0>)
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	6313      	str	r3, [r2, #48]	; 0x30
 80015e2:	4b1f      	ldr	r3, [pc, #124]	; (8001660 <HAL_TIM_MspPostInit+0xb0>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	613b      	str	r3, [r7, #16]
 80015ec:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 80015ee:	2304      	movs	r3, #4
 80015f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f2:	2302      	movs	r3, #2
 80015f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fa:	2300      	movs	r3, #0
 80015fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015fe:	2301      	movs	r3, #1
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001602:	f107 0314 	add.w	r3, r7, #20
 8001606:	4619      	mov	r1, r3
 8001608:	4816      	ldr	r0, [pc, #88]	; (8001664 <HAL_TIM_MspPostInit+0xb4>)
 800160a:	f001 fc81 	bl	8002f10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800160e:	e023      	b.n	8001658 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a14      	ldr	r2, [pc, #80]	; (8001668 <HAL_TIM_MspPostInit+0xb8>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d11e      	bne.n	8001658 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	4b10      	ldr	r3, [pc, #64]	; (8001660 <HAL_TIM_MspPostInit+0xb0>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	4a0f      	ldr	r2, [pc, #60]	; (8001660 <HAL_TIM_MspPostInit+0xb0>)
 8001624:	f043 0302 	orr.w	r3, r3, #2
 8001628:	6313      	str	r3, [r2, #48]	; 0x30
 800162a:	4b0d      	ldr	r3, [pc, #52]	; (8001660 <HAL_TIM_MspPostInit+0xb0>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LPWMA_Pin|LPWMB_Pin|RPWMA_Pin|RPWMB_Pin;
 8001636:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800163a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163c:	2302      	movs	r3, #2
 800163e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001644:	2300      	movs	r3, #0
 8001646:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001648:	2302      	movs	r3, #2
 800164a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	4619      	mov	r1, r3
 8001652:	4806      	ldr	r0, [pc, #24]	; (800166c <HAL_TIM_MspPostInit+0xbc>)
 8001654:	f001 fc5c 	bl	8002f10 <HAL_GPIO_Init>
}
 8001658:	bf00      	nop
 800165a:	3728      	adds	r7, #40	; 0x28
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40023800 	.word	0x40023800
 8001664:	40020000 	.word	0x40020000
 8001668:	40000800 	.word	0x40000800
 800166c:	40020400 	.word	0x40020400

08001670 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08a      	sub	sp, #40	; 0x28
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001678:	f107 0314 	add.w	r3, r7, #20
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a19      	ldr	r2, [pc, #100]	; (80016f4 <HAL_UART_MspInit+0x84>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d12c      	bne.n	80016ec <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	613b      	str	r3, [r7, #16]
 8001696:	4b18      	ldr	r3, [pc, #96]	; (80016f8 <HAL_UART_MspInit+0x88>)
 8001698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169a:	4a17      	ldr	r2, [pc, #92]	; (80016f8 <HAL_UART_MspInit+0x88>)
 800169c:	f043 0310 	orr.w	r3, r3, #16
 80016a0:	6453      	str	r3, [r2, #68]	; 0x44
 80016a2:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <HAL_UART_MspInit+0x88>)
 80016a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a6:	f003 0310 	and.w	r3, r3, #16
 80016aa:	613b      	str	r3, [r7, #16]
 80016ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <HAL_UART_MspInit+0x88>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a10      	ldr	r2, [pc, #64]	; (80016f8 <HAL_UART_MspInit+0x88>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b0e      	ldr	r3, [pc, #56]	; (80016f8 <HAL_UART_MspInit+0x88>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 80016ca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80016ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d0:	2302      	movs	r3, #2
 80016d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d8:	2303      	movs	r3, #3
 80016da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016dc:	2307      	movs	r3, #7
 80016de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	4619      	mov	r1, r3
 80016e6:	4805      	ldr	r0, [pc, #20]	; (80016fc <HAL_UART_MspInit+0x8c>)
 80016e8:	f001 fc12 	bl	8002f10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80016ec:	bf00      	nop
 80016ee:	3728      	adds	r7, #40	; 0x28
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40011000 	.word	0x40011000
 80016f8:	40023800 	.word	0x40023800
 80016fc:	40020000 	.word	0x40020000

08001700 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001704:	e7fe      	b.n	8001704 <NMI_Handler+0x4>

08001706 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800170a:	e7fe      	b.n	800170a <HardFault_Handler+0x4>

0800170c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001710:	e7fe      	b.n	8001710 <MemManage_Handler+0x4>

08001712 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001716:	e7fe      	b.n	8001716 <BusFault_Handler+0x4>

08001718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800171c:	e7fe      	b.n	800171c <UsageFault_Handler+0x4>

0800171e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800174c:	f000 f97c 	bl	8001a48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}

08001754 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001758:	4802      	ldr	r0, [pc, #8]	; (8001764 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800175a:	f003 f883 	bl	8004864 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	200002c0 	.word	0x200002c0

08001768 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800176c:	4802      	ldr	r0, [pc, #8]	; (8001778 <DMA2_Stream0_IRQHandler+0x10>)
 800176e:	f001 f965 	bl	8002a3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	200000d8 	.word	0x200000d8

0800177c <_Z4idlev>:

void InitMouse() {

}

int idle() {
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0

	while (1) {
		if (HAL_GPIO_ReadPin(TB1_GPIO_Port, TB1_Pin)) {
 8001780:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001784:	4809      	ldr	r0, [pc, #36]	; (80017ac <_Z4idlev+0x30>)
 8001786:	f001 fd5f 	bl	8003248 <HAL_GPIO_ReadPin>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	bf14      	ite	ne
 8001790:	2301      	movne	r3, #1
 8001792:	2300      	moveq	r3, #0
 8001794:	b2db      	uxtb	r3, r3
 8001796:	2b00      	cmp	r3, #0
 8001798:	d100      	bne.n	800179c <_Z4idlev+0x20>
 800179a:	e7f1      	b.n	8001780 <_Z4idlev+0x4>
			break;
 800179c:	bf00      	nop
		}
	}
	HAL_Delay(1000);
 800179e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017a2:	f000 f971 	bl	8001a88 <HAL_Delay>
	return 1;
 80017a6:	2301      	movs	r3, #1
	//if button press return 1
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40020800 	.word	0x40020800

080017b0 <_Z11speedAdjustv>:

int speedAdjust() {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
//	     }
//	     if(RighIrBlink())
//	     {
//	         speed-=10;
//	     }
			if (HAL_GPIO_ReadPin(TB1_GPIO_Port, TB1_Pin)) {
 80017b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017b8:	4809      	ldr	r0, [pc, #36]	; (80017e0 <_Z11speedAdjustv+0x30>)
 80017ba:	f001 fd45 	bl	8003248 <HAL_GPIO_ReadPin>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	bf14      	ite	ne
 80017c4:	2301      	movne	r3, #1
 80017c6:	2300      	moveq	r3, #0
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d100      	bne.n	80017d0 <_Z11speedAdjustv+0x20>
 80017ce:	e7f1      	b.n	80017b4 <_Z11speedAdjustv+0x4>
				break;
 80017d0:	bf00      	nop
			}

	 }
	 HAL_Delay(1000);
 80017d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017d6:	f000 f957 	bl	8001a88 <HAL_Delay>
	 return 0;
 80017da:	2300      	movs	r3, #0

}
 80017dc:	4618      	mov	r0, r3
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40020800 	.word	0x40020800

080017e4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b086      	sub	sp, #24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]
 80017f4:	e00a      	b.n	800180c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017f6:	f3af 8000 	nop.w
 80017fa:	4601      	mov	r1, r0
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	1c5a      	adds	r2, r3, #1
 8001800:	60ba      	str	r2, [r7, #8]
 8001802:	b2ca      	uxtb	r2, r1
 8001804:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	3301      	adds	r3, #1
 800180a:	617b      	str	r3, [r7, #20]
 800180c:	697a      	ldr	r2, [r7, #20]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	429a      	cmp	r2, r3
 8001812:	dbf0      	blt.n	80017f6 <_read+0x12>
  }

  return len;
 8001814:	687b      	ldr	r3, [r7, #4]
}
 8001816:	4618      	mov	r0, r3
 8001818:	3718      	adds	r7, #24
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b086      	sub	sp, #24
 8001822:	af00      	add	r7, sp, #0
 8001824:	60f8      	str	r0, [r7, #12]
 8001826:	60b9      	str	r1, [r7, #8]
 8001828:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800182a:	2300      	movs	r3, #0
 800182c:	617b      	str	r3, [r7, #20]
 800182e:	e009      	b.n	8001844 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	1c5a      	adds	r2, r3, #1
 8001834:	60ba      	str	r2, [r7, #8]
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	3301      	adds	r3, #1
 8001842:	617b      	str	r3, [r7, #20]
 8001844:	697a      	ldr	r2, [r7, #20]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	429a      	cmp	r2, r3
 800184a:	dbf1      	blt.n	8001830 <_write+0x12>
  }
  return len;
 800184c:	687b      	ldr	r3, [r7, #4]
}
 800184e:	4618      	mov	r0, r3
 8001850:	3718      	adds	r7, #24
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <_close>:

int _close(int file)
{
 8001856:	b480      	push	{r7}
 8001858:	b083      	sub	sp, #12
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800185e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001862:	4618      	mov	r0, r3
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800186e:	b480      	push	{r7}
 8001870:	b083      	sub	sp, #12
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
 8001876:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800187e:	605a      	str	r2, [r3, #4]
  return 0;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr

0800188e <_isatty>:

int _isatty(int file)
{
 800188e:	b480      	push	{r7}
 8001890:	b083      	sub	sp, #12
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001896:	2301      	movs	r3, #1
}
 8001898:	4618      	mov	r0, r3
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3714      	adds	r7, #20
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
	...

080018c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018c8:	4a14      	ldr	r2, [pc, #80]	; (800191c <_sbrk+0x5c>)
 80018ca:	4b15      	ldr	r3, [pc, #84]	; (8001920 <_sbrk+0x60>)
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018d4:	4b13      	ldr	r3, [pc, #76]	; (8001924 <_sbrk+0x64>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d102      	bne.n	80018e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018dc:	4b11      	ldr	r3, [pc, #68]	; (8001924 <_sbrk+0x64>)
 80018de:	4a12      	ldr	r2, [pc, #72]	; (8001928 <_sbrk+0x68>)
 80018e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018e2:	4b10      	ldr	r3, [pc, #64]	; (8001924 <_sbrk+0x64>)
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4413      	add	r3, r2
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d207      	bcs.n	8001900 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018f0:	f004 fbae 	bl	8006050 <__errno>
 80018f4:	4603      	mov	r3, r0
 80018f6:	220c      	movs	r2, #12
 80018f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018fa:	f04f 33ff 	mov.w	r3, #4294967295
 80018fe:	e009      	b.n	8001914 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001900:	4b08      	ldr	r3, [pc, #32]	; (8001924 <_sbrk+0x64>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001906:	4b07      	ldr	r3, [pc, #28]	; (8001924 <_sbrk+0x64>)
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4413      	add	r3, r2
 800190e:	4a05      	ldr	r2, [pc, #20]	; (8001924 <_sbrk+0x64>)
 8001910:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001912:	68fb      	ldr	r3, [r7, #12]
}
 8001914:	4618      	mov	r0, r3
 8001916:	3718      	adds	r7, #24
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	20020000 	.word	0x20020000
 8001920:	00000400 	.word	0x00000400
 8001924:	20000364 	.word	0x20000364
 8001928:	200004b8 	.word	0x200004b8

0800192c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001930:	4b06      	ldr	r3, [pc, #24]	; (800194c <SystemInit+0x20>)
 8001932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001936:	4a05      	ldr	r2, [pc, #20]	; (800194c <SystemInit+0x20>)
 8001938:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800193c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	e000ed00 	.word	0xe000ed00

08001950 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001950:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001988 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001954:	480d      	ldr	r0, [pc, #52]	; (800198c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001956:	490e      	ldr	r1, [pc, #56]	; (8001990 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001958:	4a0e      	ldr	r2, [pc, #56]	; (8001994 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800195a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800195c:	e002      	b.n	8001964 <LoopCopyDataInit>

0800195e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800195e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001960:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001962:	3304      	adds	r3, #4

08001964 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001964:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001966:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001968:	d3f9      	bcc.n	800195e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800196a:	4a0b      	ldr	r2, [pc, #44]	; (8001998 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800196c:	4c0b      	ldr	r4, [pc, #44]	; (800199c <LoopFillZerobss+0x26>)
  movs r3, #0
 800196e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001970:	e001      	b.n	8001976 <LoopFillZerobss>

08001972 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001972:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001974:	3204      	adds	r2, #4

08001976 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001976:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001978:	d3fb      	bcc.n	8001972 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800197a:	f7ff ffd7 	bl	800192c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800197e:	f004 fb6d 	bl	800605c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001982:	f7fe fed1 	bl	8000728 <main>
  bx  lr    
 8001986:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001988:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800198c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001990:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001994:	080069e8 	.word	0x080069e8
  ldr r2, =_sbss
 8001998:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800199c:	200004b8 	.word	0x200004b8

080019a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019a0:	e7fe      	b.n	80019a0 <ADC_IRQHandler>
	...

080019a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019a8:	4b0e      	ldr	r3, [pc, #56]	; (80019e4 <HAL_Init+0x40>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a0d      	ldr	r2, [pc, #52]	; (80019e4 <HAL_Init+0x40>)
 80019ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019b4:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <HAL_Init+0x40>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a0a      	ldr	r2, [pc, #40]	; (80019e4 <HAL_Init+0x40>)
 80019ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019c0:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <HAL_Init+0x40>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a07      	ldr	r2, [pc, #28]	; (80019e4 <HAL_Init+0x40>)
 80019c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019cc:	2003      	movs	r0, #3
 80019ce:	f000 feed 	bl	80027ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019d2:	200f      	movs	r0, #15
 80019d4:	f000 f808 	bl	80019e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019d8:	f7ff fc20 	bl	800121c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40023c00 	.word	0x40023c00

080019e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019f0:	4b12      	ldr	r3, [pc, #72]	; (8001a3c <HAL_InitTick+0x54>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <HAL_InitTick+0x58>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	4619      	mov	r1, r3
 80019fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a06:	4618      	mov	r0, r3
 8001a08:	f000 ff05 	bl	8002816 <HAL_SYSTICK_Config>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e00e      	b.n	8001a34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2b0f      	cmp	r3, #15
 8001a1a:	d80a      	bhi.n	8001a32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	6879      	ldr	r1, [r7, #4]
 8001a20:	f04f 30ff 	mov.w	r0, #4294967295
 8001a24:	f000 fecd 	bl	80027c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a28:	4a06      	ldr	r2, [pc, #24]	; (8001a44 <HAL_InitTick+0x5c>)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	e000      	b.n	8001a34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20000000 	.word	0x20000000
 8001a40:	20000008 	.word	0x20000008
 8001a44:	20000004 	.word	0x20000004

08001a48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <HAL_IncTick+0x20>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	461a      	mov	r2, r3
 8001a52:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <HAL_IncTick+0x24>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4413      	add	r3, r2
 8001a58:	4a04      	ldr	r2, [pc, #16]	; (8001a6c <HAL_IncTick+0x24>)
 8001a5a:	6013      	str	r3, [r2, #0]
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	20000008 	.word	0x20000008
 8001a6c:	20000368 	.word	0x20000368

08001a70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  return uwTick;
 8001a74:	4b03      	ldr	r3, [pc, #12]	; (8001a84 <HAL_GetTick+0x14>)
 8001a76:	681b      	ldr	r3, [r3, #0]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	20000368 	.word	0x20000368

08001a88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a90:	f7ff ffee 	bl	8001a70 <HAL_GetTick>
 8001a94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aa0:	d005      	beq.n	8001aae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aa2:	4b0a      	ldr	r3, [pc, #40]	; (8001acc <HAL_Delay+0x44>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	4413      	add	r3, r2
 8001aac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001aae:	bf00      	nop
 8001ab0:	f7ff ffde 	bl	8001a70 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	68fa      	ldr	r2, [r7, #12]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d8f7      	bhi.n	8001ab0 <HAL_Delay+0x28>
  {
  }
}
 8001ac0:	bf00      	nop
 8001ac2:	bf00      	nop
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20000008 	.word	0x20000008

08001ad0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e033      	b.n	8001b4e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d109      	bne.n	8001b02 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff fbbc 	bl	800126c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	f003 0310 	and.w	r3, r3, #16
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d118      	bne.n	8001b40 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b16:	f023 0302 	bic.w	r3, r3, #2
 8001b1a:	f043 0202 	orr.w	r2, r3, #2
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f000 fa5e 	bl	8001fe4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	f023 0303 	bic.w	r3, r3, #3
 8001b36:	f043 0201 	orr.w	r2, r3, #1
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	641a      	str	r2, [r3, #64]	; 0x40
 8001b3e:	e001      	b.n	8001b44 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
	...

08001b58 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b64:	2300      	movs	r3, #0
 8001b66:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d101      	bne.n	8001b76 <HAL_ADC_Start_DMA+0x1e>
 8001b72:	2302      	movs	r3, #2
 8001b74:	e0e9      	b.n	8001d4a <HAL_ADC_Start_DMA+0x1f2>
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d018      	beq.n	8001bbe <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	689a      	ldr	r2, [r3, #8]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f042 0201 	orr.w	r2, r2, #1
 8001b9a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b9c:	4b6d      	ldr	r3, [pc, #436]	; (8001d54 <HAL_ADC_Start_DMA+0x1fc>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a6d      	ldr	r2, [pc, #436]	; (8001d58 <HAL_ADC_Start_DMA+0x200>)
 8001ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba6:	0c9a      	lsrs	r2, r3, #18
 8001ba8:	4613      	mov	r3, r2
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	4413      	add	r3, r2
 8001bae:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001bb0:	e002      	b.n	8001bb8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	3b01      	subs	r3, #1
 8001bb6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1f9      	bne.n	8001bb2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bcc:	d107      	bne.n	8001bde <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bdc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	f040 80a1 	bne.w	8001d30 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001bf6:	f023 0301 	bic.w	r3, r3, #1
 8001bfa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d007      	beq.n	8001c20 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c14:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c18:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c2c:	d106      	bne.n	8001c3c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c32:	f023 0206 	bic.w	r2, r3, #6
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	645a      	str	r2, [r3, #68]	; 0x44
 8001c3a:	e002      	b.n	8001c42 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c4a:	4b44      	ldr	r3, [pc, #272]	; (8001d5c <HAL_ADC_Start_DMA+0x204>)
 8001c4c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c52:	4a43      	ldr	r2, [pc, #268]	; (8001d60 <HAL_ADC_Start_DMA+0x208>)
 8001c54:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c5a:	4a42      	ldr	r2, [pc, #264]	; (8001d64 <HAL_ADC_Start_DMA+0x20c>)
 8001c5c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c62:	4a41      	ldr	r2, [pc, #260]	; (8001d68 <HAL_ADC_Start_DMA+0x210>)
 8001c64:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001c6e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	685a      	ldr	r2, [r3, #4]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001c7e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	689a      	ldr	r2, [r3, #8]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c8e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	334c      	adds	r3, #76	; 0x4c
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	68ba      	ldr	r2, [r7, #8]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f000 fe74 	bl	800298c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f003 031f 	and.w	r3, r3, #31
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d12a      	bne.n	8001d06 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a2d      	ldr	r2, [pc, #180]	; (8001d6c <HAL_ADC_Start_DMA+0x214>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d015      	beq.n	8001ce6 <HAL_ADC_Start_DMA+0x18e>
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a2c      	ldr	r2, [pc, #176]	; (8001d70 <HAL_ADC_Start_DMA+0x218>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d105      	bne.n	8001cd0 <HAL_ADC_Start_DMA+0x178>
 8001cc4:	4b25      	ldr	r3, [pc, #148]	; (8001d5c <HAL_ADC_Start_DMA+0x204>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f003 031f 	and.w	r3, r3, #31
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d00a      	beq.n	8001ce6 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a27      	ldr	r2, [pc, #156]	; (8001d74 <HAL_ADC_Start_DMA+0x21c>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d136      	bne.n	8001d48 <HAL_ADC_Start_DMA+0x1f0>
 8001cda:	4b20      	ldr	r3, [pc, #128]	; (8001d5c <HAL_ADC_Start_DMA+0x204>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f003 0310 	and.w	r3, r3, #16
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d130      	bne.n	8001d48 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d129      	bne.n	8001d48 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	689a      	ldr	r2, [r3, #8]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	e020      	b.n	8001d48 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a18      	ldr	r2, [pc, #96]	; (8001d6c <HAL_ADC_Start_DMA+0x214>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d11b      	bne.n	8001d48 <HAL_ADC_Start_DMA+0x1f0>
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d114      	bne.n	8001d48 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d2c:	609a      	str	r2, [r3, #8]
 8001d2e:	e00b      	b.n	8001d48 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d34:	f043 0210 	orr.w	r2, r3, #16
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d40:	f043 0201 	orr.w	r2, r3, #1
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3718      	adds	r7, #24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	20000000 	.word	0x20000000
 8001d58:	431bde83 	.word	0x431bde83
 8001d5c:	40012300 	.word	0x40012300
 8001d60:	080021dd 	.word	0x080021dd
 8001d64:	08002297 	.word	0x08002297
 8001d68:	080022b3 	.word	0x080022b3
 8001d6c:	40012000 	.word	0x40012000
 8001d70:	40012100 	.word	0x40012100
 8001d74:	40012200 	.word	0x40012200

08001d78 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001daa:	2300      	movs	r3, #0
 8001dac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d101      	bne.n	8001dbc <HAL_ADC_ConfigChannel+0x1c>
 8001db8:	2302      	movs	r3, #2
 8001dba:	e105      	b.n	8001fc8 <HAL_ADC_ConfigChannel+0x228>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2b09      	cmp	r3, #9
 8001dca:	d925      	bls.n	8001e18 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68d9      	ldr	r1, [r3, #12]
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	461a      	mov	r2, r3
 8001dda:	4613      	mov	r3, r2
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	4413      	add	r3, r2
 8001de0:	3b1e      	subs	r3, #30
 8001de2:	2207      	movs	r2, #7
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	43da      	mvns	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	400a      	ands	r2, r1
 8001df0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68d9      	ldr	r1, [r3, #12]
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	4618      	mov	r0, r3
 8001e04:	4603      	mov	r3, r0
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	4403      	add	r3, r0
 8001e0a:	3b1e      	subs	r3, #30
 8001e0c:	409a      	lsls	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	430a      	orrs	r2, r1
 8001e14:	60da      	str	r2, [r3, #12]
 8001e16:	e022      	b.n	8001e5e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6919      	ldr	r1, [r3, #16]
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	461a      	mov	r2, r3
 8001e26:	4613      	mov	r3, r2
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	4413      	add	r3, r2
 8001e2c:	2207      	movs	r2, #7
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43da      	mvns	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	400a      	ands	r2, r1
 8001e3a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6919      	ldr	r1, [r3, #16]
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	689a      	ldr	r2, [r3, #8]
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	4603      	mov	r3, r0
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	4403      	add	r3, r0
 8001e54:	409a      	lsls	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	2b06      	cmp	r3, #6
 8001e64:	d824      	bhi.n	8001eb0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685a      	ldr	r2, [r3, #4]
 8001e70:	4613      	mov	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	4413      	add	r3, r2
 8001e76:	3b05      	subs	r3, #5
 8001e78:	221f      	movs	r2, #31
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	43da      	mvns	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	400a      	ands	r2, r1
 8001e86:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	4618      	mov	r0, r3
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685a      	ldr	r2, [r3, #4]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	4413      	add	r3, r2
 8001ea0:	3b05      	subs	r3, #5
 8001ea2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	635a      	str	r2, [r3, #52]	; 0x34
 8001eae:	e04c      	b.n	8001f4a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	2b0c      	cmp	r3, #12
 8001eb6:	d824      	bhi.n	8001f02 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685a      	ldr	r2, [r3, #4]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	4413      	add	r3, r2
 8001ec8:	3b23      	subs	r3, #35	; 0x23
 8001eca:	221f      	movs	r2, #31
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	43da      	mvns	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	400a      	ands	r2, r1
 8001ed8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	4613      	mov	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	4413      	add	r3, r2
 8001ef2:	3b23      	subs	r3, #35	; 0x23
 8001ef4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	430a      	orrs	r2, r1
 8001efe:	631a      	str	r2, [r3, #48]	; 0x30
 8001f00:	e023      	b.n	8001f4a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685a      	ldr	r2, [r3, #4]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	4413      	add	r3, r2
 8001f12:	3b41      	subs	r3, #65	; 0x41
 8001f14:	221f      	movs	r2, #31
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	43da      	mvns	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	400a      	ands	r2, r1
 8001f22:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	4618      	mov	r0, r3
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685a      	ldr	r2, [r3, #4]
 8001f36:	4613      	mov	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4413      	add	r3, r2
 8001f3c:	3b41      	subs	r3, #65	; 0x41
 8001f3e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	430a      	orrs	r2, r1
 8001f48:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f4a:	4b22      	ldr	r3, [pc, #136]	; (8001fd4 <HAL_ADC_ConfigChannel+0x234>)
 8001f4c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a21      	ldr	r2, [pc, #132]	; (8001fd8 <HAL_ADC_ConfigChannel+0x238>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d109      	bne.n	8001f6c <HAL_ADC_ConfigChannel+0x1cc>
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2b12      	cmp	r3, #18
 8001f5e:	d105      	bne.n	8001f6c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a19      	ldr	r2, [pc, #100]	; (8001fd8 <HAL_ADC_ConfigChannel+0x238>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d123      	bne.n	8001fbe <HAL_ADC_ConfigChannel+0x21e>
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2b10      	cmp	r3, #16
 8001f7c:	d003      	beq.n	8001f86 <HAL_ADC_ConfigChannel+0x1e6>
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2b11      	cmp	r3, #17
 8001f84:	d11b      	bne.n	8001fbe <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2b10      	cmp	r3, #16
 8001f98:	d111      	bne.n	8001fbe <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f9a:	4b10      	ldr	r3, [pc, #64]	; (8001fdc <HAL_ADC_ConfigChannel+0x23c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a10      	ldr	r2, [pc, #64]	; (8001fe0 <HAL_ADC_ConfigChannel+0x240>)
 8001fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa4:	0c9a      	lsrs	r2, r3, #18
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	4413      	add	r3, r2
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001fb0:	e002      	b.n	8001fb8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1f9      	bne.n	8001fb2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3714      	adds	r7, #20
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	40012300 	.word	0x40012300
 8001fd8:	40012000 	.word	0x40012000
 8001fdc:	20000000 	.word	0x20000000
 8001fe0:	431bde83 	.word	0x431bde83

08001fe4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fec:	4b79      	ldr	r3, [pc, #484]	; (80021d4 <ADC_Init+0x1f0>)
 8001fee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	685a      	ldr	r2, [r3, #4]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	431a      	orrs	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002018:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	6859      	ldr	r1, [r3, #4]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	021a      	lsls	r2, r3, #8
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	430a      	orrs	r2, r1
 800202c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800203c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	6859      	ldr	r1, [r3, #4]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	430a      	orrs	r2, r1
 800204e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	689a      	ldr	r2, [r3, #8]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800205e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6899      	ldr	r1, [r3, #8]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	68da      	ldr	r2, [r3, #12]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	430a      	orrs	r2, r1
 8002070:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002076:	4a58      	ldr	r2, [pc, #352]	; (80021d8 <ADC_Init+0x1f4>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d022      	beq.n	80020c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	689a      	ldr	r2, [r3, #8]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800208a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	6899      	ldr	r1, [r3, #8]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	430a      	orrs	r2, r1
 800209c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	689a      	ldr	r2, [r3, #8]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6899      	ldr	r1, [r3, #8]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	430a      	orrs	r2, r1
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	e00f      	b.n	80020e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 0202 	bic.w	r2, r2, #2
 80020f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6899      	ldr	r1, [r3, #8]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	7e1b      	ldrb	r3, [r3, #24]
 80020fc:	005a      	lsls	r2, r3, #1
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	430a      	orrs	r2, r1
 8002104:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f893 3020 	ldrb.w	r3, [r3, #32]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d01b      	beq.n	8002148 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	685a      	ldr	r2, [r3, #4]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800211e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	685a      	ldr	r2, [r3, #4]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800212e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	6859      	ldr	r1, [r3, #4]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213a:	3b01      	subs	r3, #1
 800213c:	035a      	lsls	r2, r3, #13
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	430a      	orrs	r2, r1
 8002144:	605a      	str	r2, [r3, #4]
 8002146:	e007      	b.n	8002158 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002156:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002166:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	3b01      	subs	r3, #1
 8002174:	051a      	lsls	r2, r3, #20
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	430a      	orrs	r2, r1
 800217c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800218c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	6899      	ldr	r1, [r3, #8]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800219a:	025a      	lsls	r2, r3, #9
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	430a      	orrs	r2, r1
 80021a2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	689a      	ldr	r2, [r3, #8]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	6899      	ldr	r1, [r3, #8]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	029a      	lsls	r2, r3, #10
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	430a      	orrs	r2, r1
 80021c6:	609a      	str	r2, [r3, #8]
}
 80021c8:	bf00      	nop
 80021ca:	3714      	adds	r7, #20
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	40012300 	.word	0x40012300
 80021d8:	0f000001 	.word	0x0f000001

080021dc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021e8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d13c      	bne.n	8002270 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d12b      	bne.n	8002268 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002214:	2b00      	cmp	r3, #0
 8002216:	d127      	bne.n	8002268 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002222:	2b00      	cmp	r3, #0
 8002224:	d006      	beq.n	8002234 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002230:	2b00      	cmp	r3, #0
 8002232:	d119      	bne.n	8002268 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	685a      	ldr	r2, [r3, #4]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f022 0220 	bic.w	r2, r2, #32
 8002242:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002248:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002254:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d105      	bne.n	8002268 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002260:	f043 0201 	orr.w	r2, r3, #1
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002268:	68f8      	ldr	r0, [r7, #12]
 800226a:	f7fe fb5b 	bl	8000924 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800226e:	e00e      	b.n	800228e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002274:	f003 0310 	and.w	r3, r3, #16
 8002278:	2b00      	cmp	r3, #0
 800227a:	d003      	beq.n	8002284 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	f7ff fd85 	bl	8001d8c <HAL_ADC_ErrorCallback>
}
 8002282:	e004      	b.n	800228e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	4798      	blx	r3
}
 800228e:	bf00      	nop
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b084      	sub	sp, #16
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f7ff fd67 	bl	8001d78 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022aa:	bf00      	nop
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b084      	sub	sp, #16
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022be:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2240      	movs	r2, #64	; 0x40
 80022c4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ca:	f043 0204 	orr.w	r2, r3, #4
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	f7ff fd5a 	bl	8001d8c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022d8:	bf00      	nop
 80022da:	3710      	adds	r7, #16
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d101      	bne.n	80022f8 <HAL_ADCEx_InjectedConfigChannel+0x18>
 80022f4:	2302      	movs	r3, #2
 80022f6:	e17d      	b.n	80025f4 <HAL_ADCEx_InjectedConfigChannel+0x314>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2b09      	cmp	r3, #9
 8002306:	d925      	bls.n	8002354 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68d9      	ldr	r1, [r3, #12]
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	b29b      	uxth	r3, r3
 8002314:	461a      	mov	r2, r3
 8002316:	4613      	mov	r3, r2
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	4413      	add	r3, r2
 800231c:	3b1e      	subs	r3, #30
 800231e:	2207      	movs	r2, #7
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	43da      	mvns	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	400a      	ands	r2, r1
 800232c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68d9      	ldr	r1, [r3, #12]
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	b29b      	uxth	r3, r3
 800233e:	4618      	mov	r0, r3
 8002340:	4603      	mov	r3, r0
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	4403      	add	r3, r0
 8002346:	3b1e      	subs	r3, #30
 8002348:	409a      	lsls	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	430a      	orrs	r2, r1
 8002350:	60da      	str	r2, [r3, #12]
 8002352:	e022      	b.n	800239a <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6919      	ldr	r1, [r3, #16]
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	b29b      	uxth	r3, r3
 8002360:	461a      	mov	r2, r3
 8002362:	4613      	mov	r3, r2
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	4413      	add	r3, r2
 8002368:	2207      	movs	r2, #7
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	43da      	mvns	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	400a      	ands	r2, r1
 8002376:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6919      	ldr	r1, [r3, #16]
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	689a      	ldr	r2, [r3, #8]
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	b29b      	uxth	r3, r3
 8002388:	4618      	mov	r0, r3
 800238a:	4603      	mov	r3, r0
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	4403      	add	r3, r0
 8002390:	409a      	lsls	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	430a      	orrs	r2, r1
 8002398:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80023a8:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	3b01      	subs	r3, #1
 80023b6:	051a      	lsls	r2, r3, #20
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	430a      	orrs	r2, r1
 80023be:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	b2da      	uxtb	r2, r3
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	3303      	adds	r3, #3
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	461a      	mov	r2, r3
 80023dc:	4613      	mov	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4413      	add	r3, r2
 80023e2:	221f      	movs	r2, #31
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	43da      	mvns	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	400a      	ands	r2, r1
 80023f0:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	4618      	mov	r0, r3
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	b2da      	uxtb	r2, r3
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	b2db      	uxtb	r3, r3
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	b2db      	uxtb	r3, r3
 8002410:	3303      	adds	r3, #3
 8002412:	b2db      	uxtb	r3, r3
 8002414:	461a      	mov	r2, r3
 8002416:	4613      	mov	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	4413      	add	r3, r2
 800241c:	fa00 f203 	lsl.w	r2, r0, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	430a      	orrs	r2, r1
 8002426:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	4a74      	ldr	r2, [pc, #464]	; (8002600 <HAL_ADCEx_InjectedConfigChannel+0x320>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d022      	beq.n	8002478 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	689a      	ldr	r2, [r3, #8]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8002440:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	6899      	ldr	r1, [r3, #8]
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	699a      	ldr	r2, [r3, #24]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	430a      	orrs	r2, r1
 8002452:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	689a      	ldr	r2, [r3, #8]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002462:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	6899      	ldr	r1, [r3, #8]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	69da      	ldr	r2, [r3, #28]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	430a      	orrs	r2, r1
 8002474:	609a      	str	r2, [r3, #8]
 8002476:	e00f      	b.n	8002498 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	689a      	ldr	r2, [r3, #8]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8002486:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689a      	ldr	r2, [r3, #8]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002496:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	7d5b      	ldrb	r3, [r3, #21]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d008      	beq.n	80024b2 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024ae:	605a      	str	r2, [r3, #4]
 80024b0:	e007      	b.n	80024c2 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024c0:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	7d1b      	ldrb	r3, [r3, #20]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d008      	beq.n	80024dc <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80024d8:	605a      	str	r2, [r3, #4]
 80024da:	e007      	b.n	80024ec <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	685a      	ldr	r2, [r3, #4]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80024ea:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	2b03      	cmp	r3, #3
 80024f2:	d02e      	beq.n	8002552 <HAL_ADCEx_InjectedConfigChannel+0x272>
 80024f4:	2b03      	cmp	r3, #3
 80024f6:	d840      	bhi.n	800257a <HAL_ADCEx_InjectedConfigChannel+0x29a>
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d002      	beq.n	8002502 <HAL_ADCEx_InjectedConfigChannel+0x222>
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d014      	beq.n	800252a <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8002500:	e03b      	b.n	800257a <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	695b      	ldr	r3, [r3, #20]
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	6812      	ldr	r2, [r2, #0]
 800250c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002510:	f023 030f 	bic.w	r3, r3, #15
 8002514:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	6959      	ldr	r1, [r3, #20]
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	68da      	ldr	r2, [r3, #12]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	430a      	orrs	r2, r1
 8002526:	615a      	str	r2, [r3, #20]
      break;
 8002528:	e03b      	b.n	80025a2 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	6812      	ldr	r2, [r2, #0]
 8002534:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002538:	f023 030f 	bic.w	r3, r3, #15
 800253c:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6999      	ldr	r1, [r3, #24]
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	68da      	ldr	r2, [r3, #12]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	430a      	orrs	r2, r1
 800254e:	619a      	str	r2, [r3, #24]
      break;
 8002550:	e027      	b.n	80025a2 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	69db      	ldr	r3, [r3, #28]
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	6812      	ldr	r2, [r2, #0]
 800255c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002560:	f023 030f 	bic.w	r3, r3, #15
 8002564:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	69d9      	ldr	r1, [r3, #28]
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	68da      	ldr	r2, [r3, #12]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	430a      	orrs	r2, r1
 8002576:	61da      	str	r2, [r3, #28]
      break;
 8002578:	e013      	b.n	80025a2 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	6812      	ldr	r2, [r2, #0]
 8002584:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002588:	f023 030f 	bic.w	r3, r3, #15
 800258c:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	6a19      	ldr	r1, [r3, #32]
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	68da      	ldr	r2, [r3, #12]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	430a      	orrs	r2, r1
 800259e:	621a      	str	r2, [r3, #32]
      break;
 80025a0:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025a2:	4b18      	ldr	r3, [pc, #96]	; (8002604 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 80025a4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a17      	ldr	r2, [pc, #92]	; (8002608 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d109      	bne.n	80025c4 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2b12      	cmp	r3, #18
 80025b6:	d105      	bne.n	80025c4 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a0f      	ldr	r2, [pc, #60]	; (8002608 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d10d      	bne.n	80025ea <HAL_ADCEx_InjectedConfigChannel+0x30a>
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2b10      	cmp	r3, #16
 80025d4:	d003      	beq.n	80025de <HAL_ADCEx_InjectedConfigChannel+0x2fe>
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2b11      	cmp	r3, #17
 80025dc:	d105      	bne.n	80025ea <HAL_ADCEx_InjectedConfigChannel+0x30a>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3714      	adds	r7, #20
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	000f0001 	.word	0x000f0001
 8002604:	40012300 	.word	0x40012300
 8002608:	40012000 	.word	0x40012000

0800260c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800261c:	4b0c      	ldr	r3, [pc, #48]	; (8002650 <__NVIC_SetPriorityGrouping+0x44>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002622:	68ba      	ldr	r2, [r7, #8]
 8002624:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002628:	4013      	ands	r3, r2
 800262a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002634:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800263c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800263e:	4a04      	ldr	r2, [pc, #16]	; (8002650 <__NVIC_SetPriorityGrouping+0x44>)
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	60d3      	str	r3, [r2, #12]
}
 8002644:	bf00      	nop
 8002646:	3714      	adds	r7, #20
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr
 8002650:	e000ed00 	.word	0xe000ed00

08002654 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002658:	4b04      	ldr	r3, [pc, #16]	; (800266c <__NVIC_GetPriorityGrouping+0x18>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	0a1b      	lsrs	r3, r3, #8
 800265e:	f003 0307 	and.w	r3, r3, #7
}
 8002662:	4618      	mov	r0, r3
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr
 800266c:	e000ed00 	.word	0xe000ed00

08002670 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	4603      	mov	r3, r0
 8002678:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800267a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267e:	2b00      	cmp	r3, #0
 8002680:	db0b      	blt.n	800269a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002682:	79fb      	ldrb	r3, [r7, #7]
 8002684:	f003 021f 	and.w	r2, r3, #31
 8002688:	4907      	ldr	r1, [pc, #28]	; (80026a8 <__NVIC_EnableIRQ+0x38>)
 800268a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268e:	095b      	lsrs	r3, r3, #5
 8002690:	2001      	movs	r0, #1
 8002692:	fa00 f202 	lsl.w	r2, r0, r2
 8002696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	e000e100 	.word	0xe000e100

080026ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	4603      	mov	r3, r0
 80026b4:	6039      	str	r1, [r7, #0]
 80026b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	db0a      	blt.n	80026d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	b2da      	uxtb	r2, r3
 80026c4:	490c      	ldr	r1, [pc, #48]	; (80026f8 <__NVIC_SetPriority+0x4c>)
 80026c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ca:	0112      	lsls	r2, r2, #4
 80026cc:	b2d2      	uxtb	r2, r2
 80026ce:	440b      	add	r3, r1
 80026d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026d4:	e00a      	b.n	80026ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	b2da      	uxtb	r2, r3
 80026da:	4908      	ldr	r1, [pc, #32]	; (80026fc <__NVIC_SetPriority+0x50>)
 80026dc:	79fb      	ldrb	r3, [r7, #7]
 80026de:	f003 030f 	and.w	r3, r3, #15
 80026e2:	3b04      	subs	r3, #4
 80026e4:	0112      	lsls	r2, r2, #4
 80026e6:	b2d2      	uxtb	r2, r2
 80026e8:	440b      	add	r3, r1
 80026ea:	761a      	strb	r2, [r3, #24]
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	e000e100 	.word	0xe000e100
 80026fc:	e000ed00 	.word	0xe000ed00

08002700 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002700:	b480      	push	{r7}
 8002702:	b089      	sub	sp, #36	; 0x24
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f003 0307 	and.w	r3, r3, #7
 8002712:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	f1c3 0307 	rsb	r3, r3, #7
 800271a:	2b04      	cmp	r3, #4
 800271c:	bf28      	it	cs
 800271e:	2304      	movcs	r3, #4
 8002720:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	3304      	adds	r3, #4
 8002726:	2b06      	cmp	r3, #6
 8002728:	d902      	bls.n	8002730 <NVIC_EncodePriority+0x30>
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	3b03      	subs	r3, #3
 800272e:	e000      	b.n	8002732 <NVIC_EncodePriority+0x32>
 8002730:	2300      	movs	r3, #0
 8002732:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002734:	f04f 32ff 	mov.w	r2, #4294967295
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	43da      	mvns	r2, r3
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	401a      	ands	r2, r3
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002748:	f04f 31ff 	mov.w	r1, #4294967295
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	fa01 f303 	lsl.w	r3, r1, r3
 8002752:	43d9      	mvns	r1, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002758:	4313      	orrs	r3, r2
         );
}
 800275a:	4618      	mov	r0, r3
 800275c:	3724      	adds	r7, #36	; 0x24
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
	...

08002768 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	3b01      	subs	r3, #1
 8002774:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002778:	d301      	bcc.n	800277e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800277a:	2301      	movs	r3, #1
 800277c:	e00f      	b.n	800279e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800277e:	4a0a      	ldr	r2, [pc, #40]	; (80027a8 <SysTick_Config+0x40>)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	3b01      	subs	r3, #1
 8002784:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002786:	210f      	movs	r1, #15
 8002788:	f04f 30ff 	mov.w	r0, #4294967295
 800278c:	f7ff ff8e 	bl	80026ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002790:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <SysTick_Config+0x40>)
 8002792:	2200      	movs	r2, #0
 8002794:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002796:	4b04      	ldr	r3, [pc, #16]	; (80027a8 <SysTick_Config+0x40>)
 8002798:	2207      	movs	r2, #7
 800279a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	e000e010 	.word	0xe000e010

080027ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f7ff ff29 	bl	800260c <__NVIC_SetPriorityGrouping>
}
 80027ba:	bf00      	nop
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b086      	sub	sp, #24
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	4603      	mov	r3, r0
 80027ca:	60b9      	str	r1, [r7, #8]
 80027cc:	607a      	str	r2, [r7, #4]
 80027ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027d0:	2300      	movs	r3, #0
 80027d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027d4:	f7ff ff3e 	bl	8002654 <__NVIC_GetPriorityGrouping>
 80027d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	68b9      	ldr	r1, [r7, #8]
 80027de:	6978      	ldr	r0, [r7, #20]
 80027e0:	f7ff ff8e 	bl	8002700 <NVIC_EncodePriority>
 80027e4:	4602      	mov	r2, r0
 80027e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ea:	4611      	mov	r1, r2
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff ff5d 	bl	80026ac <__NVIC_SetPriority>
}
 80027f2:	bf00      	nop
 80027f4:	3718      	adds	r7, #24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b082      	sub	sp, #8
 80027fe:	af00      	add	r7, sp, #0
 8002800:	4603      	mov	r3, r0
 8002802:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002808:	4618      	mov	r0, r3
 800280a:	f7ff ff31 	bl	8002670 <__NVIC_EnableIRQ>
}
 800280e:	bf00      	nop
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b082      	sub	sp, #8
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f7ff ffa2 	bl	8002768 <SysTick_Config>
 8002824:	4603      	mov	r3, r0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
	...

08002830 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002838:	2300      	movs	r3, #0
 800283a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800283c:	f7ff f918 	bl	8001a70 <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d101      	bne.n	800284c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e099      	b.n	8002980 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2202      	movs	r2, #2
 8002850:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 0201 	bic.w	r2, r2, #1
 800286a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800286c:	e00f      	b.n	800288e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800286e:	f7ff f8ff 	bl	8001a70 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b05      	cmp	r3, #5
 800287a:	d908      	bls.n	800288e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2220      	movs	r2, #32
 8002880:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2203      	movs	r2, #3
 8002886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e078      	b.n	8002980 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1e8      	bne.n	800286e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	4b38      	ldr	r3, [pc, #224]	; (8002988 <HAL_DMA_Init+0x158>)
 80028a8:	4013      	ands	r3, r2
 80028aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028da:	697a      	ldr	r2, [r7, #20]
 80028dc:	4313      	orrs	r3, r2
 80028de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e4:	2b04      	cmp	r3, #4
 80028e6:	d107      	bne.n	80028f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f0:	4313      	orrs	r3, r2
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	697a      	ldr	r2, [r7, #20]
 80028fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	f023 0307 	bic.w	r3, r3, #7
 800290e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	4313      	orrs	r3, r2
 8002918:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291e:	2b04      	cmp	r3, #4
 8002920:	d117      	bne.n	8002952 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	4313      	orrs	r3, r2
 800292a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00e      	beq.n	8002952 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 fa6f 	bl	8002e18 <DMA_CheckFifoParam>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d008      	beq.n	8002952 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2240      	movs	r2, #64	; 0x40
 8002944:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2201      	movs	r2, #1
 800294a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800294e:	2301      	movs	r3, #1
 8002950:	e016      	b.n	8002980 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 fa26 	bl	8002dac <DMA_CalcBaseAndBitshift>
 8002960:	4603      	mov	r3, r0
 8002962:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002968:	223f      	movs	r2, #63	; 0x3f
 800296a:	409a      	lsls	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	3718      	adds	r7, #24
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	f010803f 	.word	0xf010803f

0800298c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b086      	sub	sp, #24
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
 8002998:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800299a:	2300      	movs	r3, #0
 800299c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d101      	bne.n	80029b2 <HAL_DMA_Start_IT+0x26>
 80029ae:	2302      	movs	r3, #2
 80029b0:	e040      	b.n	8002a34 <HAL_DMA_Start_IT+0xa8>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d12f      	bne.n	8002a26 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2202      	movs	r2, #2
 80029ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	68b9      	ldr	r1, [r7, #8]
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f000 f9b8 	bl	8002d50 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e4:	223f      	movs	r2, #63	; 0x3f
 80029e6:	409a      	lsls	r2, r3
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f042 0216 	orr.w	r2, r2, #22
 80029fa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d007      	beq.n	8002a14 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f042 0208 	orr.w	r2, r2, #8
 8002a12:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f042 0201 	orr.w	r2, r2, #1
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	e005      	b.n	8002a32 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a2e:	2302      	movs	r3, #2
 8002a30:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a32:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3718      	adds	r7, #24
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a44:	2300      	movs	r3, #0
 8002a46:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a48:	4b8e      	ldr	r3, [pc, #568]	; (8002c84 <HAL_DMA_IRQHandler+0x248>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a8e      	ldr	r2, [pc, #568]	; (8002c88 <HAL_DMA_IRQHandler+0x24c>)
 8002a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a52:	0a9b      	lsrs	r3, r3, #10
 8002a54:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a5a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a66:	2208      	movs	r2, #8
 8002a68:	409a      	lsls	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d01a      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0304 	and.w	r3, r3, #4
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d013      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 0204 	bic.w	r2, r2, #4
 8002a8e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a94:	2208      	movs	r2, #8
 8002a96:	409a      	lsls	r2, r3
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa0:	f043 0201 	orr.w	r2, r3, #1
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aac:	2201      	movs	r2, #1
 8002aae:	409a      	lsls	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d012      	beq.n	8002ade <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00b      	beq.n	8002ade <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aca:	2201      	movs	r2, #1
 8002acc:	409a      	lsls	r2, r3
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad6:	f043 0202 	orr.w	r2, r3, #2
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae2:	2204      	movs	r2, #4
 8002ae4:	409a      	lsls	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d012      	beq.n	8002b14 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00b      	beq.n	8002b14 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b00:	2204      	movs	r2, #4
 8002b02:	409a      	lsls	r2, r3
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b0c:	f043 0204 	orr.w	r2, r3, #4
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b18:	2210      	movs	r2, #16
 8002b1a:	409a      	lsls	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d043      	beq.n	8002bac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0308 	and.w	r3, r3, #8
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d03c      	beq.n	8002bac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b36:	2210      	movs	r2, #16
 8002b38:	409a      	lsls	r2, r3
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d018      	beq.n	8002b7e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d108      	bne.n	8002b6c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d024      	beq.n	8002bac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	4798      	blx	r3
 8002b6a:	e01f      	b.n	8002bac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d01b      	beq.n	8002bac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	4798      	blx	r3
 8002b7c:	e016      	b.n	8002bac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d107      	bne.n	8002b9c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 0208 	bic.w	r2, r2, #8
 8002b9a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d003      	beq.n	8002bac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb0:	2220      	movs	r2, #32
 8002bb2:	409a      	lsls	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 808f 	beq.w	8002cdc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0310 	and.w	r3, r3, #16
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f000 8087 	beq.w	8002cdc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	409a      	lsls	r2, r3
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b05      	cmp	r3, #5
 8002be4:	d136      	bne.n	8002c54 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 0216 	bic.w	r2, r2, #22
 8002bf4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	695a      	ldr	r2, [r3, #20]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c04:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d103      	bne.n	8002c16 <HAL_DMA_IRQHandler+0x1da>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d007      	beq.n	8002c26 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 0208 	bic.w	r2, r2, #8
 8002c24:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c2a:	223f      	movs	r2, #63	; 0x3f
 8002c2c:	409a      	lsls	r2, r3
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2201      	movs	r2, #1
 8002c36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d07e      	beq.n	8002d48 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	4798      	blx	r3
        }
        return;
 8002c52:	e079      	b.n	8002d48 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d01d      	beq.n	8002c9e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d10d      	bne.n	8002c8c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d031      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	4798      	blx	r3
 8002c80:	e02c      	b.n	8002cdc <HAL_DMA_IRQHandler+0x2a0>
 8002c82:	bf00      	nop
 8002c84:	20000000 	.word	0x20000000
 8002c88:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d023      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	4798      	blx	r3
 8002c9c:	e01e      	b.n	8002cdc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d10f      	bne.n	8002ccc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 0210 	bic.w	r2, r2, #16
 8002cba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d003      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d032      	beq.n	8002d4a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d022      	beq.n	8002d36 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2205      	movs	r2, #5
 8002cf4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 0201 	bic.w	r2, r2, #1
 8002d06:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	60bb      	str	r3, [r7, #8]
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d307      	bcc.n	8002d24 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1f2      	bne.n	8002d08 <HAL_DMA_IRQHandler+0x2cc>
 8002d22:	e000      	b.n	8002d26 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002d24:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d005      	beq.n	8002d4a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	4798      	blx	r3
 8002d46:	e000      	b.n	8002d4a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002d48:	bf00      	nop
    }
  }
}
 8002d4a:	3718      	adds	r7, #24
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
 8002d5c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d6c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	2b40      	cmp	r3, #64	; 0x40
 8002d7c:	d108      	bne.n	8002d90 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68ba      	ldr	r2, [r7, #8]
 8002d8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002d8e:	e007      	b.n	8002da0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68ba      	ldr	r2, [r7, #8]
 8002d96:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	60da      	str	r2, [r3, #12]
}
 8002da0:	bf00      	nop
 8002da2:	3714      	adds	r7, #20
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	3b10      	subs	r3, #16
 8002dbc:	4a14      	ldr	r2, [pc, #80]	; (8002e10 <DMA_CalcBaseAndBitshift+0x64>)
 8002dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc2:	091b      	lsrs	r3, r3, #4
 8002dc4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002dc6:	4a13      	ldr	r2, [pc, #76]	; (8002e14 <DMA_CalcBaseAndBitshift+0x68>)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	4413      	add	r3, r2
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	461a      	mov	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2b03      	cmp	r3, #3
 8002dd8:	d909      	bls.n	8002dee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002de2:	f023 0303 	bic.w	r3, r3, #3
 8002de6:	1d1a      	adds	r2, r3, #4
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	659a      	str	r2, [r3, #88]	; 0x58
 8002dec:	e007      	b.n	8002dfe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002df6:	f023 0303 	bic.w	r3, r3, #3
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3714      	adds	r7, #20
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	aaaaaaab 	.word	0xaaaaaaab
 8002e14:	0800699c 	.word	0x0800699c

08002e18 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e20:	2300      	movs	r3, #0
 8002e22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e28:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d11f      	bne.n	8002e72 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	2b03      	cmp	r3, #3
 8002e36:	d856      	bhi.n	8002ee6 <DMA_CheckFifoParam+0xce>
 8002e38:	a201      	add	r2, pc, #4	; (adr r2, 8002e40 <DMA_CheckFifoParam+0x28>)
 8002e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e3e:	bf00      	nop
 8002e40:	08002e51 	.word	0x08002e51
 8002e44:	08002e63 	.word	0x08002e63
 8002e48:	08002e51 	.word	0x08002e51
 8002e4c:	08002ee7 	.word	0x08002ee7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d046      	beq.n	8002eea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e60:	e043      	b.n	8002eea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e66:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e6a:	d140      	bne.n	8002eee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e70:	e03d      	b.n	8002eee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e7a:	d121      	bne.n	8002ec0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	2b03      	cmp	r3, #3
 8002e80:	d837      	bhi.n	8002ef2 <DMA_CheckFifoParam+0xda>
 8002e82:	a201      	add	r2, pc, #4	; (adr r2, 8002e88 <DMA_CheckFifoParam+0x70>)
 8002e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e88:	08002e99 	.word	0x08002e99
 8002e8c:	08002e9f 	.word	0x08002e9f
 8002e90:	08002e99 	.word	0x08002e99
 8002e94:	08002eb1 	.word	0x08002eb1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e9c:	e030      	b.n	8002f00 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d025      	beq.n	8002ef6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eae:	e022      	b.n	8002ef6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002eb8:	d11f      	bne.n	8002efa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ebe:	e01c      	b.n	8002efa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d903      	bls.n	8002ece <DMA_CheckFifoParam+0xb6>
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	2b03      	cmp	r3, #3
 8002eca:	d003      	beq.n	8002ed4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ecc:	e018      	b.n	8002f00 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	73fb      	strb	r3, [r7, #15]
      break;
 8002ed2:	e015      	b.n	8002f00 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00e      	beq.n	8002efe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ee4:	e00b      	b.n	8002efe <DMA_CheckFifoParam+0xe6>
      break;
 8002ee6:	bf00      	nop
 8002ee8:	e00a      	b.n	8002f00 <DMA_CheckFifoParam+0xe8>
      break;
 8002eea:	bf00      	nop
 8002eec:	e008      	b.n	8002f00 <DMA_CheckFifoParam+0xe8>
      break;
 8002eee:	bf00      	nop
 8002ef0:	e006      	b.n	8002f00 <DMA_CheckFifoParam+0xe8>
      break;
 8002ef2:	bf00      	nop
 8002ef4:	e004      	b.n	8002f00 <DMA_CheckFifoParam+0xe8>
      break;
 8002ef6:	bf00      	nop
 8002ef8:	e002      	b.n	8002f00 <DMA_CheckFifoParam+0xe8>
      break;   
 8002efa:	bf00      	nop
 8002efc:	e000      	b.n	8002f00 <DMA_CheckFifoParam+0xe8>
      break;
 8002efe:	bf00      	nop
    }
  } 
  
  return status; 
 8002f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3714      	adds	r7, #20
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop

08002f10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b089      	sub	sp, #36	; 0x24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f22:	2300      	movs	r3, #0
 8002f24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f26:	2300      	movs	r3, #0
 8002f28:	61fb      	str	r3, [r7, #28]
 8002f2a:	e16b      	b.n	8003204 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	f040 815a 	bne.w	80031fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f003 0303 	and.w	r3, r3, #3
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d005      	beq.n	8002f62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d130      	bne.n	8002fc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	2203      	movs	r2, #3
 8002f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f72:	43db      	mvns	r3, r3
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	4013      	ands	r3, r2
 8002f78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	68da      	ldr	r2, [r3, #12]
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	fa02 f303 	lsl.w	r3, r2, r3
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f98:	2201      	movs	r2, #1
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	091b      	lsrs	r3, r3, #4
 8002fae:	f003 0201 	and.w	r2, r3, #1
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f003 0303 	and.w	r3, r3, #3
 8002fcc:	2b03      	cmp	r3, #3
 8002fce:	d017      	beq.n	8003000 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	2203      	movs	r2, #3
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	43db      	mvns	r3, r3
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	689a      	ldr	r2, [r3, #8]
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f003 0303 	and.w	r3, r3, #3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d123      	bne.n	8003054 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	08da      	lsrs	r2, r3, #3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	3208      	adds	r2, #8
 8003014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003018:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	220f      	movs	r2, #15
 8003024:	fa02 f303 	lsl.w	r3, r2, r3
 8003028:	43db      	mvns	r3, r3
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	4013      	ands	r3, r2
 800302e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	691a      	ldr	r2, [r3, #16]
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	f003 0307 	and.w	r3, r3, #7
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	4313      	orrs	r3, r2
 8003044:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	08da      	lsrs	r2, r3, #3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	3208      	adds	r2, #8
 800304e:	69b9      	ldr	r1, [r7, #24]
 8003050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	2203      	movs	r2, #3
 8003060:	fa02 f303 	lsl.w	r3, r2, r3
 8003064:	43db      	mvns	r3, r3
 8003066:	69ba      	ldr	r2, [r7, #24]
 8003068:	4013      	ands	r3, r2
 800306a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f003 0203 	and.w	r2, r3, #3
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	4313      	orrs	r3, r2
 8003080:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003090:	2b00      	cmp	r3, #0
 8003092:	f000 80b4 	beq.w	80031fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003096:	2300      	movs	r3, #0
 8003098:	60fb      	str	r3, [r7, #12]
 800309a:	4b60      	ldr	r3, [pc, #384]	; (800321c <HAL_GPIO_Init+0x30c>)
 800309c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309e:	4a5f      	ldr	r2, [pc, #380]	; (800321c <HAL_GPIO_Init+0x30c>)
 80030a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030a4:	6453      	str	r3, [r2, #68]	; 0x44
 80030a6:	4b5d      	ldr	r3, [pc, #372]	; (800321c <HAL_GPIO_Init+0x30c>)
 80030a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030ae:	60fb      	str	r3, [r7, #12]
 80030b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030b2:	4a5b      	ldr	r2, [pc, #364]	; (8003220 <HAL_GPIO_Init+0x310>)
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	089b      	lsrs	r3, r3, #2
 80030b8:	3302      	adds	r3, #2
 80030ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	f003 0303 	and.w	r3, r3, #3
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	220f      	movs	r2, #15
 80030ca:	fa02 f303 	lsl.w	r3, r2, r3
 80030ce:	43db      	mvns	r3, r3
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	4013      	ands	r3, r2
 80030d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a52      	ldr	r2, [pc, #328]	; (8003224 <HAL_GPIO_Init+0x314>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d02b      	beq.n	8003136 <HAL_GPIO_Init+0x226>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a51      	ldr	r2, [pc, #324]	; (8003228 <HAL_GPIO_Init+0x318>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d025      	beq.n	8003132 <HAL_GPIO_Init+0x222>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a50      	ldr	r2, [pc, #320]	; (800322c <HAL_GPIO_Init+0x31c>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d01f      	beq.n	800312e <HAL_GPIO_Init+0x21e>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a4f      	ldr	r2, [pc, #316]	; (8003230 <HAL_GPIO_Init+0x320>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d019      	beq.n	800312a <HAL_GPIO_Init+0x21a>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a4e      	ldr	r2, [pc, #312]	; (8003234 <HAL_GPIO_Init+0x324>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d013      	beq.n	8003126 <HAL_GPIO_Init+0x216>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a4d      	ldr	r2, [pc, #308]	; (8003238 <HAL_GPIO_Init+0x328>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d00d      	beq.n	8003122 <HAL_GPIO_Init+0x212>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a4c      	ldr	r2, [pc, #304]	; (800323c <HAL_GPIO_Init+0x32c>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d007      	beq.n	800311e <HAL_GPIO_Init+0x20e>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a4b      	ldr	r2, [pc, #300]	; (8003240 <HAL_GPIO_Init+0x330>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d101      	bne.n	800311a <HAL_GPIO_Init+0x20a>
 8003116:	2307      	movs	r3, #7
 8003118:	e00e      	b.n	8003138 <HAL_GPIO_Init+0x228>
 800311a:	2308      	movs	r3, #8
 800311c:	e00c      	b.n	8003138 <HAL_GPIO_Init+0x228>
 800311e:	2306      	movs	r3, #6
 8003120:	e00a      	b.n	8003138 <HAL_GPIO_Init+0x228>
 8003122:	2305      	movs	r3, #5
 8003124:	e008      	b.n	8003138 <HAL_GPIO_Init+0x228>
 8003126:	2304      	movs	r3, #4
 8003128:	e006      	b.n	8003138 <HAL_GPIO_Init+0x228>
 800312a:	2303      	movs	r3, #3
 800312c:	e004      	b.n	8003138 <HAL_GPIO_Init+0x228>
 800312e:	2302      	movs	r3, #2
 8003130:	e002      	b.n	8003138 <HAL_GPIO_Init+0x228>
 8003132:	2301      	movs	r3, #1
 8003134:	e000      	b.n	8003138 <HAL_GPIO_Init+0x228>
 8003136:	2300      	movs	r3, #0
 8003138:	69fa      	ldr	r2, [r7, #28]
 800313a:	f002 0203 	and.w	r2, r2, #3
 800313e:	0092      	lsls	r2, r2, #2
 8003140:	4093      	lsls	r3, r2
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	4313      	orrs	r3, r2
 8003146:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003148:	4935      	ldr	r1, [pc, #212]	; (8003220 <HAL_GPIO_Init+0x310>)
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	089b      	lsrs	r3, r3, #2
 800314e:	3302      	adds	r3, #2
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003156:	4b3b      	ldr	r3, [pc, #236]	; (8003244 <HAL_GPIO_Init+0x334>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	43db      	mvns	r3, r3
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	4013      	ands	r3, r2
 8003164:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d003      	beq.n	800317a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	4313      	orrs	r3, r2
 8003178:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800317a:	4a32      	ldr	r2, [pc, #200]	; (8003244 <HAL_GPIO_Init+0x334>)
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003180:	4b30      	ldr	r3, [pc, #192]	; (8003244 <HAL_GPIO_Init+0x334>)
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	43db      	mvns	r3, r3
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	4013      	ands	r3, r2
 800318e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d003      	beq.n	80031a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031a4:	4a27      	ldr	r2, [pc, #156]	; (8003244 <HAL_GPIO_Init+0x334>)
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031aa:	4b26      	ldr	r3, [pc, #152]	; (8003244 <HAL_GPIO_Init+0x334>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	43db      	mvns	r3, r3
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	4013      	ands	r3, r2
 80031b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d003      	beq.n	80031ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031ce:	4a1d      	ldr	r2, [pc, #116]	; (8003244 <HAL_GPIO_Init+0x334>)
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031d4:	4b1b      	ldr	r3, [pc, #108]	; (8003244 <HAL_GPIO_Init+0x334>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	43db      	mvns	r3, r3
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	4013      	ands	r3, r2
 80031e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d003      	beq.n	80031f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031f8:	4a12      	ldr	r2, [pc, #72]	; (8003244 <HAL_GPIO_Init+0x334>)
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	3301      	adds	r3, #1
 8003202:	61fb      	str	r3, [r7, #28]
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	2b0f      	cmp	r3, #15
 8003208:	f67f ae90 	bls.w	8002f2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800320c:	bf00      	nop
 800320e:	bf00      	nop
 8003210:	3724      	adds	r7, #36	; 0x24
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	40023800 	.word	0x40023800
 8003220:	40013800 	.word	0x40013800
 8003224:	40020000 	.word	0x40020000
 8003228:	40020400 	.word	0x40020400
 800322c:	40020800 	.word	0x40020800
 8003230:	40020c00 	.word	0x40020c00
 8003234:	40021000 	.word	0x40021000
 8003238:	40021400 	.word	0x40021400
 800323c:	40021800 	.word	0x40021800
 8003240:	40021c00 	.word	0x40021c00
 8003244:	40013c00 	.word	0x40013c00

08003248 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	460b      	mov	r3, r1
 8003252:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	691a      	ldr	r2, [r3, #16]
 8003258:	887b      	ldrh	r3, [r7, #2]
 800325a:	4013      	ands	r3, r2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d002      	beq.n	8003266 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003260:	2301      	movs	r3, #1
 8003262:	73fb      	strb	r3, [r7, #15]
 8003264:	e001      	b.n	800326a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003266:	2300      	movs	r3, #0
 8003268:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800326a:	7bfb      	ldrb	r3, [r7, #15]
}
 800326c:	4618      	mov	r0, r3
 800326e:	3714      	adds	r7, #20
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	460b      	mov	r3, r1
 8003282:	807b      	strh	r3, [r7, #2]
 8003284:	4613      	mov	r3, r2
 8003286:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003288:	787b      	ldrb	r3, [r7, #1]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d003      	beq.n	8003296 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800328e:	887a      	ldrh	r2, [r7, #2]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003294:	e003      	b.n	800329e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003296:	887b      	ldrh	r3, [r7, #2]
 8003298:	041a      	lsls	r2, r3, #16
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	619a      	str	r2, [r3, #24]
}
 800329e:	bf00      	nop
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
	...

080032ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e267      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d075      	beq.n	80033b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032ca:	4b88      	ldr	r3, [pc, #544]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 030c 	and.w	r3, r3, #12
 80032d2:	2b04      	cmp	r3, #4
 80032d4:	d00c      	beq.n	80032f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032d6:	4b85      	ldr	r3, [pc, #532]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032de:	2b08      	cmp	r3, #8
 80032e0:	d112      	bne.n	8003308 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032e2:	4b82      	ldr	r3, [pc, #520]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032ee:	d10b      	bne.n	8003308 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032f0:	4b7e      	ldr	r3, [pc, #504]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d05b      	beq.n	80033b4 <HAL_RCC_OscConfig+0x108>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d157      	bne.n	80033b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e242      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003310:	d106      	bne.n	8003320 <HAL_RCC_OscConfig+0x74>
 8003312:	4b76      	ldr	r3, [pc, #472]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a75      	ldr	r2, [pc, #468]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 8003318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800331c:	6013      	str	r3, [r2, #0]
 800331e:	e01d      	b.n	800335c <HAL_RCC_OscConfig+0xb0>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003328:	d10c      	bne.n	8003344 <HAL_RCC_OscConfig+0x98>
 800332a:	4b70      	ldr	r3, [pc, #448]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a6f      	ldr	r2, [pc, #444]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 8003330:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003334:	6013      	str	r3, [r2, #0]
 8003336:	4b6d      	ldr	r3, [pc, #436]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a6c      	ldr	r2, [pc, #432]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 800333c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003340:	6013      	str	r3, [r2, #0]
 8003342:	e00b      	b.n	800335c <HAL_RCC_OscConfig+0xb0>
 8003344:	4b69      	ldr	r3, [pc, #420]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a68      	ldr	r2, [pc, #416]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 800334a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800334e:	6013      	str	r3, [r2, #0]
 8003350:	4b66      	ldr	r3, [pc, #408]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a65      	ldr	r2, [pc, #404]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 8003356:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800335a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d013      	beq.n	800338c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003364:	f7fe fb84 	bl	8001a70 <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800336c:	f7fe fb80 	bl	8001a70 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b64      	cmp	r3, #100	; 0x64
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e207      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800337e:	4b5b      	ldr	r3, [pc, #364]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d0f0      	beq.n	800336c <HAL_RCC_OscConfig+0xc0>
 800338a:	e014      	b.n	80033b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800338c:	f7fe fb70 	bl	8001a70 <HAL_GetTick>
 8003390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003392:	e008      	b.n	80033a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003394:	f7fe fb6c 	bl	8001a70 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b64      	cmp	r3, #100	; 0x64
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e1f3      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033a6:	4b51      	ldr	r3, [pc, #324]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1f0      	bne.n	8003394 <HAL_RCC_OscConfig+0xe8>
 80033b2:	e000      	b.n	80033b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d063      	beq.n	800348a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033c2:	4b4a      	ldr	r3, [pc, #296]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 030c 	and.w	r3, r3, #12
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00b      	beq.n	80033e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033ce:	4b47      	ldr	r3, [pc, #284]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033d6:	2b08      	cmp	r3, #8
 80033d8:	d11c      	bne.n	8003414 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033da:	4b44      	ldr	r3, [pc, #272]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d116      	bne.n	8003414 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033e6:	4b41      	ldr	r3, [pc, #260]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d005      	beq.n	80033fe <HAL_RCC_OscConfig+0x152>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d001      	beq.n	80033fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e1c7      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033fe:	4b3b      	ldr	r3, [pc, #236]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	4937      	ldr	r1, [pc, #220]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 800340e:	4313      	orrs	r3, r2
 8003410:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003412:	e03a      	b.n	800348a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d020      	beq.n	800345e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800341c:	4b34      	ldr	r3, [pc, #208]	; (80034f0 <HAL_RCC_OscConfig+0x244>)
 800341e:	2201      	movs	r2, #1
 8003420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003422:	f7fe fb25 	bl	8001a70 <HAL_GetTick>
 8003426:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003428:	e008      	b.n	800343c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800342a:	f7fe fb21 	bl	8001a70 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d901      	bls.n	800343c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e1a8      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800343c:	4b2b      	ldr	r3, [pc, #172]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d0f0      	beq.n	800342a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003448:	4b28      	ldr	r3, [pc, #160]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	00db      	lsls	r3, r3, #3
 8003456:	4925      	ldr	r1, [pc, #148]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 8003458:	4313      	orrs	r3, r2
 800345a:	600b      	str	r3, [r1, #0]
 800345c:	e015      	b.n	800348a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800345e:	4b24      	ldr	r3, [pc, #144]	; (80034f0 <HAL_RCC_OscConfig+0x244>)
 8003460:	2200      	movs	r2, #0
 8003462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003464:	f7fe fb04 	bl	8001a70 <HAL_GetTick>
 8003468:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800346a:	e008      	b.n	800347e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800346c:	f7fe fb00 	bl	8001a70 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b02      	cmp	r3, #2
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e187      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800347e:	4b1b      	ldr	r3, [pc, #108]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1f0      	bne.n	800346c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0308 	and.w	r3, r3, #8
 8003492:	2b00      	cmp	r3, #0
 8003494:	d036      	beq.n	8003504 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d016      	beq.n	80034cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800349e:	4b15      	ldr	r3, [pc, #84]	; (80034f4 <HAL_RCC_OscConfig+0x248>)
 80034a0:	2201      	movs	r2, #1
 80034a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a4:	f7fe fae4 	bl	8001a70 <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034ac:	f7fe fae0 	bl	8001a70 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e167      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034be:	4b0b      	ldr	r3, [pc, #44]	; (80034ec <HAL_RCC_OscConfig+0x240>)
 80034c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d0f0      	beq.n	80034ac <HAL_RCC_OscConfig+0x200>
 80034ca:	e01b      	b.n	8003504 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034cc:	4b09      	ldr	r3, [pc, #36]	; (80034f4 <HAL_RCC_OscConfig+0x248>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034d2:	f7fe facd 	bl	8001a70 <HAL_GetTick>
 80034d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034d8:	e00e      	b.n	80034f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034da:	f7fe fac9 	bl	8001a70 <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d907      	bls.n	80034f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e150      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
 80034ec:	40023800 	.word	0x40023800
 80034f0:	42470000 	.word	0x42470000
 80034f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034f8:	4b88      	ldr	r3, [pc, #544]	; (800371c <HAL_RCC_OscConfig+0x470>)
 80034fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d1ea      	bne.n	80034da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0304 	and.w	r3, r3, #4
 800350c:	2b00      	cmp	r3, #0
 800350e:	f000 8097 	beq.w	8003640 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003512:	2300      	movs	r3, #0
 8003514:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003516:	4b81      	ldr	r3, [pc, #516]	; (800371c <HAL_RCC_OscConfig+0x470>)
 8003518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d10f      	bne.n	8003542 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003522:	2300      	movs	r3, #0
 8003524:	60bb      	str	r3, [r7, #8]
 8003526:	4b7d      	ldr	r3, [pc, #500]	; (800371c <HAL_RCC_OscConfig+0x470>)
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	4a7c      	ldr	r2, [pc, #496]	; (800371c <HAL_RCC_OscConfig+0x470>)
 800352c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003530:	6413      	str	r3, [r2, #64]	; 0x40
 8003532:	4b7a      	ldr	r3, [pc, #488]	; (800371c <HAL_RCC_OscConfig+0x470>)
 8003534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800353a:	60bb      	str	r3, [r7, #8]
 800353c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800353e:	2301      	movs	r3, #1
 8003540:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003542:	4b77      	ldr	r3, [pc, #476]	; (8003720 <HAL_RCC_OscConfig+0x474>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800354a:	2b00      	cmp	r3, #0
 800354c:	d118      	bne.n	8003580 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800354e:	4b74      	ldr	r3, [pc, #464]	; (8003720 <HAL_RCC_OscConfig+0x474>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a73      	ldr	r2, [pc, #460]	; (8003720 <HAL_RCC_OscConfig+0x474>)
 8003554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003558:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800355a:	f7fe fa89 	bl	8001a70 <HAL_GetTick>
 800355e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003560:	e008      	b.n	8003574 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003562:	f7fe fa85 	bl	8001a70 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d901      	bls.n	8003574 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e10c      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003574:	4b6a      	ldr	r3, [pc, #424]	; (8003720 <HAL_RCC_OscConfig+0x474>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0f0      	beq.n	8003562 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d106      	bne.n	8003596 <HAL_RCC_OscConfig+0x2ea>
 8003588:	4b64      	ldr	r3, [pc, #400]	; (800371c <HAL_RCC_OscConfig+0x470>)
 800358a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800358c:	4a63      	ldr	r2, [pc, #396]	; (800371c <HAL_RCC_OscConfig+0x470>)
 800358e:	f043 0301 	orr.w	r3, r3, #1
 8003592:	6713      	str	r3, [r2, #112]	; 0x70
 8003594:	e01c      	b.n	80035d0 <HAL_RCC_OscConfig+0x324>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	2b05      	cmp	r3, #5
 800359c:	d10c      	bne.n	80035b8 <HAL_RCC_OscConfig+0x30c>
 800359e:	4b5f      	ldr	r3, [pc, #380]	; (800371c <HAL_RCC_OscConfig+0x470>)
 80035a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a2:	4a5e      	ldr	r2, [pc, #376]	; (800371c <HAL_RCC_OscConfig+0x470>)
 80035a4:	f043 0304 	orr.w	r3, r3, #4
 80035a8:	6713      	str	r3, [r2, #112]	; 0x70
 80035aa:	4b5c      	ldr	r3, [pc, #368]	; (800371c <HAL_RCC_OscConfig+0x470>)
 80035ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ae:	4a5b      	ldr	r2, [pc, #364]	; (800371c <HAL_RCC_OscConfig+0x470>)
 80035b0:	f043 0301 	orr.w	r3, r3, #1
 80035b4:	6713      	str	r3, [r2, #112]	; 0x70
 80035b6:	e00b      	b.n	80035d0 <HAL_RCC_OscConfig+0x324>
 80035b8:	4b58      	ldr	r3, [pc, #352]	; (800371c <HAL_RCC_OscConfig+0x470>)
 80035ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035bc:	4a57      	ldr	r2, [pc, #348]	; (800371c <HAL_RCC_OscConfig+0x470>)
 80035be:	f023 0301 	bic.w	r3, r3, #1
 80035c2:	6713      	str	r3, [r2, #112]	; 0x70
 80035c4:	4b55      	ldr	r3, [pc, #340]	; (800371c <HAL_RCC_OscConfig+0x470>)
 80035c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c8:	4a54      	ldr	r2, [pc, #336]	; (800371c <HAL_RCC_OscConfig+0x470>)
 80035ca:	f023 0304 	bic.w	r3, r3, #4
 80035ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d015      	beq.n	8003604 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d8:	f7fe fa4a 	bl	8001a70 <HAL_GetTick>
 80035dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035de:	e00a      	b.n	80035f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035e0:	f7fe fa46 	bl	8001a70 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e0cb      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f6:	4b49      	ldr	r3, [pc, #292]	; (800371c <HAL_RCC_OscConfig+0x470>)
 80035f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d0ee      	beq.n	80035e0 <HAL_RCC_OscConfig+0x334>
 8003602:	e014      	b.n	800362e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003604:	f7fe fa34 	bl	8001a70 <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800360a:	e00a      	b.n	8003622 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800360c:	f7fe fa30 	bl	8001a70 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	f241 3288 	movw	r2, #5000	; 0x1388
 800361a:	4293      	cmp	r3, r2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e0b5      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003622:	4b3e      	ldr	r3, [pc, #248]	; (800371c <HAL_RCC_OscConfig+0x470>)
 8003624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1ee      	bne.n	800360c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800362e:	7dfb      	ldrb	r3, [r7, #23]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d105      	bne.n	8003640 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003634:	4b39      	ldr	r3, [pc, #228]	; (800371c <HAL_RCC_OscConfig+0x470>)
 8003636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003638:	4a38      	ldr	r2, [pc, #224]	; (800371c <HAL_RCC_OscConfig+0x470>)
 800363a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800363e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 80a1 	beq.w	800378c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800364a:	4b34      	ldr	r3, [pc, #208]	; (800371c <HAL_RCC_OscConfig+0x470>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 030c 	and.w	r3, r3, #12
 8003652:	2b08      	cmp	r3, #8
 8003654:	d05c      	beq.n	8003710 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	2b02      	cmp	r3, #2
 800365c:	d141      	bne.n	80036e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800365e:	4b31      	ldr	r3, [pc, #196]	; (8003724 <HAL_RCC_OscConfig+0x478>)
 8003660:	2200      	movs	r2, #0
 8003662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003664:	f7fe fa04 	bl	8001a70 <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800366a:	e008      	b.n	800367e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800366c:	f7fe fa00 	bl	8001a70 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b02      	cmp	r3, #2
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e087      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800367e:	4b27      	ldr	r3, [pc, #156]	; (800371c <HAL_RCC_OscConfig+0x470>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1f0      	bne.n	800366c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	69da      	ldr	r2, [r3, #28]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	431a      	orrs	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003698:	019b      	lsls	r3, r3, #6
 800369a:	431a      	orrs	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a0:	085b      	lsrs	r3, r3, #1
 80036a2:	3b01      	subs	r3, #1
 80036a4:	041b      	lsls	r3, r3, #16
 80036a6:	431a      	orrs	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ac:	061b      	lsls	r3, r3, #24
 80036ae:	491b      	ldr	r1, [pc, #108]	; (800371c <HAL_RCC_OscConfig+0x470>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036b4:	4b1b      	ldr	r3, [pc, #108]	; (8003724 <HAL_RCC_OscConfig+0x478>)
 80036b6:	2201      	movs	r2, #1
 80036b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ba:	f7fe f9d9 	bl	8001a70 <HAL_GetTick>
 80036be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036c0:	e008      	b.n	80036d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036c2:	f7fe f9d5 	bl	8001a70 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d901      	bls.n	80036d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e05c      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036d4:	4b11      	ldr	r3, [pc, #68]	; (800371c <HAL_RCC_OscConfig+0x470>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d0f0      	beq.n	80036c2 <HAL_RCC_OscConfig+0x416>
 80036e0:	e054      	b.n	800378c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036e2:	4b10      	ldr	r3, [pc, #64]	; (8003724 <HAL_RCC_OscConfig+0x478>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e8:	f7fe f9c2 	bl	8001a70 <HAL_GetTick>
 80036ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ee:	e008      	b.n	8003702 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036f0:	f7fe f9be 	bl	8001a70 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e045      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003702:	4b06      	ldr	r3, [pc, #24]	; (800371c <HAL_RCC_OscConfig+0x470>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1f0      	bne.n	80036f0 <HAL_RCC_OscConfig+0x444>
 800370e:	e03d      	b.n	800378c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d107      	bne.n	8003728 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e038      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
 800371c:	40023800 	.word	0x40023800
 8003720:	40007000 	.word	0x40007000
 8003724:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003728:	4b1b      	ldr	r3, [pc, #108]	; (8003798 <HAL_RCC_OscConfig+0x4ec>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d028      	beq.n	8003788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003740:	429a      	cmp	r2, r3
 8003742:	d121      	bne.n	8003788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800374e:	429a      	cmp	r2, r3
 8003750:	d11a      	bne.n	8003788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003758:	4013      	ands	r3, r2
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800375e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003760:	4293      	cmp	r3, r2
 8003762:	d111      	bne.n	8003788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376e:	085b      	lsrs	r3, r3, #1
 8003770:	3b01      	subs	r3, #1
 8003772:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003774:	429a      	cmp	r2, r3
 8003776:	d107      	bne.n	8003788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003782:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003784:	429a      	cmp	r2, r3
 8003786:	d001      	beq.n	800378c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e000      	b.n	800378e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3718      	adds	r7, #24
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	40023800 	.word	0x40023800

0800379c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e0cc      	b.n	800394a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037b0:	4b68      	ldr	r3, [pc, #416]	; (8003954 <HAL_RCC_ClockConfig+0x1b8>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0307 	and.w	r3, r3, #7
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d90c      	bls.n	80037d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037be:	4b65      	ldr	r3, [pc, #404]	; (8003954 <HAL_RCC_ClockConfig+0x1b8>)
 80037c0:	683a      	ldr	r2, [r7, #0]
 80037c2:	b2d2      	uxtb	r2, r2
 80037c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037c6:	4b63      	ldr	r3, [pc, #396]	; (8003954 <HAL_RCC_ClockConfig+0x1b8>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0307 	and.w	r3, r3, #7
 80037ce:	683a      	ldr	r2, [r7, #0]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d001      	beq.n	80037d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e0b8      	b.n	800394a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d020      	beq.n	8003826 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0304 	and.w	r3, r3, #4
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d005      	beq.n	80037fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037f0:	4b59      	ldr	r3, [pc, #356]	; (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	4a58      	ldr	r2, [pc, #352]	; (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 80037f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0308 	and.w	r3, r3, #8
 8003804:	2b00      	cmp	r3, #0
 8003806:	d005      	beq.n	8003814 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003808:	4b53      	ldr	r3, [pc, #332]	; (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	4a52      	ldr	r2, [pc, #328]	; (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 800380e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003812:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003814:	4b50      	ldr	r3, [pc, #320]	; (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	494d      	ldr	r1, [pc, #308]	; (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 8003822:	4313      	orrs	r3, r2
 8003824:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b00      	cmp	r3, #0
 8003830:	d044      	beq.n	80038bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d107      	bne.n	800384a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800383a:	4b47      	ldr	r3, [pc, #284]	; (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d119      	bne.n	800387a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e07f      	b.n	800394a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	2b02      	cmp	r3, #2
 8003850:	d003      	beq.n	800385a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003856:	2b03      	cmp	r3, #3
 8003858:	d107      	bne.n	800386a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800385a:	4b3f      	ldr	r3, [pc, #252]	; (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d109      	bne.n	800387a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e06f      	b.n	800394a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800386a:	4b3b      	ldr	r3, [pc, #236]	; (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e067      	b.n	800394a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800387a:	4b37      	ldr	r3, [pc, #220]	; (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f023 0203 	bic.w	r2, r3, #3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	4934      	ldr	r1, [pc, #208]	; (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 8003888:	4313      	orrs	r3, r2
 800388a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800388c:	f7fe f8f0 	bl	8001a70 <HAL_GetTick>
 8003890:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003892:	e00a      	b.n	80038aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003894:	f7fe f8ec 	bl	8001a70 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e04f      	b.n	800394a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038aa:	4b2b      	ldr	r3, [pc, #172]	; (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f003 020c 	and.w	r2, r3, #12
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d1eb      	bne.n	8003894 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038bc:	4b25      	ldr	r3, [pc, #148]	; (8003954 <HAL_RCC_ClockConfig+0x1b8>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0307 	and.w	r3, r3, #7
 80038c4:	683a      	ldr	r2, [r7, #0]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d20c      	bcs.n	80038e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ca:	4b22      	ldr	r3, [pc, #136]	; (8003954 <HAL_RCC_ClockConfig+0x1b8>)
 80038cc:	683a      	ldr	r2, [r7, #0]
 80038ce:	b2d2      	uxtb	r2, r2
 80038d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038d2:	4b20      	ldr	r3, [pc, #128]	; (8003954 <HAL_RCC_ClockConfig+0x1b8>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0307 	and.w	r3, r3, #7
 80038da:	683a      	ldr	r2, [r7, #0]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d001      	beq.n	80038e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e032      	b.n	800394a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0304 	and.w	r3, r3, #4
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d008      	beq.n	8003902 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038f0:	4b19      	ldr	r3, [pc, #100]	; (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	4916      	ldr	r1, [pc, #88]	; (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0308 	and.w	r3, r3, #8
 800390a:	2b00      	cmp	r3, #0
 800390c:	d009      	beq.n	8003922 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800390e:	4b12      	ldr	r3, [pc, #72]	; (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	00db      	lsls	r3, r3, #3
 800391c:	490e      	ldr	r1, [pc, #56]	; (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 800391e:	4313      	orrs	r3, r2
 8003920:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003922:	f000 f821 	bl	8003968 <HAL_RCC_GetSysClockFreq>
 8003926:	4602      	mov	r2, r0
 8003928:	4b0b      	ldr	r3, [pc, #44]	; (8003958 <HAL_RCC_ClockConfig+0x1bc>)
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	091b      	lsrs	r3, r3, #4
 800392e:	f003 030f 	and.w	r3, r3, #15
 8003932:	490a      	ldr	r1, [pc, #40]	; (800395c <HAL_RCC_ClockConfig+0x1c0>)
 8003934:	5ccb      	ldrb	r3, [r1, r3]
 8003936:	fa22 f303 	lsr.w	r3, r2, r3
 800393a:	4a09      	ldr	r2, [pc, #36]	; (8003960 <HAL_RCC_ClockConfig+0x1c4>)
 800393c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800393e:	4b09      	ldr	r3, [pc, #36]	; (8003964 <HAL_RCC_ClockConfig+0x1c8>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4618      	mov	r0, r3
 8003944:	f7fe f850 	bl	80019e8 <HAL_InitTick>

  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	40023c00 	.word	0x40023c00
 8003958:	40023800 	.word	0x40023800
 800395c:	08006984 	.word	0x08006984
 8003960:	20000000 	.word	0x20000000
 8003964:	20000004 	.word	0x20000004

08003968 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003968:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800396c:	b094      	sub	sp, #80	; 0x50
 800396e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003970:	2300      	movs	r3, #0
 8003972:	647b      	str	r3, [r7, #68]	; 0x44
 8003974:	2300      	movs	r3, #0
 8003976:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003978:	2300      	movs	r3, #0
 800397a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800397c:	2300      	movs	r3, #0
 800397e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003980:	4b79      	ldr	r3, [pc, #484]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x200>)
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f003 030c 	and.w	r3, r3, #12
 8003988:	2b08      	cmp	r3, #8
 800398a:	d00d      	beq.n	80039a8 <HAL_RCC_GetSysClockFreq+0x40>
 800398c:	2b08      	cmp	r3, #8
 800398e:	f200 80e1 	bhi.w	8003b54 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003992:	2b00      	cmp	r3, #0
 8003994:	d002      	beq.n	800399c <HAL_RCC_GetSysClockFreq+0x34>
 8003996:	2b04      	cmp	r3, #4
 8003998:	d003      	beq.n	80039a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800399a:	e0db      	b.n	8003b54 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800399c:	4b73      	ldr	r3, [pc, #460]	; (8003b6c <HAL_RCC_GetSysClockFreq+0x204>)
 800399e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80039a0:	e0db      	b.n	8003b5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039a2:	4b72      	ldr	r3, [pc, #456]	; (8003b6c <HAL_RCC_GetSysClockFreq+0x204>)
 80039a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039a6:	e0d8      	b.n	8003b5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039a8:	4b6f      	ldr	r3, [pc, #444]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x200>)
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039b0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039b2:	4b6d      	ldr	r3, [pc, #436]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x200>)
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d063      	beq.n	8003a86 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039be:	4b6a      	ldr	r3, [pc, #424]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x200>)
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	099b      	lsrs	r3, r3, #6
 80039c4:	2200      	movs	r2, #0
 80039c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80039c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80039ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039d0:	633b      	str	r3, [r7, #48]	; 0x30
 80039d2:	2300      	movs	r3, #0
 80039d4:	637b      	str	r3, [r7, #52]	; 0x34
 80039d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80039da:	4622      	mov	r2, r4
 80039dc:	462b      	mov	r3, r5
 80039de:	f04f 0000 	mov.w	r0, #0
 80039e2:	f04f 0100 	mov.w	r1, #0
 80039e6:	0159      	lsls	r1, r3, #5
 80039e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039ec:	0150      	lsls	r0, r2, #5
 80039ee:	4602      	mov	r2, r0
 80039f0:	460b      	mov	r3, r1
 80039f2:	4621      	mov	r1, r4
 80039f4:	1a51      	subs	r1, r2, r1
 80039f6:	6139      	str	r1, [r7, #16]
 80039f8:	4629      	mov	r1, r5
 80039fa:	eb63 0301 	sbc.w	r3, r3, r1
 80039fe:	617b      	str	r3, [r7, #20]
 8003a00:	f04f 0200 	mov.w	r2, #0
 8003a04:	f04f 0300 	mov.w	r3, #0
 8003a08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a0c:	4659      	mov	r1, fp
 8003a0e:	018b      	lsls	r3, r1, #6
 8003a10:	4651      	mov	r1, sl
 8003a12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a16:	4651      	mov	r1, sl
 8003a18:	018a      	lsls	r2, r1, #6
 8003a1a:	4651      	mov	r1, sl
 8003a1c:	ebb2 0801 	subs.w	r8, r2, r1
 8003a20:	4659      	mov	r1, fp
 8003a22:	eb63 0901 	sbc.w	r9, r3, r1
 8003a26:	f04f 0200 	mov.w	r2, #0
 8003a2a:	f04f 0300 	mov.w	r3, #0
 8003a2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a3a:	4690      	mov	r8, r2
 8003a3c:	4699      	mov	r9, r3
 8003a3e:	4623      	mov	r3, r4
 8003a40:	eb18 0303 	adds.w	r3, r8, r3
 8003a44:	60bb      	str	r3, [r7, #8]
 8003a46:	462b      	mov	r3, r5
 8003a48:	eb49 0303 	adc.w	r3, r9, r3
 8003a4c:	60fb      	str	r3, [r7, #12]
 8003a4e:	f04f 0200 	mov.w	r2, #0
 8003a52:	f04f 0300 	mov.w	r3, #0
 8003a56:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a5a:	4629      	mov	r1, r5
 8003a5c:	028b      	lsls	r3, r1, #10
 8003a5e:	4621      	mov	r1, r4
 8003a60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a64:	4621      	mov	r1, r4
 8003a66:	028a      	lsls	r2, r1, #10
 8003a68:	4610      	mov	r0, r2
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a6e:	2200      	movs	r2, #0
 8003a70:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a78:	f7fc fbfa 	bl	8000270 <__aeabi_uldivmod>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	460b      	mov	r3, r1
 8003a80:	4613      	mov	r3, r2
 8003a82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a84:	e058      	b.n	8003b38 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a86:	4b38      	ldr	r3, [pc, #224]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	099b      	lsrs	r3, r3, #6
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	4618      	mov	r0, r3
 8003a90:	4611      	mov	r1, r2
 8003a92:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a96:	623b      	str	r3, [r7, #32]
 8003a98:	2300      	movs	r3, #0
 8003a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a9c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003aa0:	4642      	mov	r2, r8
 8003aa2:	464b      	mov	r3, r9
 8003aa4:	f04f 0000 	mov.w	r0, #0
 8003aa8:	f04f 0100 	mov.w	r1, #0
 8003aac:	0159      	lsls	r1, r3, #5
 8003aae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ab2:	0150      	lsls	r0, r2, #5
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	4641      	mov	r1, r8
 8003aba:	ebb2 0a01 	subs.w	sl, r2, r1
 8003abe:	4649      	mov	r1, r9
 8003ac0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ac4:	f04f 0200 	mov.w	r2, #0
 8003ac8:	f04f 0300 	mov.w	r3, #0
 8003acc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ad0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ad4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ad8:	ebb2 040a 	subs.w	r4, r2, sl
 8003adc:	eb63 050b 	sbc.w	r5, r3, fp
 8003ae0:	f04f 0200 	mov.w	r2, #0
 8003ae4:	f04f 0300 	mov.w	r3, #0
 8003ae8:	00eb      	lsls	r3, r5, #3
 8003aea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003aee:	00e2      	lsls	r2, r4, #3
 8003af0:	4614      	mov	r4, r2
 8003af2:	461d      	mov	r5, r3
 8003af4:	4643      	mov	r3, r8
 8003af6:	18e3      	adds	r3, r4, r3
 8003af8:	603b      	str	r3, [r7, #0]
 8003afa:	464b      	mov	r3, r9
 8003afc:	eb45 0303 	adc.w	r3, r5, r3
 8003b00:	607b      	str	r3, [r7, #4]
 8003b02:	f04f 0200 	mov.w	r2, #0
 8003b06:	f04f 0300 	mov.w	r3, #0
 8003b0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b0e:	4629      	mov	r1, r5
 8003b10:	028b      	lsls	r3, r1, #10
 8003b12:	4621      	mov	r1, r4
 8003b14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b18:	4621      	mov	r1, r4
 8003b1a:	028a      	lsls	r2, r1, #10
 8003b1c:	4610      	mov	r0, r2
 8003b1e:	4619      	mov	r1, r3
 8003b20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b22:	2200      	movs	r2, #0
 8003b24:	61bb      	str	r3, [r7, #24]
 8003b26:	61fa      	str	r2, [r7, #28]
 8003b28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b2c:	f7fc fba0 	bl	8000270 <__aeabi_uldivmod>
 8003b30:	4602      	mov	r2, r0
 8003b32:	460b      	mov	r3, r1
 8003b34:	4613      	mov	r3, r2
 8003b36:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b38:	4b0b      	ldr	r3, [pc, #44]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	0c1b      	lsrs	r3, r3, #16
 8003b3e:	f003 0303 	and.w	r3, r3, #3
 8003b42:	3301      	adds	r3, #1
 8003b44:	005b      	lsls	r3, r3, #1
 8003b46:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003b48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b52:	e002      	b.n	8003b5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b54:	4b05      	ldr	r3, [pc, #20]	; (8003b6c <HAL_RCC_GetSysClockFreq+0x204>)
 8003b56:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3750      	adds	r7, #80	; 0x50
 8003b60:	46bd      	mov	sp, r7
 8003b62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b66:	bf00      	nop
 8003b68:	40023800 	.word	0x40023800
 8003b6c:	00f42400 	.word	0x00f42400

08003b70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b70:	b480      	push	{r7}
 8003b72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b74:	4b03      	ldr	r3, [pc, #12]	; (8003b84 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b76:	681b      	ldr	r3, [r3, #0]
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	20000000 	.word	0x20000000

08003b88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b8c:	f7ff fff0 	bl	8003b70 <HAL_RCC_GetHCLKFreq>
 8003b90:	4602      	mov	r2, r0
 8003b92:	4b05      	ldr	r3, [pc, #20]	; (8003ba8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	0a9b      	lsrs	r3, r3, #10
 8003b98:	f003 0307 	and.w	r3, r3, #7
 8003b9c:	4903      	ldr	r1, [pc, #12]	; (8003bac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b9e:	5ccb      	ldrb	r3, [r1, r3]
 8003ba0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	40023800 	.word	0x40023800
 8003bac:	08006994 	.word	0x08006994

08003bb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003bb4:	f7ff ffdc 	bl	8003b70 <HAL_RCC_GetHCLKFreq>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	4b05      	ldr	r3, [pc, #20]	; (8003bd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	0b5b      	lsrs	r3, r3, #13
 8003bc0:	f003 0307 	and.w	r3, r3, #7
 8003bc4:	4903      	ldr	r1, [pc, #12]	; (8003bd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bc6:	5ccb      	ldrb	r3, [r1, r3]
 8003bc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	40023800 	.word	0x40023800
 8003bd4:	08006994 	.word	0x08006994

08003bd8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e07b      	b.n	8003ce2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d108      	bne.n	8003c04 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bfa:	d009      	beq.n	8003c10 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	61da      	str	r2, [r3, #28]
 8003c02:	e005      	b.n	8003c10 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d106      	bne.n	8003c30 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f7fd fbce 	bl	80013cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2202      	movs	r2, #2
 8003c34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c46:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c58:	431a      	orrs	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c62:	431a      	orrs	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	f003 0302 	and.w	r3, r3, #2
 8003c6c:	431a      	orrs	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	431a      	orrs	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c80:	431a      	orrs	r2, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	69db      	ldr	r3, [r3, #28]
 8003c86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a1b      	ldr	r3, [r3, #32]
 8003c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c94:	ea42 0103 	orr.w	r1, r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	0c1b      	lsrs	r3, r3, #16
 8003cae:	f003 0104 	and.w	r1, r3, #4
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb6:	f003 0210 	and.w	r2, r3, #16
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	69da      	ldr	r2, [r3, #28]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cd0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b088      	sub	sp, #32
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	60f8      	str	r0, [r7, #12]
 8003cf2:	60b9      	str	r1, [r7, #8]
 8003cf4:	603b      	str	r3, [r7, #0]
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d101      	bne.n	8003d0c <HAL_SPI_Transmit+0x22>
 8003d08:	2302      	movs	r3, #2
 8003d0a:	e126      	b.n	8003f5a <HAL_SPI_Transmit+0x270>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d14:	f7fd feac 	bl	8001a70 <HAL_GetTick>
 8003d18:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003d1a:	88fb      	ldrh	r3, [r7, #6]
 8003d1c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d002      	beq.n	8003d30 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d2e:	e10b      	b.n	8003f48 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d002      	beq.n	8003d3c <HAL_SPI_Transmit+0x52>
 8003d36:	88fb      	ldrh	r3, [r7, #6]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d102      	bne.n	8003d42 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d40:	e102      	b.n	8003f48 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2203      	movs	r2, #3
 8003d46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	68ba      	ldr	r2, [r7, #8]
 8003d54:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	88fa      	ldrh	r2, [r7, #6]
 8003d5a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	88fa      	ldrh	r2, [r7, #6]
 8003d60:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d88:	d10f      	bne.n	8003daa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d98:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003da8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db4:	2b40      	cmp	r3, #64	; 0x40
 8003db6:	d007      	beq.n	8003dc8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dc6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dd0:	d14b      	bne.n	8003e6a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d002      	beq.n	8003de0 <HAL_SPI_Transmit+0xf6>
 8003dda:	8afb      	ldrh	r3, [r7, #22]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d13e      	bne.n	8003e5e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de4:	881a      	ldrh	r2, [r3, #0]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df0:	1c9a      	adds	r2, r3, #2
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003e04:	e02b      	b.n	8003e5e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f003 0302 	and.w	r3, r3, #2
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d112      	bne.n	8003e3a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e18:	881a      	ldrh	r2, [r3, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e24:	1c9a      	adds	r2, r3, #2
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	3b01      	subs	r3, #1
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	86da      	strh	r2, [r3, #54]	; 0x36
 8003e38:	e011      	b.n	8003e5e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e3a:	f7fd fe19 	bl	8001a70 <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	683a      	ldr	r2, [r7, #0]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d803      	bhi.n	8003e52 <HAL_SPI_Transmit+0x168>
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e50:	d102      	bne.n	8003e58 <HAL_SPI_Transmit+0x16e>
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d102      	bne.n	8003e5e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003e5c:	e074      	b.n	8003f48 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1ce      	bne.n	8003e06 <HAL_SPI_Transmit+0x11c>
 8003e68:	e04c      	b.n	8003f04 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d002      	beq.n	8003e78 <HAL_SPI_Transmit+0x18e>
 8003e72:	8afb      	ldrh	r3, [r7, #22]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d140      	bne.n	8003efa <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	330c      	adds	r3, #12
 8003e82:	7812      	ldrb	r2, [r2, #0]
 8003e84:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8a:	1c5a      	adds	r2, r3, #1
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	3b01      	subs	r3, #1
 8003e98:	b29a      	uxth	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003e9e:	e02c      	b.n	8003efa <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d113      	bne.n	8003ed6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	330c      	adds	r3, #12
 8003eb8:	7812      	ldrb	r2, [r2, #0]
 8003eba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec0:	1c5a      	adds	r2, r3, #1
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	86da      	strh	r2, [r3, #54]	; 0x36
 8003ed4:	e011      	b.n	8003efa <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ed6:	f7fd fdcb 	bl	8001a70 <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d803      	bhi.n	8003eee <HAL_SPI_Transmit+0x204>
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eec:	d102      	bne.n	8003ef4 <HAL_SPI_Transmit+0x20a>
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d102      	bne.n	8003efa <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ef8:	e026      	b.n	8003f48 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1cd      	bne.n	8003ea0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	6839      	ldr	r1, [r7, #0]
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f000 fbcb 	bl	80046a4 <SPI_EndRxTxTransaction>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d002      	beq.n	8003f1a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2220      	movs	r2, #32
 8003f18:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d10a      	bne.n	8003f38 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f22:	2300      	movs	r3, #0
 8003f24:	613b      	str	r3, [r7, #16]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	613b      	str	r3, [r7, #16]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	613b      	str	r3, [r7, #16]
 8003f36:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d002      	beq.n	8003f46 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	77fb      	strb	r3, [r7, #31]
 8003f44:	e000      	b.n	8003f48 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003f46:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f58:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3720      	adds	r7, #32
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b088      	sub	sp, #32
 8003f66:	af02      	add	r7, sp, #8
 8003f68:	60f8      	str	r0, [r7, #12]
 8003f6a:	60b9      	str	r1, [r7, #8]
 8003f6c:	603b      	str	r3, [r7, #0]
 8003f6e:	4613      	mov	r3, r2
 8003f70:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f72:	2300      	movs	r3, #0
 8003f74:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f7e:	d112      	bne.n	8003fa6 <HAL_SPI_Receive+0x44>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d10e      	bne.n	8003fa6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2204      	movs	r2, #4
 8003f8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003f90:	88fa      	ldrh	r2, [r7, #6]
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	9300      	str	r3, [sp, #0]
 8003f96:	4613      	mov	r3, r2
 8003f98:	68ba      	ldr	r2, [r7, #8]
 8003f9a:	68b9      	ldr	r1, [r7, #8]
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f000 f8f1 	bl	8004184 <HAL_SPI_TransmitReceive>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	e0ea      	b.n	800417c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d101      	bne.n	8003fb4 <HAL_SPI_Receive+0x52>
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	e0e3      	b.n	800417c <HAL_SPI_Receive+0x21a>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fbc:	f7fd fd58 	bl	8001a70 <HAL_GetTick>
 8003fc0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d002      	beq.n	8003fd4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003fce:	2302      	movs	r3, #2
 8003fd0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003fd2:	e0ca      	b.n	800416a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d002      	beq.n	8003fe0 <HAL_SPI_Receive+0x7e>
 8003fda:	88fb      	ldrh	r3, [r7, #6]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d102      	bne.n	8003fe6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003fe4:	e0c1      	b.n	800416a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2204      	movs	r2, #4
 8003fea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	68ba      	ldr	r2, [r7, #8]
 8003ff8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	88fa      	ldrh	r2, [r7, #6]
 8003ffe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	88fa      	ldrh	r2, [r7, #6]
 8004004:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2200      	movs	r2, #0
 8004016:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2200      	movs	r2, #0
 800401c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800402c:	d10f      	bne.n	800404e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800403c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800404c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004058:	2b40      	cmp	r3, #64	; 0x40
 800405a:	d007      	beq.n	800406c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800406a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d162      	bne.n	800413a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004074:	e02e      	b.n	80040d4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f003 0301 	and.w	r3, r3, #1
 8004080:	2b01      	cmp	r3, #1
 8004082:	d115      	bne.n	80040b0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f103 020c 	add.w	r2, r3, #12
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004090:	7812      	ldrb	r2, [r2, #0]
 8004092:	b2d2      	uxtb	r2, r2
 8004094:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409a:	1c5a      	adds	r2, r3, #1
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	3b01      	subs	r3, #1
 80040a8:	b29a      	uxth	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80040ae:	e011      	b.n	80040d4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040b0:	f7fd fcde 	bl	8001a70 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	683a      	ldr	r2, [r7, #0]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d803      	bhi.n	80040c8 <HAL_SPI_Receive+0x166>
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c6:	d102      	bne.n	80040ce <HAL_SPI_Receive+0x16c>
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d102      	bne.n	80040d4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80040d2:	e04a      	b.n	800416a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040d8:	b29b      	uxth	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1cb      	bne.n	8004076 <HAL_SPI_Receive+0x114>
 80040de:	e031      	b.n	8004144 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d113      	bne.n	8004116 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68da      	ldr	r2, [r3, #12]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f8:	b292      	uxth	r2, r2
 80040fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004100:	1c9a      	adds	r2, r3, #2
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800410a:	b29b      	uxth	r3, r3
 800410c:	3b01      	subs	r3, #1
 800410e:	b29a      	uxth	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004114:	e011      	b.n	800413a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004116:	f7fd fcab 	bl	8001a70 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	683a      	ldr	r2, [r7, #0]
 8004122:	429a      	cmp	r2, r3
 8004124:	d803      	bhi.n	800412e <HAL_SPI_Receive+0x1cc>
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800412c:	d102      	bne.n	8004134 <HAL_SPI_Receive+0x1d2>
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d102      	bne.n	800413a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004138:	e017      	b.n	800416a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800413e:	b29b      	uxth	r3, r3
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1cd      	bne.n	80040e0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004144:	693a      	ldr	r2, [r7, #16]
 8004146:	6839      	ldr	r1, [r7, #0]
 8004148:	68f8      	ldr	r0, [r7, #12]
 800414a:	f000 fa45 	bl	80045d8 <SPI_EndRxTransaction>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d002      	beq.n	800415a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2220      	movs	r2, #32
 8004158:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800415e:	2b00      	cmp	r3, #0
 8004160:	d002      	beq.n	8004168 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	75fb      	strb	r3, [r7, #23]
 8004166:	e000      	b.n	800416a <HAL_SPI_Receive+0x208>
  }

error :
 8004168:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800417a:	7dfb      	ldrb	r3, [r7, #23]
}
 800417c:	4618      	mov	r0, r3
 800417e:	3718      	adds	r7, #24
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b08c      	sub	sp, #48	; 0x30
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
 8004190:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004192:	2301      	movs	r3, #1
 8004194:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004196:	2300      	movs	r3, #0
 8004198:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d101      	bne.n	80041aa <HAL_SPI_TransmitReceive+0x26>
 80041a6:	2302      	movs	r3, #2
 80041a8:	e18a      	b.n	80044c0 <HAL_SPI_TransmitReceive+0x33c>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041b2:	f7fd fc5d 	bl	8001a70 <HAL_GetTick>
 80041b6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80041c8:	887b      	ldrh	r3, [r7, #2]
 80041ca:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80041cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d00f      	beq.n	80041f4 <HAL_SPI_TransmitReceive+0x70>
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041da:	d107      	bne.n	80041ec <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d103      	bne.n	80041ec <HAL_SPI_TransmitReceive+0x68>
 80041e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80041e8:	2b04      	cmp	r3, #4
 80041ea:	d003      	beq.n	80041f4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80041ec:	2302      	movs	r3, #2
 80041ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80041f2:	e15b      	b.n	80044ac <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d005      	beq.n	8004206 <HAL_SPI_TransmitReceive+0x82>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d002      	beq.n	8004206 <HAL_SPI_TransmitReceive+0x82>
 8004200:	887b      	ldrh	r3, [r7, #2]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d103      	bne.n	800420e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800420c:	e14e      	b.n	80044ac <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b04      	cmp	r3, #4
 8004218:	d003      	beq.n	8004222 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2205      	movs	r2, #5
 800421e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	887a      	ldrh	r2, [r7, #2]
 8004232:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	887a      	ldrh	r2, [r7, #2]
 8004238:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	68ba      	ldr	r2, [r7, #8]
 800423e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	887a      	ldrh	r2, [r7, #2]
 8004244:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	887a      	ldrh	r2, [r7, #2]
 800424a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2200      	movs	r2, #0
 8004250:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004262:	2b40      	cmp	r3, #64	; 0x40
 8004264:	d007      	beq.n	8004276 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004274:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800427e:	d178      	bne.n	8004372 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d002      	beq.n	800428e <HAL_SPI_TransmitReceive+0x10a>
 8004288:	8b7b      	ldrh	r3, [r7, #26]
 800428a:	2b01      	cmp	r3, #1
 800428c:	d166      	bne.n	800435c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004292:	881a      	ldrh	r2, [r3, #0]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429e:	1c9a      	adds	r2, r3, #2
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	3b01      	subs	r3, #1
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042b2:	e053      	b.n	800435c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d11b      	bne.n	80042fa <HAL_SPI_TransmitReceive+0x176>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d016      	beq.n	80042fa <HAL_SPI_TransmitReceive+0x176>
 80042cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d113      	bne.n	80042fa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d6:	881a      	ldrh	r2, [r3, #0]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e2:	1c9a      	adds	r2, r3, #2
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	3b01      	subs	r3, #1
 80042f0:	b29a      	uxth	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80042f6:	2300      	movs	r3, #0
 80042f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	2b01      	cmp	r3, #1
 8004306:	d119      	bne.n	800433c <HAL_SPI_TransmitReceive+0x1b8>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800430c:	b29b      	uxth	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d014      	beq.n	800433c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68da      	ldr	r2, [r3, #12]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431c:	b292      	uxth	r2, r2
 800431e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004324:	1c9a      	adds	r2, r3, #2
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800432e:	b29b      	uxth	r3, r3
 8004330:	3b01      	subs	r3, #1
 8004332:	b29a      	uxth	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004338:	2301      	movs	r3, #1
 800433a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800433c:	f7fd fb98 	bl	8001a70 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004348:	429a      	cmp	r2, r3
 800434a:	d807      	bhi.n	800435c <HAL_SPI_TransmitReceive+0x1d8>
 800434c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800434e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004352:	d003      	beq.n	800435c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800435a:	e0a7      	b.n	80044ac <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004360:	b29b      	uxth	r3, r3
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1a6      	bne.n	80042b4 <HAL_SPI_TransmitReceive+0x130>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800436a:	b29b      	uxth	r3, r3
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1a1      	bne.n	80042b4 <HAL_SPI_TransmitReceive+0x130>
 8004370:	e07c      	b.n	800446c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d002      	beq.n	8004380 <HAL_SPI_TransmitReceive+0x1fc>
 800437a:	8b7b      	ldrh	r3, [r7, #26]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d16b      	bne.n	8004458 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	330c      	adds	r3, #12
 800438a:	7812      	ldrb	r2, [r2, #0]
 800438c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004392:	1c5a      	adds	r2, r3, #1
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800439c:	b29b      	uxth	r3, r3
 800439e:	3b01      	subs	r3, #1
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043a6:	e057      	b.n	8004458 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d11c      	bne.n	80043f0 <HAL_SPI_TransmitReceive+0x26c>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d017      	beq.n	80043f0 <HAL_SPI_TransmitReceive+0x26c>
 80043c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d114      	bne.n	80043f0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	330c      	adds	r3, #12
 80043d0:	7812      	ldrb	r2, [r2, #0]
 80043d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d8:	1c5a      	adds	r2, r3, #1
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	3b01      	subs	r3, #1
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80043ec:	2300      	movs	r3, #0
 80043ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d119      	bne.n	8004432 <HAL_SPI_TransmitReceive+0x2ae>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004402:	b29b      	uxth	r3, r3
 8004404:	2b00      	cmp	r3, #0
 8004406:	d014      	beq.n	8004432 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68da      	ldr	r2, [r3, #12]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004412:	b2d2      	uxtb	r2, r2
 8004414:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441a:	1c5a      	adds	r2, r3, #1
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004424:	b29b      	uxth	r3, r3
 8004426:	3b01      	subs	r3, #1
 8004428:	b29a      	uxth	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800442e:	2301      	movs	r3, #1
 8004430:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004432:	f7fd fb1d 	bl	8001a70 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800443e:	429a      	cmp	r2, r3
 8004440:	d803      	bhi.n	800444a <HAL_SPI_TransmitReceive+0x2c6>
 8004442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004448:	d102      	bne.n	8004450 <HAL_SPI_TransmitReceive+0x2cc>
 800444a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800444c:	2b00      	cmp	r3, #0
 800444e:	d103      	bne.n	8004458 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004456:	e029      	b.n	80044ac <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800445c:	b29b      	uxth	r3, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1a2      	bne.n	80043a8 <HAL_SPI_TransmitReceive+0x224>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004466:	b29b      	uxth	r3, r3
 8004468:	2b00      	cmp	r3, #0
 800446a:	d19d      	bne.n	80043a8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800446c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800446e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f000 f917 	bl	80046a4 <SPI_EndRxTxTransaction>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d006      	beq.n	800448a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2220      	movs	r2, #32
 8004486:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004488:	e010      	b.n	80044ac <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10b      	bne.n	80044aa <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004492:	2300      	movs	r3, #0
 8004494:	617b      	str	r3, [r7, #20]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	617b      	str	r3, [r7, #20]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	617b      	str	r3, [r7, #20]
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	e000      	b.n	80044ac <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80044aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80044bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3730      	adds	r7, #48	; 0x30
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b088      	sub	sp, #32
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	603b      	str	r3, [r7, #0]
 80044d4:	4613      	mov	r3, r2
 80044d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80044d8:	f7fd faca 	bl	8001a70 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e0:	1a9b      	subs	r3, r3, r2
 80044e2:	683a      	ldr	r2, [r7, #0]
 80044e4:	4413      	add	r3, r2
 80044e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80044e8:	f7fd fac2 	bl	8001a70 <HAL_GetTick>
 80044ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80044ee:	4b39      	ldr	r3, [pc, #228]	; (80045d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	015b      	lsls	r3, r3, #5
 80044f4:	0d1b      	lsrs	r3, r3, #20
 80044f6:	69fa      	ldr	r2, [r7, #28]
 80044f8:	fb02 f303 	mul.w	r3, r2, r3
 80044fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044fe:	e054      	b.n	80045aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004506:	d050      	beq.n	80045aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004508:	f7fd fab2 	bl	8001a70 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	69fa      	ldr	r2, [r7, #28]
 8004514:	429a      	cmp	r2, r3
 8004516:	d902      	bls.n	800451e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d13d      	bne.n	800459a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	685a      	ldr	r2, [r3, #4]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800452c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004536:	d111      	bne.n	800455c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004540:	d004      	beq.n	800454c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800454a:	d107      	bne.n	800455c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800455a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004560:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004564:	d10f      	bne.n	8004586 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004574:	601a      	str	r2, [r3, #0]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004584:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e017      	b.n	80045ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d101      	bne.n	80045a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80045a0:	2300      	movs	r3, #0
 80045a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	3b01      	subs	r3, #1
 80045a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	689a      	ldr	r2, [r3, #8]
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	4013      	ands	r3, r2
 80045b4:	68ba      	ldr	r2, [r7, #8]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	bf0c      	ite	eq
 80045ba:	2301      	moveq	r3, #1
 80045bc:	2300      	movne	r3, #0
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	461a      	mov	r2, r3
 80045c2:	79fb      	ldrb	r3, [r7, #7]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d19b      	bne.n	8004500 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3720      	adds	r7, #32
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	20000000 	.word	0x20000000

080045d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af02      	add	r7, sp, #8
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045ec:	d111      	bne.n	8004612 <SPI_EndRxTransaction+0x3a>
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045f6:	d004      	beq.n	8004602 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004600:	d107      	bne.n	8004612 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004610:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800461a:	d12a      	bne.n	8004672 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004624:	d012      	beq.n	800464c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	9300      	str	r3, [sp, #0]
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	2200      	movs	r2, #0
 800462e:	2180      	movs	r1, #128	; 0x80
 8004630:	68f8      	ldr	r0, [r7, #12]
 8004632:	f7ff ff49 	bl	80044c8 <SPI_WaitFlagStateUntilTimeout>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d02d      	beq.n	8004698 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004640:	f043 0220 	orr.w	r2, r3, #32
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e026      	b.n	800469a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	9300      	str	r3, [sp, #0]
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	2200      	movs	r2, #0
 8004654:	2101      	movs	r1, #1
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f7ff ff36 	bl	80044c8 <SPI_WaitFlagStateUntilTimeout>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d01a      	beq.n	8004698 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004666:	f043 0220 	orr.w	r2, r3, #32
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e013      	b.n	800469a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	9300      	str	r3, [sp, #0]
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	2200      	movs	r2, #0
 800467a:	2101      	movs	r1, #1
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f7ff ff23 	bl	80044c8 <SPI_WaitFlagStateUntilTimeout>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d007      	beq.n	8004698 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800468c:	f043 0220 	orr.w	r2, r3, #32
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e000      	b.n	800469a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3710      	adds	r7, #16
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
	...

080046a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b088      	sub	sp, #32
 80046a8:	af02      	add	r7, sp, #8
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80046b0:	4b1b      	ldr	r3, [pc, #108]	; (8004720 <SPI_EndRxTxTransaction+0x7c>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a1b      	ldr	r2, [pc, #108]	; (8004724 <SPI_EndRxTxTransaction+0x80>)
 80046b6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ba:	0d5b      	lsrs	r3, r3, #21
 80046bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80046c0:	fb02 f303 	mul.w	r3, r2, r3
 80046c4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046ce:	d112      	bne.n	80046f6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	9300      	str	r3, [sp, #0]
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	2200      	movs	r2, #0
 80046d8:	2180      	movs	r1, #128	; 0x80
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f7ff fef4 	bl	80044c8 <SPI_WaitFlagStateUntilTimeout>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d016      	beq.n	8004714 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ea:	f043 0220 	orr.w	r2, r3, #32
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e00f      	b.n	8004716 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00a      	beq.n	8004712 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	3b01      	subs	r3, #1
 8004700:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800470c:	2b80      	cmp	r3, #128	; 0x80
 800470e:	d0f2      	beq.n	80046f6 <SPI_EndRxTxTransaction+0x52>
 8004710:	e000      	b.n	8004714 <SPI_EndRxTxTransaction+0x70>
        break;
 8004712:	bf00      	nop
  }

  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3718      	adds	r7, #24
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	20000000 	.word	0x20000000
 8004724:	165e9f81 	.word	0x165e9f81

08004728 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e041      	b.n	80047be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d106      	bne.n	8004754 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7fc feda 	bl	8001508 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2202      	movs	r2, #2
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	3304      	adds	r3, #4
 8004764:	4619      	mov	r1, r3
 8004766:	4610      	mov	r0, r2
 8004768:	f000 fb36 	bl	8004dd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3708      	adds	r7, #8
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b082      	sub	sp, #8
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d101      	bne.n	80047d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e041      	b.n	800485c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d106      	bne.n	80047f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f7fc fe6b 	bl	80014c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2202      	movs	r2, #2
 80047f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	3304      	adds	r3, #4
 8004802:	4619      	mov	r1, r3
 8004804:	4610      	mov	r0, r2
 8004806:	f000 fae7 	bl	8004dd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2201      	movs	r2, #1
 8004826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2201      	movs	r2, #1
 8004836:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2201      	movs	r2, #1
 800483e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2201      	movs	r2, #1
 800484e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2201      	movs	r2, #1
 8004856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800485a:	2300      	movs	r3, #0
}
 800485c:	4618      	mov	r0, r3
 800485e:	3708      	adds	r7, #8
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b02      	cmp	r3, #2
 8004878:	d122      	bne.n	80048c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	f003 0302 	and.w	r3, r3, #2
 8004884:	2b02      	cmp	r3, #2
 8004886:	d11b      	bne.n	80048c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f06f 0202 	mvn.w	r2, #2
 8004890:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2201      	movs	r2, #1
 8004896:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	f003 0303 	and.w	r3, r3, #3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d003      	beq.n	80048ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 fa77 	bl	8004d9a <HAL_TIM_IC_CaptureCallback>
 80048ac:	e005      	b.n	80048ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 fa69 	bl	8004d86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 fa7a 	bl	8004dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	f003 0304 	and.w	r3, r3, #4
 80048ca:	2b04      	cmp	r3, #4
 80048cc:	d122      	bne.n	8004914 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	f003 0304 	and.w	r3, r3, #4
 80048d8:	2b04      	cmp	r3, #4
 80048da:	d11b      	bne.n	8004914 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f06f 0204 	mvn.w	r2, #4
 80048e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2202      	movs	r2, #2
 80048ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d003      	beq.n	8004902 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 fa4d 	bl	8004d9a <HAL_TIM_IC_CaptureCallback>
 8004900:	e005      	b.n	800490e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 fa3f 	bl	8004d86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f000 fa50 	bl	8004dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	f003 0308 	and.w	r3, r3, #8
 800491e:	2b08      	cmp	r3, #8
 8004920:	d122      	bne.n	8004968 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	f003 0308 	and.w	r3, r3, #8
 800492c:	2b08      	cmp	r3, #8
 800492e:	d11b      	bne.n	8004968 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f06f 0208 	mvn.w	r2, #8
 8004938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2204      	movs	r2, #4
 800493e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	69db      	ldr	r3, [r3, #28]
 8004946:	f003 0303 	and.w	r3, r3, #3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d003      	beq.n	8004956 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 fa23 	bl	8004d9a <HAL_TIM_IC_CaptureCallback>
 8004954:	e005      	b.n	8004962 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 fa15 	bl	8004d86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 fa26 	bl	8004dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	f003 0310 	and.w	r3, r3, #16
 8004972:	2b10      	cmp	r3, #16
 8004974:	d122      	bne.n	80049bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	f003 0310 	and.w	r3, r3, #16
 8004980:	2b10      	cmp	r3, #16
 8004982:	d11b      	bne.n	80049bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f06f 0210 	mvn.w	r2, #16
 800498c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2208      	movs	r2, #8
 8004992:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	69db      	ldr	r3, [r3, #28]
 800499a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d003      	beq.n	80049aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 f9f9 	bl	8004d9a <HAL_TIM_IC_CaptureCallback>
 80049a8:	e005      	b.n	80049b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 f9eb 	bl	8004d86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 f9fc 	bl	8004dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d10e      	bne.n	80049e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	f003 0301 	and.w	r3, r3, #1
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d107      	bne.n	80049e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f06f 0201 	mvn.w	r2, #1
 80049e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f7fb ff28 	bl	8000838 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049f2:	2b80      	cmp	r3, #128	; 0x80
 80049f4:	d10e      	bne.n	8004a14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a00:	2b80      	cmp	r3, #128	; 0x80
 8004a02:	d107      	bne.n	8004a14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 fd52 	bl	80054b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a1e:	2b40      	cmp	r3, #64	; 0x40
 8004a20:	d10e      	bne.n	8004a40 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a2c:	2b40      	cmp	r3, #64	; 0x40
 8004a2e:	d107      	bne.n	8004a40 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 f9c1 	bl	8004dc2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	f003 0320 	and.w	r3, r3, #32
 8004a4a:	2b20      	cmp	r3, #32
 8004a4c:	d10e      	bne.n	8004a6c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	f003 0320 	and.w	r3, r3, #32
 8004a58:	2b20      	cmp	r3, #32
 8004a5a:	d107      	bne.n	8004a6c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f06f 0220 	mvn.w	r2, #32
 8004a64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 fd1c 	bl	80054a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a6c:	bf00      	nop
 8004a6e:	3708      	adds	r7, #8
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b086      	sub	sp, #24
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a80:	2300      	movs	r3, #0
 8004a82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d101      	bne.n	8004a92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a8e:	2302      	movs	r3, #2
 8004a90:	e0ae      	b.n	8004bf0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2b0c      	cmp	r3, #12
 8004a9e:	f200 809f 	bhi.w	8004be0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004aa2:	a201      	add	r2, pc, #4	; (adr r2, 8004aa8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa8:	08004add 	.word	0x08004add
 8004aac:	08004be1 	.word	0x08004be1
 8004ab0:	08004be1 	.word	0x08004be1
 8004ab4:	08004be1 	.word	0x08004be1
 8004ab8:	08004b1d 	.word	0x08004b1d
 8004abc:	08004be1 	.word	0x08004be1
 8004ac0:	08004be1 	.word	0x08004be1
 8004ac4:	08004be1 	.word	0x08004be1
 8004ac8:	08004b5f 	.word	0x08004b5f
 8004acc:	08004be1 	.word	0x08004be1
 8004ad0:	08004be1 	.word	0x08004be1
 8004ad4:	08004be1 	.word	0x08004be1
 8004ad8:	08004b9f 	.word	0x08004b9f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68b9      	ldr	r1, [r7, #8]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f000 fa18 	bl	8004f18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	699a      	ldr	r2, [r3, #24]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f042 0208 	orr.w	r2, r2, #8
 8004af6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	699a      	ldr	r2, [r3, #24]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f022 0204 	bic.w	r2, r2, #4
 8004b06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	6999      	ldr	r1, [r3, #24]
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	691a      	ldr	r2, [r3, #16]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	430a      	orrs	r2, r1
 8004b18:	619a      	str	r2, [r3, #24]
      break;
 8004b1a:	e064      	b.n	8004be6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68b9      	ldr	r1, [r7, #8]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f000 fa68 	bl	8004ff8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	699a      	ldr	r2, [r3, #24]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	699a      	ldr	r2, [r3, #24]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6999      	ldr	r1, [r3, #24]
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	021a      	lsls	r2, r3, #8
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	619a      	str	r2, [r3, #24]
      break;
 8004b5c:	e043      	b.n	8004be6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68b9      	ldr	r1, [r7, #8]
 8004b64:	4618      	mov	r0, r3
 8004b66:	f000 fabd 	bl	80050e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	69da      	ldr	r2, [r3, #28]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f042 0208 	orr.w	r2, r2, #8
 8004b78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	69da      	ldr	r2, [r3, #28]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f022 0204 	bic.w	r2, r2, #4
 8004b88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	69d9      	ldr	r1, [r3, #28]
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	691a      	ldr	r2, [r3, #16]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	430a      	orrs	r2, r1
 8004b9a:	61da      	str	r2, [r3, #28]
      break;
 8004b9c:	e023      	b.n	8004be6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68b9      	ldr	r1, [r7, #8]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f000 fb11 	bl	80051cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	69da      	ldr	r2, [r3, #28]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	69da      	ldr	r2, [r3, #28]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	69d9      	ldr	r1, [r3, #28]
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	021a      	lsls	r2, r3, #8
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	61da      	str	r2, [r3, #28]
      break;
 8004bde:	e002      	b.n	8004be6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	75fb      	strb	r3, [r7, #23]
      break;
 8004be4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004bee:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3718      	adds	r7, #24
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c02:	2300      	movs	r3, #0
 8004c04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d101      	bne.n	8004c14 <HAL_TIM_ConfigClockSource+0x1c>
 8004c10:	2302      	movs	r3, #2
 8004c12:	e0b4      	b.n	8004d7e <HAL_TIM_ConfigClockSource+0x186>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2202      	movs	r2, #2
 8004c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68ba      	ldr	r2, [r7, #8]
 8004c42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c4c:	d03e      	beq.n	8004ccc <HAL_TIM_ConfigClockSource+0xd4>
 8004c4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c52:	f200 8087 	bhi.w	8004d64 <HAL_TIM_ConfigClockSource+0x16c>
 8004c56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c5a:	f000 8086 	beq.w	8004d6a <HAL_TIM_ConfigClockSource+0x172>
 8004c5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c62:	d87f      	bhi.n	8004d64 <HAL_TIM_ConfigClockSource+0x16c>
 8004c64:	2b70      	cmp	r3, #112	; 0x70
 8004c66:	d01a      	beq.n	8004c9e <HAL_TIM_ConfigClockSource+0xa6>
 8004c68:	2b70      	cmp	r3, #112	; 0x70
 8004c6a:	d87b      	bhi.n	8004d64 <HAL_TIM_ConfigClockSource+0x16c>
 8004c6c:	2b60      	cmp	r3, #96	; 0x60
 8004c6e:	d050      	beq.n	8004d12 <HAL_TIM_ConfigClockSource+0x11a>
 8004c70:	2b60      	cmp	r3, #96	; 0x60
 8004c72:	d877      	bhi.n	8004d64 <HAL_TIM_ConfigClockSource+0x16c>
 8004c74:	2b50      	cmp	r3, #80	; 0x50
 8004c76:	d03c      	beq.n	8004cf2 <HAL_TIM_ConfigClockSource+0xfa>
 8004c78:	2b50      	cmp	r3, #80	; 0x50
 8004c7a:	d873      	bhi.n	8004d64 <HAL_TIM_ConfigClockSource+0x16c>
 8004c7c:	2b40      	cmp	r3, #64	; 0x40
 8004c7e:	d058      	beq.n	8004d32 <HAL_TIM_ConfigClockSource+0x13a>
 8004c80:	2b40      	cmp	r3, #64	; 0x40
 8004c82:	d86f      	bhi.n	8004d64 <HAL_TIM_ConfigClockSource+0x16c>
 8004c84:	2b30      	cmp	r3, #48	; 0x30
 8004c86:	d064      	beq.n	8004d52 <HAL_TIM_ConfigClockSource+0x15a>
 8004c88:	2b30      	cmp	r3, #48	; 0x30
 8004c8a:	d86b      	bhi.n	8004d64 <HAL_TIM_ConfigClockSource+0x16c>
 8004c8c:	2b20      	cmp	r3, #32
 8004c8e:	d060      	beq.n	8004d52 <HAL_TIM_ConfigClockSource+0x15a>
 8004c90:	2b20      	cmp	r3, #32
 8004c92:	d867      	bhi.n	8004d64 <HAL_TIM_ConfigClockSource+0x16c>
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d05c      	beq.n	8004d52 <HAL_TIM_ConfigClockSource+0x15a>
 8004c98:	2b10      	cmp	r3, #16
 8004c9a:	d05a      	beq.n	8004d52 <HAL_TIM_ConfigClockSource+0x15a>
 8004c9c:	e062      	b.n	8004d64 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6818      	ldr	r0, [r3, #0]
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	6899      	ldr	r1, [r3, #8]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	685a      	ldr	r2, [r3, #4]
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	f000 fb5d 	bl	800536c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004cc0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68ba      	ldr	r2, [r7, #8]
 8004cc8:	609a      	str	r2, [r3, #8]
      break;
 8004cca:	e04f      	b.n	8004d6c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6818      	ldr	r0, [r3, #0]
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	6899      	ldr	r1, [r3, #8]
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	685a      	ldr	r2, [r3, #4]
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	f000 fb46 	bl	800536c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	689a      	ldr	r2, [r3, #8]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cee:	609a      	str	r2, [r3, #8]
      break;
 8004cf0:	e03c      	b.n	8004d6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6818      	ldr	r0, [r3, #0]
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	6859      	ldr	r1, [r3, #4]
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	461a      	mov	r2, r3
 8004d00:	f000 faba 	bl	8005278 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2150      	movs	r1, #80	; 0x50
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f000 fb13 	bl	8005336 <TIM_ITRx_SetConfig>
      break;
 8004d10:	e02c      	b.n	8004d6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6818      	ldr	r0, [r3, #0]
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	6859      	ldr	r1, [r3, #4]
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	461a      	mov	r2, r3
 8004d20:	f000 fad9 	bl	80052d6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2160      	movs	r1, #96	; 0x60
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f000 fb03 	bl	8005336 <TIM_ITRx_SetConfig>
      break;
 8004d30:	e01c      	b.n	8004d6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6818      	ldr	r0, [r3, #0]
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	6859      	ldr	r1, [r3, #4]
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	461a      	mov	r2, r3
 8004d40:	f000 fa9a 	bl	8005278 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2140      	movs	r1, #64	; 0x40
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f000 faf3 	bl	8005336 <TIM_ITRx_SetConfig>
      break;
 8004d50:	e00c      	b.n	8004d6c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	4610      	mov	r0, r2
 8004d5e:	f000 faea 	bl	8005336 <TIM_ITRx_SetConfig>
      break;
 8004d62:	e003      	b.n	8004d6c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	73fb      	strb	r3, [r7, #15]
      break;
 8004d68:	e000      	b.n	8004d6c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d86:	b480      	push	{r7}
 8004d88:	b083      	sub	sp, #12
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d8e:	bf00      	nop
 8004d90:	370c      	adds	r7, #12
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr

08004d9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b083      	sub	sp, #12
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004da2:	bf00      	nop
 8004da4:	370c      	adds	r7, #12
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr

08004dae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004dae:	b480      	push	{r7}
 8004db0:	b083      	sub	sp, #12
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004db6:	bf00      	nop
 8004db8:	370c      	adds	r7, #12
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr

08004dc2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004dc2:	b480      	push	{r7}
 8004dc4:	b083      	sub	sp, #12
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004dca:	bf00      	nop
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
	...

08004dd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a40      	ldr	r2, [pc, #256]	; (8004eec <TIM_Base_SetConfig+0x114>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d013      	beq.n	8004e18 <TIM_Base_SetConfig+0x40>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df6:	d00f      	beq.n	8004e18 <TIM_Base_SetConfig+0x40>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a3d      	ldr	r2, [pc, #244]	; (8004ef0 <TIM_Base_SetConfig+0x118>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d00b      	beq.n	8004e18 <TIM_Base_SetConfig+0x40>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a3c      	ldr	r2, [pc, #240]	; (8004ef4 <TIM_Base_SetConfig+0x11c>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d007      	beq.n	8004e18 <TIM_Base_SetConfig+0x40>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a3b      	ldr	r2, [pc, #236]	; (8004ef8 <TIM_Base_SetConfig+0x120>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d003      	beq.n	8004e18 <TIM_Base_SetConfig+0x40>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a3a      	ldr	r2, [pc, #232]	; (8004efc <TIM_Base_SetConfig+0x124>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d108      	bne.n	8004e2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a2f      	ldr	r2, [pc, #188]	; (8004eec <TIM_Base_SetConfig+0x114>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d02b      	beq.n	8004e8a <TIM_Base_SetConfig+0xb2>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e38:	d027      	beq.n	8004e8a <TIM_Base_SetConfig+0xb2>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a2c      	ldr	r2, [pc, #176]	; (8004ef0 <TIM_Base_SetConfig+0x118>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d023      	beq.n	8004e8a <TIM_Base_SetConfig+0xb2>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a2b      	ldr	r2, [pc, #172]	; (8004ef4 <TIM_Base_SetConfig+0x11c>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d01f      	beq.n	8004e8a <TIM_Base_SetConfig+0xb2>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a2a      	ldr	r2, [pc, #168]	; (8004ef8 <TIM_Base_SetConfig+0x120>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d01b      	beq.n	8004e8a <TIM_Base_SetConfig+0xb2>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a29      	ldr	r2, [pc, #164]	; (8004efc <TIM_Base_SetConfig+0x124>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d017      	beq.n	8004e8a <TIM_Base_SetConfig+0xb2>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a28      	ldr	r2, [pc, #160]	; (8004f00 <TIM_Base_SetConfig+0x128>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d013      	beq.n	8004e8a <TIM_Base_SetConfig+0xb2>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a27      	ldr	r2, [pc, #156]	; (8004f04 <TIM_Base_SetConfig+0x12c>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d00f      	beq.n	8004e8a <TIM_Base_SetConfig+0xb2>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a26      	ldr	r2, [pc, #152]	; (8004f08 <TIM_Base_SetConfig+0x130>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d00b      	beq.n	8004e8a <TIM_Base_SetConfig+0xb2>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a25      	ldr	r2, [pc, #148]	; (8004f0c <TIM_Base_SetConfig+0x134>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d007      	beq.n	8004e8a <TIM_Base_SetConfig+0xb2>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a24      	ldr	r2, [pc, #144]	; (8004f10 <TIM_Base_SetConfig+0x138>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d003      	beq.n	8004e8a <TIM_Base_SetConfig+0xb2>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a23      	ldr	r2, [pc, #140]	; (8004f14 <TIM_Base_SetConfig+0x13c>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d108      	bne.n	8004e9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	695b      	ldr	r3, [r3, #20]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	689a      	ldr	r2, [r3, #8]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a0a      	ldr	r2, [pc, #40]	; (8004eec <TIM_Base_SetConfig+0x114>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d003      	beq.n	8004ed0 <TIM_Base_SetConfig+0xf8>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a0c      	ldr	r2, [pc, #48]	; (8004efc <TIM_Base_SetConfig+0x124>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d103      	bne.n	8004ed8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	691a      	ldr	r2, [r3, #16]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	615a      	str	r2, [r3, #20]
}
 8004ede:	bf00      	nop
 8004ee0:	3714      	adds	r7, #20
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	40010000 	.word	0x40010000
 8004ef0:	40000400 	.word	0x40000400
 8004ef4:	40000800 	.word	0x40000800
 8004ef8:	40000c00 	.word	0x40000c00
 8004efc:	40010400 	.word	0x40010400
 8004f00:	40014000 	.word	0x40014000
 8004f04:	40014400 	.word	0x40014400
 8004f08:	40014800 	.word	0x40014800
 8004f0c:	40001800 	.word	0x40001800
 8004f10:	40001c00 	.word	0x40001c00
 8004f14:	40002000 	.word	0x40002000

08004f18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b087      	sub	sp, #28
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a1b      	ldr	r3, [r3, #32]
 8004f26:	f023 0201 	bic.w	r2, r3, #1
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a1b      	ldr	r3, [r3, #32]
 8004f32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f023 0303 	bic.w	r3, r3, #3
 8004f4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	f023 0302 	bic.w	r3, r3, #2
 8004f60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	697a      	ldr	r2, [r7, #20]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a20      	ldr	r2, [pc, #128]	; (8004ff0 <TIM_OC1_SetConfig+0xd8>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d003      	beq.n	8004f7c <TIM_OC1_SetConfig+0x64>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a1f      	ldr	r2, [pc, #124]	; (8004ff4 <TIM_OC1_SetConfig+0xdc>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d10c      	bne.n	8004f96 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	f023 0308 	bic.w	r3, r3, #8
 8004f82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	f023 0304 	bic.w	r3, r3, #4
 8004f94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a15      	ldr	r2, [pc, #84]	; (8004ff0 <TIM_OC1_SetConfig+0xd8>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d003      	beq.n	8004fa6 <TIM_OC1_SetConfig+0x8e>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a14      	ldr	r2, [pc, #80]	; (8004ff4 <TIM_OC1_SetConfig+0xdc>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d111      	bne.n	8004fca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	693a      	ldr	r2, [r7, #16]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	685a      	ldr	r2, [r3, #4]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	697a      	ldr	r2, [r7, #20]
 8004fe2:	621a      	str	r2, [r3, #32]
}
 8004fe4:	bf00      	nop
 8004fe6:	371c      	adds	r7, #28
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr
 8004ff0:	40010000 	.word	0x40010000
 8004ff4:	40010400 	.word	0x40010400

08004ff8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b087      	sub	sp, #28
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	f023 0210 	bic.w	r2, r3, #16
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800502e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	021b      	lsls	r3, r3, #8
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	4313      	orrs	r3, r2
 800503a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	f023 0320 	bic.w	r3, r3, #32
 8005042:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	011b      	lsls	r3, r3, #4
 800504a:	697a      	ldr	r2, [r7, #20]
 800504c:	4313      	orrs	r3, r2
 800504e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a22      	ldr	r2, [pc, #136]	; (80050dc <TIM_OC2_SetConfig+0xe4>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d003      	beq.n	8005060 <TIM_OC2_SetConfig+0x68>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a21      	ldr	r2, [pc, #132]	; (80050e0 <TIM_OC2_SetConfig+0xe8>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d10d      	bne.n	800507c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005066:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	011b      	lsls	r3, r3, #4
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	4313      	orrs	r3, r2
 8005072:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800507a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a17      	ldr	r2, [pc, #92]	; (80050dc <TIM_OC2_SetConfig+0xe4>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d003      	beq.n	800508c <TIM_OC2_SetConfig+0x94>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a16      	ldr	r2, [pc, #88]	; (80050e0 <TIM_OC2_SetConfig+0xe8>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d113      	bne.n	80050b4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005092:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800509a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	695b      	ldr	r3, [r3, #20]
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	685a      	ldr	r2, [r3, #4]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	621a      	str	r2, [r3, #32]
}
 80050ce:	bf00      	nop
 80050d0:	371c      	adds	r7, #28
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	40010000 	.word	0x40010000
 80050e0:	40010400 	.word	0x40010400

080050e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b087      	sub	sp, #28
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	69db      	ldr	r3, [r3, #28]
 800510a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f023 0303 	bic.w	r3, r3, #3
 800511a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	4313      	orrs	r3, r2
 8005124:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800512c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	021b      	lsls	r3, r3, #8
 8005134:	697a      	ldr	r2, [r7, #20]
 8005136:	4313      	orrs	r3, r2
 8005138:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a21      	ldr	r2, [pc, #132]	; (80051c4 <TIM_OC3_SetConfig+0xe0>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d003      	beq.n	800514a <TIM_OC3_SetConfig+0x66>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a20      	ldr	r2, [pc, #128]	; (80051c8 <TIM_OC3_SetConfig+0xe4>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d10d      	bne.n	8005166 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005150:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	021b      	lsls	r3, r3, #8
 8005158:	697a      	ldr	r2, [r7, #20]
 800515a:	4313      	orrs	r3, r2
 800515c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005164:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a16      	ldr	r2, [pc, #88]	; (80051c4 <TIM_OC3_SetConfig+0xe0>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d003      	beq.n	8005176 <TIM_OC3_SetConfig+0x92>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a15      	ldr	r2, [pc, #84]	; (80051c8 <TIM_OC3_SetConfig+0xe4>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d113      	bne.n	800519e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800517c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005184:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	011b      	lsls	r3, r3, #4
 800518c:	693a      	ldr	r2, [r7, #16]
 800518e:	4313      	orrs	r3, r2
 8005190:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	011b      	lsls	r3, r3, #4
 8005198:	693a      	ldr	r2, [r7, #16]
 800519a:	4313      	orrs	r3, r2
 800519c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	693a      	ldr	r2, [r7, #16]
 80051a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	685a      	ldr	r2, [r3, #4]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	697a      	ldr	r2, [r7, #20]
 80051b6:	621a      	str	r2, [r3, #32]
}
 80051b8:	bf00      	nop
 80051ba:	371c      	adds	r7, #28
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr
 80051c4:	40010000 	.word	0x40010000
 80051c8:	40010400 	.word	0x40010400

080051cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b087      	sub	sp, #28
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a1b      	ldr	r3, [r3, #32]
 80051e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	69db      	ldr	r3, [r3, #28]
 80051f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005202:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	021b      	lsls	r3, r3, #8
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	4313      	orrs	r3, r2
 800520e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005216:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	031b      	lsls	r3, r3, #12
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	4313      	orrs	r3, r2
 8005222:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a12      	ldr	r2, [pc, #72]	; (8005270 <TIM_OC4_SetConfig+0xa4>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d003      	beq.n	8005234 <TIM_OC4_SetConfig+0x68>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a11      	ldr	r2, [pc, #68]	; (8005274 <TIM_OC4_SetConfig+0xa8>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d109      	bne.n	8005248 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800523a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	695b      	ldr	r3, [r3, #20]
 8005240:	019b      	lsls	r3, r3, #6
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	4313      	orrs	r3, r2
 8005246:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	685a      	ldr	r2, [r3, #4]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	621a      	str	r2, [r3, #32]
}
 8005262:	bf00      	nop
 8005264:	371c      	adds	r7, #28
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	40010000 	.word	0x40010000
 8005274:	40010400 	.word	0x40010400

08005278 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005278:	b480      	push	{r7}
 800527a:	b087      	sub	sp, #28
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6a1b      	ldr	r3, [r3, #32]
 8005288:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6a1b      	ldr	r3, [r3, #32]
 800528e:	f023 0201 	bic.w	r2, r3, #1
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	011b      	lsls	r3, r3, #4
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	f023 030a 	bic.w	r3, r3, #10
 80052b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	693a      	ldr	r2, [r7, #16]
 80052c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	621a      	str	r2, [r3, #32]
}
 80052ca:	bf00      	nop
 80052cc:	371c      	adds	r7, #28
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr

080052d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052d6:	b480      	push	{r7}
 80052d8:	b087      	sub	sp, #28
 80052da:	af00      	add	r7, sp, #0
 80052dc:	60f8      	str	r0, [r7, #12]
 80052de:	60b9      	str	r1, [r7, #8]
 80052e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	f023 0210 	bic.w	r2, r3, #16
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6a1b      	ldr	r3, [r3, #32]
 80052f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005300:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	031b      	lsls	r3, r3, #12
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	4313      	orrs	r3, r2
 800530a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005312:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	011b      	lsls	r3, r3, #4
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	4313      	orrs	r3, r2
 800531c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	697a      	ldr	r2, [r7, #20]
 8005322:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	693a      	ldr	r2, [r7, #16]
 8005328:	621a      	str	r2, [r3, #32]
}
 800532a:	bf00      	nop
 800532c:	371c      	adds	r7, #28
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr

08005336 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005336:	b480      	push	{r7}
 8005338:	b085      	sub	sp, #20
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
 800533e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800534c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800534e:	683a      	ldr	r2, [r7, #0]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	4313      	orrs	r3, r2
 8005354:	f043 0307 	orr.w	r3, r3, #7
 8005358:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	609a      	str	r2, [r3, #8]
}
 8005360:	bf00      	nop
 8005362:	3714      	adds	r7, #20
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800536c:	b480      	push	{r7}
 800536e:	b087      	sub	sp, #28
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
 8005378:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005386:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	021a      	lsls	r2, r3, #8
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	431a      	orrs	r2, r3
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	4313      	orrs	r3, r2
 8005394:	697a      	ldr	r2, [r7, #20]
 8005396:	4313      	orrs	r3, r2
 8005398:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	697a      	ldr	r2, [r7, #20]
 800539e:	609a      	str	r2, [r3, #8]
}
 80053a0:	bf00      	nop
 80053a2:	371c      	adds	r7, #28
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d101      	bne.n	80053c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053c0:	2302      	movs	r3, #2
 80053c2:	e05a      	b.n	800547a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2202      	movs	r2, #2
 80053d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a21      	ldr	r2, [pc, #132]	; (8005488 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d022      	beq.n	800544e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005410:	d01d      	beq.n	800544e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a1d      	ldr	r2, [pc, #116]	; (800548c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d018      	beq.n	800544e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a1b      	ldr	r2, [pc, #108]	; (8005490 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d013      	beq.n	800544e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a1a      	ldr	r2, [pc, #104]	; (8005494 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d00e      	beq.n	800544e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a18      	ldr	r2, [pc, #96]	; (8005498 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d009      	beq.n	800544e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a17      	ldr	r2, [pc, #92]	; (800549c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d004      	beq.n	800544e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a15      	ldr	r2, [pc, #84]	; (80054a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d10c      	bne.n	8005468 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005454:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	68ba      	ldr	r2, [r7, #8]
 800545c:	4313      	orrs	r3, r2
 800545e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68ba      	ldr	r2, [r7, #8]
 8005466:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3714      	adds	r7, #20
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
 8005486:	bf00      	nop
 8005488:	40010000 	.word	0x40010000
 800548c:	40000400 	.word	0x40000400
 8005490:	40000800 	.word	0x40000800
 8005494:	40000c00 	.word	0x40000c00
 8005498:	40010400 	.word	0x40010400
 800549c:	40014000 	.word	0x40014000
 80054a0:	40001800 	.word	0x40001800

080054a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054ac:	bf00      	nop
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054c0:	bf00      	nop
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b082      	sub	sp, #8
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d101      	bne.n	80054de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e03f      	b.n	800555e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d106      	bne.n	80054f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f7fc f8bc 	bl	8001670 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2224      	movs	r2, #36	; 0x24
 80054fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68da      	ldr	r2, [r3, #12]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800550e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 f829 	bl	8005568 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	691a      	ldr	r2, [r3, #16]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005524:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	695a      	ldr	r2, [r3, #20]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005534:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68da      	ldr	r2, [r3, #12]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005544:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2220      	movs	r2, #32
 8005550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2220      	movs	r2, #32
 8005558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	3708      	adds	r7, #8
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
	...

08005568 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005568:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800556c:	b0c0      	sub	sp, #256	; 0x100
 800556e:	af00      	add	r7, sp, #0
 8005570:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005584:	68d9      	ldr	r1, [r3, #12]
 8005586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	ea40 0301 	orr.w	r3, r0, r1
 8005590:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005596:	689a      	ldr	r2, [r3, #8]
 8005598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	431a      	orrs	r2, r3
 80055a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	431a      	orrs	r2, r3
 80055a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ac:	69db      	ldr	r3, [r3, #28]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80055b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80055c0:	f021 010c 	bic.w	r1, r1, #12
 80055c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80055ce:	430b      	orrs	r3, r1
 80055d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80055de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e2:	6999      	ldr	r1, [r3, #24]
 80055e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	ea40 0301 	orr.w	r3, r0, r1
 80055ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80055f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	4b8f      	ldr	r3, [pc, #572]	; (8005834 <UART_SetConfig+0x2cc>)
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d005      	beq.n	8005608 <UART_SetConfig+0xa0>
 80055fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	4b8d      	ldr	r3, [pc, #564]	; (8005838 <UART_SetConfig+0x2d0>)
 8005604:	429a      	cmp	r2, r3
 8005606:	d104      	bne.n	8005612 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005608:	f7fe fad2 	bl	8003bb0 <HAL_RCC_GetPCLK2Freq>
 800560c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005610:	e003      	b.n	800561a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005612:	f7fe fab9 	bl	8003b88 <HAL_RCC_GetPCLK1Freq>
 8005616:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800561a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800561e:	69db      	ldr	r3, [r3, #28]
 8005620:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005624:	f040 810c 	bne.w	8005840 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005628:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800562c:	2200      	movs	r2, #0
 800562e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005632:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005636:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800563a:	4622      	mov	r2, r4
 800563c:	462b      	mov	r3, r5
 800563e:	1891      	adds	r1, r2, r2
 8005640:	65b9      	str	r1, [r7, #88]	; 0x58
 8005642:	415b      	adcs	r3, r3
 8005644:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005646:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800564a:	4621      	mov	r1, r4
 800564c:	eb12 0801 	adds.w	r8, r2, r1
 8005650:	4629      	mov	r1, r5
 8005652:	eb43 0901 	adc.w	r9, r3, r1
 8005656:	f04f 0200 	mov.w	r2, #0
 800565a:	f04f 0300 	mov.w	r3, #0
 800565e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005662:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005666:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800566a:	4690      	mov	r8, r2
 800566c:	4699      	mov	r9, r3
 800566e:	4623      	mov	r3, r4
 8005670:	eb18 0303 	adds.w	r3, r8, r3
 8005674:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005678:	462b      	mov	r3, r5
 800567a:	eb49 0303 	adc.w	r3, r9, r3
 800567e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800568e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005692:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005696:	460b      	mov	r3, r1
 8005698:	18db      	adds	r3, r3, r3
 800569a:	653b      	str	r3, [r7, #80]	; 0x50
 800569c:	4613      	mov	r3, r2
 800569e:	eb42 0303 	adc.w	r3, r2, r3
 80056a2:	657b      	str	r3, [r7, #84]	; 0x54
 80056a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80056a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80056ac:	f7fa fde0 	bl	8000270 <__aeabi_uldivmod>
 80056b0:	4602      	mov	r2, r0
 80056b2:	460b      	mov	r3, r1
 80056b4:	4b61      	ldr	r3, [pc, #388]	; (800583c <UART_SetConfig+0x2d4>)
 80056b6:	fba3 2302 	umull	r2, r3, r3, r2
 80056ba:	095b      	lsrs	r3, r3, #5
 80056bc:	011c      	lsls	r4, r3, #4
 80056be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056c2:	2200      	movs	r2, #0
 80056c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80056c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80056cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80056d0:	4642      	mov	r2, r8
 80056d2:	464b      	mov	r3, r9
 80056d4:	1891      	adds	r1, r2, r2
 80056d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80056d8:	415b      	adcs	r3, r3
 80056da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80056e0:	4641      	mov	r1, r8
 80056e2:	eb12 0a01 	adds.w	sl, r2, r1
 80056e6:	4649      	mov	r1, r9
 80056e8:	eb43 0b01 	adc.w	fp, r3, r1
 80056ec:	f04f 0200 	mov.w	r2, #0
 80056f0:	f04f 0300 	mov.w	r3, #0
 80056f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80056f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80056fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005700:	4692      	mov	sl, r2
 8005702:	469b      	mov	fp, r3
 8005704:	4643      	mov	r3, r8
 8005706:	eb1a 0303 	adds.w	r3, sl, r3
 800570a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800570e:	464b      	mov	r3, r9
 8005710:	eb4b 0303 	adc.w	r3, fp, r3
 8005714:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005724:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005728:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800572c:	460b      	mov	r3, r1
 800572e:	18db      	adds	r3, r3, r3
 8005730:	643b      	str	r3, [r7, #64]	; 0x40
 8005732:	4613      	mov	r3, r2
 8005734:	eb42 0303 	adc.w	r3, r2, r3
 8005738:	647b      	str	r3, [r7, #68]	; 0x44
 800573a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800573e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005742:	f7fa fd95 	bl	8000270 <__aeabi_uldivmod>
 8005746:	4602      	mov	r2, r0
 8005748:	460b      	mov	r3, r1
 800574a:	4611      	mov	r1, r2
 800574c:	4b3b      	ldr	r3, [pc, #236]	; (800583c <UART_SetConfig+0x2d4>)
 800574e:	fba3 2301 	umull	r2, r3, r3, r1
 8005752:	095b      	lsrs	r3, r3, #5
 8005754:	2264      	movs	r2, #100	; 0x64
 8005756:	fb02 f303 	mul.w	r3, r2, r3
 800575a:	1acb      	subs	r3, r1, r3
 800575c:	00db      	lsls	r3, r3, #3
 800575e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005762:	4b36      	ldr	r3, [pc, #216]	; (800583c <UART_SetConfig+0x2d4>)
 8005764:	fba3 2302 	umull	r2, r3, r3, r2
 8005768:	095b      	lsrs	r3, r3, #5
 800576a:	005b      	lsls	r3, r3, #1
 800576c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005770:	441c      	add	r4, r3
 8005772:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005776:	2200      	movs	r2, #0
 8005778:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800577c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005780:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005784:	4642      	mov	r2, r8
 8005786:	464b      	mov	r3, r9
 8005788:	1891      	adds	r1, r2, r2
 800578a:	63b9      	str	r1, [r7, #56]	; 0x38
 800578c:	415b      	adcs	r3, r3
 800578e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005790:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005794:	4641      	mov	r1, r8
 8005796:	1851      	adds	r1, r2, r1
 8005798:	6339      	str	r1, [r7, #48]	; 0x30
 800579a:	4649      	mov	r1, r9
 800579c:	414b      	adcs	r3, r1
 800579e:	637b      	str	r3, [r7, #52]	; 0x34
 80057a0:	f04f 0200 	mov.w	r2, #0
 80057a4:	f04f 0300 	mov.w	r3, #0
 80057a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80057ac:	4659      	mov	r1, fp
 80057ae:	00cb      	lsls	r3, r1, #3
 80057b0:	4651      	mov	r1, sl
 80057b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057b6:	4651      	mov	r1, sl
 80057b8:	00ca      	lsls	r2, r1, #3
 80057ba:	4610      	mov	r0, r2
 80057bc:	4619      	mov	r1, r3
 80057be:	4603      	mov	r3, r0
 80057c0:	4642      	mov	r2, r8
 80057c2:	189b      	adds	r3, r3, r2
 80057c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80057c8:	464b      	mov	r3, r9
 80057ca:	460a      	mov	r2, r1
 80057cc:	eb42 0303 	adc.w	r3, r2, r3
 80057d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80057d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80057e0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80057e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80057e8:	460b      	mov	r3, r1
 80057ea:	18db      	adds	r3, r3, r3
 80057ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80057ee:	4613      	mov	r3, r2
 80057f0:	eb42 0303 	adc.w	r3, r2, r3
 80057f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80057fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80057fe:	f7fa fd37 	bl	8000270 <__aeabi_uldivmod>
 8005802:	4602      	mov	r2, r0
 8005804:	460b      	mov	r3, r1
 8005806:	4b0d      	ldr	r3, [pc, #52]	; (800583c <UART_SetConfig+0x2d4>)
 8005808:	fba3 1302 	umull	r1, r3, r3, r2
 800580c:	095b      	lsrs	r3, r3, #5
 800580e:	2164      	movs	r1, #100	; 0x64
 8005810:	fb01 f303 	mul.w	r3, r1, r3
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	00db      	lsls	r3, r3, #3
 8005818:	3332      	adds	r3, #50	; 0x32
 800581a:	4a08      	ldr	r2, [pc, #32]	; (800583c <UART_SetConfig+0x2d4>)
 800581c:	fba2 2303 	umull	r2, r3, r2, r3
 8005820:	095b      	lsrs	r3, r3, #5
 8005822:	f003 0207 	and.w	r2, r3, #7
 8005826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4422      	add	r2, r4
 800582e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005830:	e106      	b.n	8005a40 <UART_SetConfig+0x4d8>
 8005832:	bf00      	nop
 8005834:	40011000 	.word	0x40011000
 8005838:	40011400 	.word	0x40011400
 800583c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005840:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005844:	2200      	movs	r2, #0
 8005846:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800584a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800584e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005852:	4642      	mov	r2, r8
 8005854:	464b      	mov	r3, r9
 8005856:	1891      	adds	r1, r2, r2
 8005858:	6239      	str	r1, [r7, #32]
 800585a:	415b      	adcs	r3, r3
 800585c:	627b      	str	r3, [r7, #36]	; 0x24
 800585e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005862:	4641      	mov	r1, r8
 8005864:	1854      	adds	r4, r2, r1
 8005866:	4649      	mov	r1, r9
 8005868:	eb43 0501 	adc.w	r5, r3, r1
 800586c:	f04f 0200 	mov.w	r2, #0
 8005870:	f04f 0300 	mov.w	r3, #0
 8005874:	00eb      	lsls	r3, r5, #3
 8005876:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800587a:	00e2      	lsls	r2, r4, #3
 800587c:	4614      	mov	r4, r2
 800587e:	461d      	mov	r5, r3
 8005880:	4643      	mov	r3, r8
 8005882:	18e3      	adds	r3, r4, r3
 8005884:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005888:	464b      	mov	r3, r9
 800588a:	eb45 0303 	adc.w	r3, r5, r3
 800588e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800589e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80058a2:	f04f 0200 	mov.w	r2, #0
 80058a6:	f04f 0300 	mov.w	r3, #0
 80058aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80058ae:	4629      	mov	r1, r5
 80058b0:	008b      	lsls	r3, r1, #2
 80058b2:	4621      	mov	r1, r4
 80058b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058b8:	4621      	mov	r1, r4
 80058ba:	008a      	lsls	r2, r1, #2
 80058bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80058c0:	f7fa fcd6 	bl	8000270 <__aeabi_uldivmod>
 80058c4:	4602      	mov	r2, r0
 80058c6:	460b      	mov	r3, r1
 80058c8:	4b60      	ldr	r3, [pc, #384]	; (8005a4c <UART_SetConfig+0x4e4>)
 80058ca:	fba3 2302 	umull	r2, r3, r3, r2
 80058ce:	095b      	lsrs	r3, r3, #5
 80058d0:	011c      	lsls	r4, r3, #4
 80058d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058d6:	2200      	movs	r2, #0
 80058d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80058dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80058e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80058e4:	4642      	mov	r2, r8
 80058e6:	464b      	mov	r3, r9
 80058e8:	1891      	adds	r1, r2, r2
 80058ea:	61b9      	str	r1, [r7, #24]
 80058ec:	415b      	adcs	r3, r3
 80058ee:	61fb      	str	r3, [r7, #28]
 80058f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058f4:	4641      	mov	r1, r8
 80058f6:	1851      	adds	r1, r2, r1
 80058f8:	6139      	str	r1, [r7, #16]
 80058fa:	4649      	mov	r1, r9
 80058fc:	414b      	adcs	r3, r1
 80058fe:	617b      	str	r3, [r7, #20]
 8005900:	f04f 0200 	mov.w	r2, #0
 8005904:	f04f 0300 	mov.w	r3, #0
 8005908:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800590c:	4659      	mov	r1, fp
 800590e:	00cb      	lsls	r3, r1, #3
 8005910:	4651      	mov	r1, sl
 8005912:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005916:	4651      	mov	r1, sl
 8005918:	00ca      	lsls	r2, r1, #3
 800591a:	4610      	mov	r0, r2
 800591c:	4619      	mov	r1, r3
 800591e:	4603      	mov	r3, r0
 8005920:	4642      	mov	r2, r8
 8005922:	189b      	adds	r3, r3, r2
 8005924:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005928:	464b      	mov	r3, r9
 800592a:	460a      	mov	r2, r1
 800592c:	eb42 0303 	adc.w	r3, r2, r3
 8005930:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	67bb      	str	r3, [r7, #120]	; 0x78
 800593e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005940:	f04f 0200 	mov.w	r2, #0
 8005944:	f04f 0300 	mov.w	r3, #0
 8005948:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800594c:	4649      	mov	r1, r9
 800594e:	008b      	lsls	r3, r1, #2
 8005950:	4641      	mov	r1, r8
 8005952:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005956:	4641      	mov	r1, r8
 8005958:	008a      	lsls	r2, r1, #2
 800595a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800595e:	f7fa fc87 	bl	8000270 <__aeabi_uldivmod>
 8005962:	4602      	mov	r2, r0
 8005964:	460b      	mov	r3, r1
 8005966:	4611      	mov	r1, r2
 8005968:	4b38      	ldr	r3, [pc, #224]	; (8005a4c <UART_SetConfig+0x4e4>)
 800596a:	fba3 2301 	umull	r2, r3, r3, r1
 800596e:	095b      	lsrs	r3, r3, #5
 8005970:	2264      	movs	r2, #100	; 0x64
 8005972:	fb02 f303 	mul.w	r3, r2, r3
 8005976:	1acb      	subs	r3, r1, r3
 8005978:	011b      	lsls	r3, r3, #4
 800597a:	3332      	adds	r3, #50	; 0x32
 800597c:	4a33      	ldr	r2, [pc, #204]	; (8005a4c <UART_SetConfig+0x4e4>)
 800597e:	fba2 2303 	umull	r2, r3, r2, r3
 8005982:	095b      	lsrs	r3, r3, #5
 8005984:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005988:	441c      	add	r4, r3
 800598a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800598e:	2200      	movs	r2, #0
 8005990:	673b      	str	r3, [r7, #112]	; 0x70
 8005992:	677a      	str	r2, [r7, #116]	; 0x74
 8005994:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005998:	4642      	mov	r2, r8
 800599a:	464b      	mov	r3, r9
 800599c:	1891      	adds	r1, r2, r2
 800599e:	60b9      	str	r1, [r7, #8]
 80059a0:	415b      	adcs	r3, r3
 80059a2:	60fb      	str	r3, [r7, #12]
 80059a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059a8:	4641      	mov	r1, r8
 80059aa:	1851      	adds	r1, r2, r1
 80059ac:	6039      	str	r1, [r7, #0]
 80059ae:	4649      	mov	r1, r9
 80059b0:	414b      	adcs	r3, r1
 80059b2:	607b      	str	r3, [r7, #4]
 80059b4:	f04f 0200 	mov.w	r2, #0
 80059b8:	f04f 0300 	mov.w	r3, #0
 80059bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80059c0:	4659      	mov	r1, fp
 80059c2:	00cb      	lsls	r3, r1, #3
 80059c4:	4651      	mov	r1, sl
 80059c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059ca:	4651      	mov	r1, sl
 80059cc:	00ca      	lsls	r2, r1, #3
 80059ce:	4610      	mov	r0, r2
 80059d0:	4619      	mov	r1, r3
 80059d2:	4603      	mov	r3, r0
 80059d4:	4642      	mov	r2, r8
 80059d6:	189b      	adds	r3, r3, r2
 80059d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80059da:	464b      	mov	r3, r9
 80059dc:	460a      	mov	r2, r1
 80059de:	eb42 0303 	adc.w	r3, r2, r3
 80059e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80059e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	663b      	str	r3, [r7, #96]	; 0x60
 80059ee:	667a      	str	r2, [r7, #100]	; 0x64
 80059f0:	f04f 0200 	mov.w	r2, #0
 80059f4:	f04f 0300 	mov.w	r3, #0
 80059f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80059fc:	4649      	mov	r1, r9
 80059fe:	008b      	lsls	r3, r1, #2
 8005a00:	4641      	mov	r1, r8
 8005a02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a06:	4641      	mov	r1, r8
 8005a08:	008a      	lsls	r2, r1, #2
 8005a0a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005a0e:	f7fa fc2f 	bl	8000270 <__aeabi_uldivmod>
 8005a12:	4602      	mov	r2, r0
 8005a14:	460b      	mov	r3, r1
 8005a16:	4b0d      	ldr	r3, [pc, #52]	; (8005a4c <UART_SetConfig+0x4e4>)
 8005a18:	fba3 1302 	umull	r1, r3, r3, r2
 8005a1c:	095b      	lsrs	r3, r3, #5
 8005a1e:	2164      	movs	r1, #100	; 0x64
 8005a20:	fb01 f303 	mul.w	r3, r1, r3
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	011b      	lsls	r3, r3, #4
 8005a28:	3332      	adds	r3, #50	; 0x32
 8005a2a:	4a08      	ldr	r2, [pc, #32]	; (8005a4c <UART_SetConfig+0x4e4>)
 8005a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a30:	095b      	lsrs	r3, r3, #5
 8005a32:	f003 020f 	and.w	r2, r3, #15
 8005a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4422      	add	r2, r4
 8005a3e:	609a      	str	r2, [r3, #8]
}
 8005a40:	bf00      	nop
 8005a42:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005a46:	46bd      	mov	sp, r7
 8005a48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a4c:	51eb851f 	.word	0x51eb851f

08005a50 <sbrk_aligned>:
 8005a50:	b570      	push	{r4, r5, r6, lr}
 8005a52:	4e0e      	ldr	r6, [pc, #56]	; (8005a8c <sbrk_aligned+0x3c>)
 8005a54:	460c      	mov	r4, r1
 8005a56:	6831      	ldr	r1, [r6, #0]
 8005a58:	4605      	mov	r5, r0
 8005a5a:	b911      	cbnz	r1, 8005a62 <sbrk_aligned+0x12>
 8005a5c:	f000 fad6 	bl	800600c <_sbrk_r>
 8005a60:	6030      	str	r0, [r6, #0]
 8005a62:	4621      	mov	r1, r4
 8005a64:	4628      	mov	r0, r5
 8005a66:	f000 fad1 	bl	800600c <_sbrk_r>
 8005a6a:	1c43      	adds	r3, r0, #1
 8005a6c:	d00a      	beq.n	8005a84 <sbrk_aligned+0x34>
 8005a6e:	1cc4      	adds	r4, r0, #3
 8005a70:	f024 0403 	bic.w	r4, r4, #3
 8005a74:	42a0      	cmp	r0, r4
 8005a76:	d007      	beq.n	8005a88 <sbrk_aligned+0x38>
 8005a78:	1a21      	subs	r1, r4, r0
 8005a7a:	4628      	mov	r0, r5
 8005a7c:	f000 fac6 	bl	800600c <_sbrk_r>
 8005a80:	3001      	adds	r0, #1
 8005a82:	d101      	bne.n	8005a88 <sbrk_aligned+0x38>
 8005a84:	f04f 34ff 	mov.w	r4, #4294967295
 8005a88:	4620      	mov	r0, r4
 8005a8a:	bd70      	pop	{r4, r5, r6, pc}
 8005a8c:	20000370 	.word	0x20000370

08005a90 <_malloc_r>:
 8005a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a94:	1ccd      	adds	r5, r1, #3
 8005a96:	f025 0503 	bic.w	r5, r5, #3
 8005a9a:	3508      	adds	r5, #8
 8005a9c:	2d0c      	cmp	r5, #12
 8005a9e:	bf38      	it	cc
 8005aa0:	250c      	movcc	r5, #12
 8005aa2:	2d00      	cmp	r5, #0
 8005aa4:	4607      	mov	r7, r0
 8005aa6:	db01      	blt.n	8005aac <_malloc_r+0x1c>
 8005aa8:	42a9      	cmp	r1, r5
 8005aaa:	d905      	bls.n	8005ab8 <_malloc_r+0x28>
 8005aac:	230c      	movs	r3, #12
 8005aae:	603b      	str	r3, [r7, #0]
 8005ab0:	2600      	movs	r6, #0
 8005ab2:	4630      	mov	r0, r6
 8005ab4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ab8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005b8c <_malloc_r+0xfc>
 8005abc:	f000 f868 	bl	8005b90 <__malloc_lock>
 8005ac0:	f8d8 3000 	ldr.w	r3, [r8]
 8005ac4:	461c      	mov	r4, r3
 8005ac6:	bb5c      	cbnz	r4, 8005b20 <_malloc_r+0x90>
 8005ac8:	4629      	mov	r1, r5
 8005aca:	4638      	mov	r0, r7
 8005acc:	f7ff ffc0 	bl	8005a50 <sbrk_aligned>
 8005ad0:	1c43      	adds	r3, r0, #1
 8005ad2:	4604      	mov	r4, r0
 8005ad4:	d155      	bne.n	8005b82 <_malloc_r+0xf2>
 8005ad6:	f8d8 4000 	ldr.w	r4, [r8]
 8005ada:	4626      	mov	r6, r4
 8005adc:	2e00      	cmp	r6, #0
 8005ade:	d145      	bne.n	8005b6c <_malloc_r+0xdc>
 8005ae0:	2c00      	cmp	r4, #0
 8005ae2:	d048      	beq.n	8005b76 <_malloc_r+0xe6>
 8005ae4:	6823      	ldr	r3, [r4, #0]
 8005ae6:	4631      	mov	r1, r6
 8005ae8:	4638      	mov	r0, r7
 8005aea:	eb04 0903 	add.w	r9, r4, r3
 8005aee:	f000 fa8d 	bl	800600c <_sbrk_r>
 8005af2:	4581      	cmp	r9, r0
 8005af4:	d13f      	bne.n	8005b76 <_malloc_r+0xe6>
 8005af6:	6821      	ldr	r1, [r4, #0]
 8005af8:	1a6d      	subs	r5, r5, r1
 8005afa:	4629      	mov	r1, r5
 8005afc:	4638      	mov	r0, r7
 8005afe:	f7ff ffa7 	bl	8005a50 <sbrk_aligned>
 8005b02:	3001      	adds	r0, #1
 8005b04:	d037      	beq.n	8005b76 <_malloc_r+0xe6>
 8005b06:	6823      	ldr	r3, [r4, #0]
 8005b08:	442b      	add	r3, r5
 8005b0a:	6023      	str	r3, [r4, #0]
 8005b0c:	f8d8 3000 	ldr.w	r3, [r8]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d038      	beq.n	8005b86 <_malloc_r+0xf6>
 8005b14:	685a      	ldr	r2, [r3, #4]
 8005b16:	42a2      	cmp	r2, r4
 8005b18:	d12b      	bne.n	8005b72 <_malloc_r+0xe2>
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	605a      	str	r2, [r3, #4]
 8005b1e:	e00f      	b.n	8005b40 <_malloc_r+0xb0>
 8005b20:	6822      	ldr	r2, [r4, #0]
 8005b22:	1b52      	subs	r2, r2, r5
 8005b24:	d41f      	bmi.n	8005b66 <_malloc_r+0xd6>
 8005b26:	2a0b      	cmp	r2, #11
 8005b28:	d917      	bls.n	8005b5a <_malloc_r+0xca>
 8005b2a:	1961      	adds	r1, r4, r5
 8005b2c:	42a3      	cmp	r3, r4
 8005b2e:	6025      	str	r5, [r4, #0]
 8005b30:	bf18      	it	ne
 8005b32:	6059      	strne	r1, [r3, #4]
 8005b34:	6863      	ldr	r3, [r4, #4]
 8005b36:	bf08      	it	eq
 8005b38:	f8c8 1000 	streq.w	r1, [r8]
 8005b3c:	5162      	str	r2, [r4, r5]
 8005b3e:	604b      	str	r3, [r1, #4]
 8005b40:	4638      	mov	r0, r7
 8005b42:	f104 060b 	add.w	r6, r4, #11
 8005b46:	f000 f829 	bl	8005b9c <__malloc_unlock>
 8005b4a:	f026 0607 	bic.w	r6, r6, #7
 8005b4e:	1d23      	adds	r3, r4, #4
 8005b50:	1af2      	subs	r2, r6, r3
 8005b52:	d0ae      	beq.n	8005ab2 <_malloc_r+0x22>
 8005b54:	1b9b      	subs	r3, r3, r6
 8005b56:	50a3      	str	r3, [r4, r2]
 8005b58:	e7ab      	b.n	8005ab2 <_malloc_r+0x22>
 8005b5a:	42a3      	cmp	r3, r4
 8005b5c:	6862      	ldr	r2, [r4, #4]
 8005b5e:	d1dd      	bne.n	8005b1c <_malloc_r+0x8c>
 8005b60:	f8c8 2000 	str.w	r2, [r8]
 8005b64:	e7ec      	b.n	8005b40 <_malloc_r+0xb0>
 8005b66:	4623      	mov	r3, r4
 8005b68:	6864      	ldr	r4, [r4, #4]
 8005b6a:	e7ac      	b.n	8005ac6 <_malloc_r+0x36>
 8005b6c:	4634      	mov	r4, r6
 8005b6e:	6876      	ldr	r6, [r6, #4]
 8005b70:	e7b4      	b.n	8005adc <_malloc_r+0x4c>
 8005b72:	4613      	mov	r3, r2
 8005b74:	e7cc      	b.n	8005b10 <_malloc_r+0x80>
 8005b76:	230c      	movs	r3, #12
 8005b78:	603b      	str	r3, [r7, #0]
 8005b7a:	4638      	mov	r0, r7
 8005b7c:	f000 f80e 	bl	8005b9c <__malloc_unlock>
 8005b80:	e797      	b.n	8005ab2 <_malloc_r+0x22>
 8005b82:	6025      	str	r5, [r4, #0]
 8005b84:	e7dc      	b.n	8005b40 <_malloc_r+0xb0>
 8005b86:	605b      	str	r3, [r3, #4]
 8005b88:	deff      	udf	#255	; 0xff
 8005b8a:	bf00      	nop
 8005b8c:	2000036c 	.word	0x2000036c

08005b90 <__malloc_lock>:
 8005b90:	4801      	ldr	r0, [pc, #4]	; (8005b98 <__malloc_lock+0x8>)
 8005b92:	f000 ba87 	b.w	80060a4 <__retarget_lock_acquire_recursive>
 8005b96:	bf00      	nop
 8005b98:	200004b4 	.word	0x200004b4

08005b9c <__malloc_unlock>:
 8005b9c:	4801      	ldr	r0, [pc, #4]	; (8005ba4 <__malloc_unlock+0x8>)
 8005b9e:	f000 ba82 	b.w	80060a6 <__retarget_lock_release_recursive>
 8005ba2:	bf00      	nop
 8005ba4:	200004b4 	.word	0x200004b4

08005ba8 <std>:
 8005ba8:	2300      	movs	r3, #0
 8005baa:	b510      	push	{r4, lr}
 8005bac:	4604      	mov	r4, r0
 8005bae:	e9c0 3300 	strd	r3, r3, [r0]
 8005bb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005bb6:	6083      	str	r3, [r0, #8]
 8005bb8:	8181      	strh	r1, [r0, #12]
 8005bba:	6643      	str	r3, [r0, #100]	; 0x64
 8005bbc:	81c2      	strh	r2, [r0, #14]
 8005bbe:	6183      	str	r3, [r0, #24]
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	2208      	movs	r2, #8
 8005bc4:	305c      	adds	r0, #92	; 0x5c
 8005bc6:	f000 f9e5 	bl	8005f94 <memset>
 8005bca:	4b05      	ldr	r3, [pc, #20]	; (8005be0 <std+0x38>)
 8005bcc:	6263      	str	r3, [r4, #36]	; 0x24
 8005bce:	4b05      	ldr	r3, [pc, #20]	; (8005be4 <std+0x3c>)
 8005bd0:	62a3      	str	r3, [r4, #40]	; 0x28
 8005bd2:	4b05      	ldr	r3, [pc, #20]	; (8005be8 <std+0x40>)
 8005bd4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005bd6:	4b05      	ldr	r3, [pc, #20]	; (8005bec <std+0x44>)
 8005bd8:	6224      	str	r4, [r4, #32]
 8005bda:	6323      	str	r3, [r4, #48]	; 0x30
 8005bdc:	bd10      	pop	{r4, pc}
 8005bde:	bf00      	nop
 8005be0:	08005de5 	.word	0x08005de5
 8005be4:	08005e07 	.word	0x08005e07
 8005be8:	08005e3f 	.word	0x08005e3f
 8005bec:	08005e63 	.word	0x08005e63

08005bf0 <stdio_exit_handler>:
 8005bf0:	4a02      	ldr	r2, [pc, #8]	; (8005bfc <stdio_exit_handler+0xc>)
 8005bf2:	4903      	ldr	r1, [pc, #12]	; (8005c00 <stdio_exit_handler+0x10>)
 8005bf4:	4803      	ldr	r0, [pc, #12]	; (8005c04 <stdio_exit_handler+0x14>)
 8005bf6:	f000 b869 	b.w	8005ccc <_fwalk_sglue>
 8005bfa:	bf00      	nop
 8005bfc:	2000000c 	.word	0x2000000c
 8005c00:	080067f5 	.word	0x080067f5
 8005c04:	20000018 	.word	0x20000018

08005c08 <cleanup_stdio>:
 8005c08:	6841      	ldr	r1, [r0, #4]
 8005c0a:	4b0c      	ldr	r3, [pc, #48]	; (8005c3c <cleanup_stdio+0x34>)
 8005c0c:	4299      	cmp	r1, r3
 8005c0e:	b510      	push	{r4, lr}
 8005c10:	4604      	mov	r4, r0
 8005c12:	d001      	beq.n	8005c18 <cleanup_stdio+0x10>
 8005c14:	f000 fdee 	bl	80067f4 <_fflush_r>
 8005c18:	68a1      	ldr	r1, [r4, #8]
 8005c1a:	4b09      	ldr	r3, [pc, #36]	; (8005c40 <cleanup_stdio+0x38>)
 8005c1c:	4299      	cmp	r1, r3
 8005c1e:	d002      	beq.n	8005c26 <cleanup_stdio+0x1e>
 8005c20:	4620      	mov	r0, r4
 8005c22:	f000 fde7 	bl	80067f4 <_fflush_r>
 8005c26:	68e1      	ldr	r1, [r4, #12]
 8005c28:	4b06      	ldr	r3, [pc, #24]	; (8005c44 <cleanup_stdio+0x3c>)
 8005c2a:	4299      	cmp	r1, r3
 8005c2c:	d004      	beq.n	8005c38 <cleanup_stdio+0x30>
 8005c2e:	4620      	mov	r0, r4
 8005c30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c34:	f000 bdde 	b.w	80067f4 <_fflush_r>
 8005c38:	bd10      	pop	{r4, pc}
 8005c3a:	bf00      	nop
 8005c3c:	20000374 	.word	0x20000374
 8005c40:	200003dc 	.word	0x200003dc
 8005c44:	20000444 	.word	0x20000444

08005c48 <global_stdio_init.part.0>:
 8005c48:	b510      	push	{r4, lr}
 8005c4a:	4b0b      	ldr	r3, [pc, #44]	; (8005c78 <global_stdio_init.part.0+0x30>)
 8005c4c:	4c0b      	ldr	r4, [pc, #44]	; (8005c7c <global_stdio_init.part.0+0x34>)
 8005c4e:	4a0c      	ldr	r2, [pc, #48]	; (8005c80 <global_stdio_init.part.0+0x38>)
 8005c50:	601a      	str	r2, [r3, #0]
 8005c52:	4620      	mov	r0, r4
 8005c54:	2200      	movs	r2, #0
 8005c56:	2104      	movs	r1, #4
 8005c58:	f7ff ffa6 	bl	8005ba8 <std>
 8005c5c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005c60:	2201      	movs	r2, #1
 8005c62:	2109      	movs	r1, #9
 8005c64:	f7ff ffa0 	bl	8005ba8 <std>
 8005c68:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005c6c:	2202      	movs	r2, #2
 8005c6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c72:	2112      	movs	r1, #18
 8005c74:	f7ff bf98 	b.w	8005ba8 <std>
 8005c78:	200004ac 	.word	0x200004ac
 8005c7c:	20000374 	.word	0x20000374
 8005c80:	08005bf1 	.word	0x08005bf1

08005c84 <__sfp_lock_acquire>:
 8005c84:	4801      	ldr	r0, [pc, #4]	; (8005c8c <__sfp_lock_acquire+0x8>)
 8005c86:	f000 ba0d 	b.w	80060a4 <__retarget_lock_acquire_recursive>
 8005c8a:	bf00      	nop
 8005c8c:	200004b5 	.word	0x200004b5

08005c90 <__sfp_lock_release>:
 8005c90:	4801      	ldr	r0, [pc, #4]	; (8005c98 <__sfp_lock_release+0x8>)
 8005c92:	f000 ba08 	b.w	80060a6 <__retarget_lock_release_recursive>
 8005c96:	bf00      	nop
 8005c98:	200004b5 	.word	0x200004b5

08005c9c <__sinit>:
 8005c9c:	b510      	push	{r4, lr}
 8005c9e:	4604      	mov	r4, r0
 8005ca0:	f7ff fff0 	bl	8005c84 <__sfp_lock_acquire>
 8005ca4:	6a23      	ldr	r3, [r4, #32]
 8005ca6:	b11b      	cbz	r3, 8005cb0 <__sinit+0x14>
 8005ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cac:	f7ff bff0 	b.w	8005c90 <__sfp_lock_release>
 8005cb0:	4b04      	ldr	r3, [pc, #16]	; (8005cc4 <__sinit+0x28>)
 8005cb2:	6223      	str	r3, [r4, #32]
 8005cb4:	4b04      	ldr	r3, [pc, #16]	; (8005cc8 <__sinit+0x2c>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1f5      	bne.n	8005ca8 <__sinit+0xc>
 8005cbc:	f7ff ffc4 	bl	8005c48 <global_stdio_init.part.0>
 8005cc0:	e7f2      	b.n	8005ca8 <__sinit+0xc>
 8005cc2:	bf00      	nop
 8005cc4:	08005c09 	.word	0x08005c09
 8005cc8:	200004ac 	.word	0x200004ac

08005ccc <_fwalk_sglue>:
 8005ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cd0:	4607      	mov	r7, r0
 8005cd2:	4688      	mov	r8, r1
 8005cd4:	4614      	mov	r4, r2
 8005cd6:	2600      	movs	r6, #0
 8005cd8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005cdc:	f1b9 0901 	subs.w	r9, r9, #1
 8005ce0:	d505      	bpl.n	8005cee <_fwalk_sglue+0x22>
 8005ce2:	6824      	ldr	r4, [r4, #0]
 8005ce4:	2c00      	cmp	r4, #0
 8005ce6:	d1f7      	bne.n	8005cd8 <_fwalk_sglue+0xc>
 8005ce8:	4630      	mov	r0, r6
 8005cea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cee:	89ab      	ldrh	r3, [r5, #12]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d907      	bls.n	8005d04 <_fwalk_sglue+0x38>
 8005cf4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	d003      	beq.n	8005d04 <_fwalk_sglue+0x38>
 8005cfc:	4629      	mov	r1, r5
 8005cfe:	4638      	mov	r0, r7
 8005d00:	47c0      	blx	r8
 8005d02:	4306      	orrs	r6, r0
 8005d04:	3568      	adds	r5, #104	; 0x68
 8005d06:	e7e9      	b.n	8005cdc <_fwalk_sglue+0x10>

08005d08 <iprintf>:
 8005d08:	b40f      	push	{r0, r1, r2, r3}
 8005d0a:	b507      	push	{r0, r1, r2, lr}
 8005d0c:	4906      	ldr	r1, [pc, #24]	; (8005d28 <iprintf+0x20>)
 8005d0e:	ab04      	add	r3, sp, #16
 8005d10:	6808      	ldr	r0, [r1, #0]
 8005d12:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d16:	6881      	ldr	r1, [r0, #8]
 8005d18:	9301      	str	r3, [sp, #4]
 8005d1a:	f000 fa3b 	bl	8006194 <_vfiprintf_r>
 8005d1e:	b003      	add	sp, #12
 8005d20:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d24:	b004      	add	sp, #16
 8005d26:	4770      	bx	lr
 8005d28:	20000064 	.word	0x20000064

08005d2c <_puts_r>:
 8005d2c:	6a03      	ldr	r3, [r0, #32]
 8005d2e:	b570      	push	{r4, r5, r6, lr}
 8005d30:	6884      	ldr	r4, [r0, #8]
 8005d32:	4605      	mov	r5, r0
 8005d34:	460e      	mov	r6, r1
 8005d36:	b90b      	cbnz	r3, 8005d3c <_puts_r+0x10>
 8005d38:	f7ff ffb0 	bl	8005c9c <__sinit>
 8005d3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d3e:	07db      	lsls	r3, r3, #31
 8005d40:	d405      	bmi.n	8005d4e <_puts_r+0x22>
 8005d42:	89a3      	ldrh	r3, [r4, #12]
 8005d44:	0598      	lsls	r0, r3, #22
 8005d46:	d402      	bmi.n	8005d4e <_puts_r+0x22>
 8005d48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d4a:	f000 f9ab 	bl	80060a4 <__retarget_lock_acquire_recursive>
 8005d4e:	89a3      	ldrh	r3, [r4, #12]
 8005d50:	0719      	lsls	r1, r3, #28
 8005d52:	d513      	bpl.n	8005d7c <_puts_r+0x50>
 8005d54:	6923      	ldr	r3, [r4, #16]
 8005d56:	b18b      	cbz	r3, 8005d7c <_puts_r+0x50>
 8005d58:	3e01      	subs	r6, #1
 8005d5a:	68a3      	ldr	r3, [r4, #8]
 8005d5c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005d60:	3b01      	subs	r3, #1
 8005d62:	60a3      	str	r3, [r4, #8]
 8005d64:	b9e9      	cbnz	r1, 8005da2 <_puts_r+0x76>
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	da2e      	bge.n	8005dc8 <_puts_r+0x9c>
 8005d6a:	4622      	mov	r2, r4
 8005d6c:	210a      	movs	r1, #10
 8005d6e:	4628      	mov	r0, r5
 8005d70:	f000 f87b 	bl	8005e6a <__swbuf_r>
 8005d74:	3001      	adds	r0, #1
 8005d76:	d007      	beq.n	8005d88 <_puts_r+0x5c>
 8005d78:	250a      	movs	r5, #10
 8005d7a:	e007      	b.n	8005d8c <_puts_r+0x60>
 8005d7c:	4621      	mov	r1, r4
 8005d7e:	4628      	mov	r0, r5
 8005d80:	f000 f8b0 	bl	8005ee4 <__swsetup_r>
 8005d84:	2800      	cmp	r0, #0
 8005d86:	d0e7      	beq.n	8005d58 <_puts_r+0x2c>
 8005d88:	f04f 35ff 	mov.w	r5, #4294967295
 8005d8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d8e:	07da      	lsls	r2, r3, #31
 8005d90:	d405      	bmi.n	8005d9e <_puts_r+0x72>
 8005d92:	89a3      	ldrh	r3, [r4, #12]
 8005d94:	059b      	lsls	r3, r3, #22
 8005d96:	d402      	bmi.n	8005d9e <_puts_r+0x72>
 8005d98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d9a:	f000 f984 	bl	80060a6 <__retarget_lock_release_recursive>
 8005d9e:	4628      	mov	r0, r5
 8005da0:	bd70      	pop	{r4, r5, r6, pc}
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	da04      	bge.n	8005db0 <_puts_r+0x84>
 8005da6:	69a2      	ldr	r2, [r4, #24]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	dc06      	bgt.n	8005dba <_puts_r+0x8e>
 8005dac:	290a      	cmp	r1, #10
 8005dae:	d004      	beq.n	8005dba <_puts_r+0x8e>
 8005db0:	6823      	ldr	r3, [r4, #0]
 8005db2:	1c5a      	adds	r2, r3, #1
 8005db4:	6022      	str	r2, [r4, #0]
 8005db6:	7019      	strb	r1, [r3, #0]
 8005db8:	e7cf      	b.n	8005d5a <_puts_r+0x2e>
 8005dba:	4622      	mov	r2, r4
 8005dbc:	4628      	mov	r0, r5
 8005dbe:	f000 f854 	bl	8005e6a <__swbuf_r>
 8005dc2:	3001      	adds	r0, #1
 8005dc4:	d1c9      	bne.n	8005d5a <_puts_r+0x2e>
 8005dc6:	e7df      	b.n	8005d88 <_puts_r+0x5c>
 8005dc8:	6823      	ldr	r3, [r4, #0]
 8005dca:	250a      	movs	r5, #10
 8005dcc:	1c5a      	adds	r2, r3, #1
 8005dce:	6022      	str	r2, [r4, #0]
 8005dd0:	701d      	strb	r5, [r3, #0]
 8005dd2:	e7db      	b.n	8005d8c <_puts_r+0x60>

08005dd4 <puts>:
 8005dd4:	4b02      	ldr	r3, [pc, #8]	; (8005de0 <puts+0xc>)
 8005dd6:	4601      	mov	r1, r0
 8005dd8:	6818      	ldr	r0, [r3, #0]
 8005dda:	f7ff bfa7 	b.w	8005d2c <_puts_r>
 8005dde:	bf00      	nop
 8005de0:	20000064 	.word	0x20000064

08005de4 <__sread>:
 8005de4:	b510      	push	{r4, lr}
 8005de6:	460c      	mov	r4, r1
 8005de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dec:	f000 f8fc 	bl	8005fe8 <_read_r>
 8005df0:	2800      	cmp	r0, #0
 8005df2:	bfab      	itete	ge
 8005df4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005df6:	89a3      	ldrhlt	r3, [r4, #12]
 8005df8:	181b      	addge	r3, r3, r0
 8005dfa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005dfe:	bfac      	ite	ge
 8005e00:	6563      	strge	r3, [r4, #84]	; 0x54
 8005e02:	81a3      	strhlt	r3, [r4, #12]
 8005e04:	bd10      	pop	{r4, pc}

08005e06 <__swrite>:
 8005e06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e0a:	461f      	mov	r7, r3
 8005e0c:	898b      	ldrh	r3, [r1, #12]
 8005e0e:	05db      	lsls	r3, r3, #23
 8005e10:	4605      	mov	r5, r0
 8005e12:	460c      	mov	r4, r1
 8005e14:	4616      	mov	r6, r2
 8005e16:	d505      	bpl.n	8005e24 <__swrite+0x1e>
 8005e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e1c:	2302      	movs	r3, #2
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f000 f8d0 	bl	8005fc4 <_lseek_r>
 8005e24:	89a3      	ldrh	r3, [r4, #12]
 8005e26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e2e:	81a3      	strh	r3, [r4, #12]
 8005e30:	4632      	mov	r2, r6
 8005e32:	463b      	mov	r3, r7
 8005e34:	4628      	mov	r0, r5
 8005e36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e3a:	f000 b8f7 	b.w	800602c <_write_r>

08005e3e <__sseek>:
 8005e3e:	b510      	push	{r4, lr}
 8005e40:	460c      	mov	r4, r1
 8005e42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e46:	f000 f8bd 	bl	8005fc4 <_lseek_r>
 8005e4a:	1c43      	adds	r3, r0, #1
 8005e4c:	89a3      	ldrh	r3, [r4, #12]
 8005e4e:	bf15      	itete	ne
 8005e50:	6560      	strne	r0, [r4, #84]	; 0x54
 8005e52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005e56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005e5a:	81a3      	strheq	r3, [r4, #12]
 8005e5c:	bf18      	it	ne
 8005e5e:	81a3      	strhne	r3, [r4, #12]
 8005e60:	bd10      	pop	{r4, pc}

08005e62 <__sclose>:
 8005e62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e66:	f000 b89d 	b.w	8005fa4 <_close_r>

08005e6a <__swbuf_r>:
 8005e6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e6c:	460e      	mov	r6, r1
 8005e6e:	4614      	mov	r4, r2
 8005e70:	4605      	mov	r5, r0
 8005e72:	b118      	cbz	r0, 8005e7c <__swbuf_r+0x12>
 8005e74:	6a03      	ldr	r3, [r0, #32]
 8005e76:	b90b      	cbnz	r3, 8005e7c <__swbuf_r+0x12>
 8005e78:	f7ff ff10 	bl	8005c9c <__sinit>
 8005e7c:	69a3      	ldr	r3, [r4, #24]
 8005e7e:	60a3      	str	r3, [r4, #8]
 8005e80:	89a3      	ldrh	r3, [r4, #12]
 8005e82:	071a      	lsls	r2, r3, #28
 8005e84:	d525      	bpl.n	8005ed2 <__swbuf_r+0x68>
 8005e86:	6923      	ldr	r3, [r4, #16]
 8005e88:	b31b      	cbz	r3, 8005ed2 <__swbuf_r+0x68>
 8005e8a:	6823      	ldr	r3, [r4, #0]
 8005e8c:	6922      	ldr	r2, [r4, #16]
 8005e8e:	1a98      	subs	r0, r3, r2
 8005e90:	6963      	ldr	r3, [r4, #20]
 8005e92:	b2f6      	uxtb	r6, r6
 8005e94:	4283      	cmp	r3, r0
 8005e96:	4637      	mov	r7, r6
 8005e98:	dc04      	bgt.n	8005ea4 <__swbuf_r+0x3a>
 8005e9a:	4621      	mov	r1, r4
 8005e9c:	4628      	mov	r0, r5
 8005e9e:	f000 fca9 	bl	80067f4 <_fflush_r>
 8005ea2:	b9e0      	cbnz	r0, 8005ede <__swbuf_r+0x74>
 8005ea4:	68a3      	ldr	r3, [r4, #8]
 8005ea6:	3b01      	subs	r3, #1
 8005ea8:	60a3      	str	r3, [r4, #8]
 8005eaa:	6823      	ldr	r3, [r4, #0]
 8005eac:	1c5a      	adds	r2, r3, #1
 8005eae:	6022      	str	r2, [r4, #0]
 8005eb0:	701e      	strb	r6, [r3, #0]
 8005eb2:	6962      	ldr	r2, [r4, #20]
 8005eb4:	1c43      	adds	r3, r0, #1
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d004      	beq.n	8005ec4 <__swbuf_r+0x5a>
 8005eba:	89a3      	ldrh	r3, [r4, #12]
 8005ebc:	07db      	lsls	r3, r3, #31
 8005ebe:	d506      	bpl.n	8005ece <__swbuf_r+0x64>
 8005ec0:	2e0a      	cmp	r6, #10
 8005ec2:	d104      	bne.n	8005ece <__swbuf_r+0x64>
 8005ec4:	4621      	mov	r1, r4
 8005ec6:	4628      	mov	r0, r5
 8005ec8:	f000 fc94 	bl	80067f4 <_fflush_r>
 8005ecc:	b938      	cbnz	r0, 8005ede <__swbuf_r+0x74>
 8005ece:	4638      	mov	r0, r7
 8005ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ed2:	4621      	mov	r1, r4
 8005ed4:	4628      	mov	r0, r5
 8005ed6:	f000 f805 	bl	8005ee4 <__swsetup_r>
 8005eda:	2800      	cmp	r0, #0
 8005edc:	d0d5      	beq.n	8005e8a <__swbuf_r+0x20>
 8005ede:	f04f 37ff 	mov.w	r7, #4294967295
 8005ee2:	e7f4      	b.n	8005ece <__swbuf_r+0x64>

08005ee4 <__swsetup_r>:
 8005ee4:	b538      	push	{r3, r4, r5, lr}
 8005ee6:	4b2a      	ldr	r3, [pc, #168]	; (8005f90 <__swsetup_r+0xac>)
 8005ee8:	4605      	mov	r5, r0
 8005eea:	6818      	ldr	r0, [r3, #0]
 8005eec:	460c      	mov	r4, r1
 8005eee:	b118      	cbz	r0, 8005ef8 <__swsetup_r+0x14>
 8005ef0:	6a03      	ldr	r3, [r0, #32]
 8005ef2:	b90b      	cbnz	r3, 8005ef8 <__swsetup_r+0x14>
 8005ef4:	f7ff fed2 	bl	8005c9c <__sinit>
 8005ef8:	89a3      	ldrh	r3, [r4, #12]
 8005efa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005efe:	0718      	lsls	r0, r3, #28
 8005f00:	d422      	bmi.n	8005f48 <__swsetup_r+0x64>
 8005f02:	06d9      	lsls	r1, r3, #27
 8005f04:	d407      	bmi.n	8005f16 <__swsetup_r+0x32>
 8005f06:	2309      	movs	r3, #9
 8005f08:	602b      	str	r3, [r5, #0]
 8005f0a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005f0e:	81a3      	strh	r3, [r4, #12]
 8005f10:	f04f 30ff 	mov.w	r0, #4294967295
 8005f14:	e034      	b.n	8005f80 <__swsetup_r+0x9c>
 8005f16:	0758      	lsls	r0, r3, #29
 8005f18:	d512      	bpl.n	8005f40 <__swsetup_r+0x5c>
 8005f1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f1c:	b141      	cbz	r1, 8005f30 <__swsetup_r+0x4c>
 8005f1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f22:	4299      	cmp	r1, r3
 8005f24:	d002      	beq.n	8005f2c <__swsetup_r+0x48>
 8005f26:	4628      	mov	r0, r5
 8005f28:	f000 f8be 	bl	80060a8 <_free_r>
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	6363      	str	r3, [r4, #52]	; 0x34
 8005f30:	89a3      	ldrh	r3, [r4, #12]
 8005f32:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005f36:	81a3      	strh	r3, [r4, #12]
 8005f38:	2300      	movs	r3, #0
 8005f3a:	6063      	str	r3, [r4, #4]
 8005f3c:	6923      	ldr	r3, [r4, #16]
 8005f3e:	6023      	str	r3, [r4, #0]
 8005f40:	89a3      	ldrh	r3, [r4, #12]
 8005f42:	f043 0308 	orr.w	r3, r3, #8
 8005f46:	81a3      	strh	r3, [r4, #12]
 8005f48:	6923      	ldr	r3, [r4, #16]
 8005f4a:	b94b      	cbnz	r3, 8005f60 <__swsetup_r+0x7c>
 8005f4c:	89a3      	ldrh	r3, [r4, #12]
 8005f4e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005f52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f56:	d003      	beq.n	8005f60 <__swsetup_r+0x7c>
 8005f58:	4621      	mov	r1, r4
 8005f5a:	4628      	mov	r0, r5
 8005f5c:	f000 fc98 	bl	8006890 <__smakebuf_r>
 8005f60:	89a0      	ldrh	r0, [r4, #12]
 8005f62:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f66:	f010 0301 	ands.w	r3, r0, #1
 8005f6a:	d00a      	beq.n	8005f82 <__swsetup_r+0x9e>
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	60a3      	str	r3, [r4, #8]
 8005f70:	6963      	ldr	r3, [r4, #20]
 8005f72:	425b      	negs	r3, r3
 8005f74:	61a3      	str	r3, [r4, #24]
 8005f76:	6923      	ldr	r3, [r4, #16]
 8005f78:	b943      	cbnz	r3, 8005f8c <__swsetup_r+0xa8>
 8005f7a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005f7e:	d1c4      	bne.n	8005f0a <__swsetup_r+0x26>
 8005f80:	bd38      	pop	{r3, r4, r5, pc}
 8005f82:	0781      	lsls	r1, r0, #30
 8005f84:	bf58      	it	pl
 8005f86:	6963      	ldrpl	r3, [r4, #20]
 8005f88:	60a3      	str	r3, [r4, #8]
 8005f8a:	e7f4      	b.n	8005f76 <__swsetup_r+0x92>
 8005f8c:	2000      	movs	r0, #0
 8005f8e:	e7f7      	b.n	8005f80 <__swsetup_r+0x9c>
 8005f90:	20000064 	.word	0x20000064

08005f94 <memset>:
 8005f94:	4402      	add	r2, r0
 8005f96:	4603      	mov	r3, r0
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d100      	bne.n	8005f9e <memset+0xa>
 8005f9c:	4770      	bx	lr
 8005f9e:	f803 1b01 	strb.w	r1, [r3], #1
 8005fa2:	e7f9      	b.n	8005f98 <memset+0x4>

08005fa4 <_close_r>:
 8005fa4:	b538      	push	{r3, r4, r5, lr}
 8005fa6:	4d06      	ldr	r5, [pc, #24]	; (8005fc0 <_close_r+0x1c>)
 8005fa8:	2300      	movs	r3, #0
 8005faa:	4604      	mov	r4, r0
 8005fac:	4608      	mov	r0, r1
 8005fae:	602b      	str	r3, [r5, #0]
 8005fb0:	f7fb fc51 	bl	8001856 <_close>
 8005fb4:	1c43      	adds	r3, r0, #1
 8005fb6:	d102      	bne.n	8005fbe <_close_r+0x1a>
 8005fb8:	682b      	ldr	r3, [r5, #0]
 8005fba:	b103      	cbz	r3, 8005fbe <_close_r+0x1a>
 8005fbc:	6023      	str	r3, [r4, #0]
 8005fbe:	bd38      	pop	{r3, r4, r5, pc}
 8005fc0:	200004b0 	.word	0x200004b0

08005fc4 <_lseek_r>:
 8005fc4:	b538      	push	{r3, r4, r5, lr}
 8005fc6:	4d07      	ldr	r5, [pc, #28]	; (8005fe4 <_lseek_r+0x20>)
 8005fc8:	4604      	mov	r4, r0
 8005fca:	4608      	mov	r0, r1
 8005fcc:	4611      	mov	r1, r2
 8005fce:	2200      	movs	r2, #0
 8005fd0:	602a      	str	r2, [r5, #0]
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	f7fb fc66 	bl	80018a4 <_lseek>
 8005fd8:	1c43      	adds	r3, r0, #1
 8005fda:	d102      	bne.n	8005fe2 <_lseek_r+0x1e>
 8005fdc:	682b      	ldr	r3, [r5, #0]
 8005fde:	b103      	cbz	r3, 8005fe2 <_lseek_r+0x1e>
 8005fe0:	6023      	str	r3, [r4, #0]
 8005fe2:	bd38      	pop	{r3, r4, r5, pc}
 8005fe4:	200004b0 	.word	0x200004b0

08005fe8 <_read_r>:
 8005fe8:	b538      	push	{r3, r4, r5, lr}
 8005fea:	4d07      	ldr	r5, [pc, #28]	; (8006008 <_read_r+0x20>)
 8005fec:	4604      	mov	r4, r0
 8005fee:	4608      	mov	r0, r1
 8005ff0:	4611      	mov	r1, r2
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	602a      	str	r2, [r5, #0]
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	f7fb fbf4 	bl	80017e4 <_read>
 8005ffc:	1c43      	adds	r3, r0, #1
 8005ffe:	d102      	bne.n	8006006 <_read_r+0x1e>
 8006000:	682b      	ldr	r3, [r5, #0]
 8006002:	b103      	cbz	r3, 8006006 <_read_r+0x1e>
 8006004:	6023      	str	r3, [r4, #0]
 8006006:	bd38      	pop	{r3, r4, r5, pc}
 8006008:	200004b0 	.word	0x200004b0

0800600c <_sbrk_r>:
 800600c:	b538      	push	{r3, r4, r5, lr}
 800600e:	4d06      	ldr	r5, [pc, #24]	; (8006028 <_sbrk_r+0x1c>)
 8006010:	2300      	movs	r3, #0
 8006012:	4604      	mov	r4, r0
 8006014:	4608      	mov	r0, r1
 8006016:	602b      	str	r3, [r5, #0]
 8006018:	f7fb fc52 	bl	80018c0 <_sbrk>
 800601c:	1c43      	adds	r3, r0, #1
 800601e:	d102      	bne.n	8006026 <_sbrk_r+0x1a>
 8006020:	682b      	ldr	r3, [r5, #0]
 8006022:	b103      	cbz	r3, 8006026 <_sbrk_r+0x1a>
 8006024:	6023      	str	r3, [r4, #0]
 8006026:	bd38      	pop	{r3, r4, r5, pc}
 8006028:	200004b0 	.word	0x200004b0

0800602c <_write_r>:
 800602c:	b538      	push	{r3, r4, r5, lr}
 800602e:	4d07      	ldr	r5, [pc, #28]	; (800604c <_write_r+0x20>)
 8006030:	4604      	mov	r4, r0
 8006032:	4608      	mov	r0, r1
 8006034:	4611      	mov	r1, r2
 8006036:	2200      	movs	r2, #0
 8006038:	602a      	str	r2, [r5, #0]
 800603a:	461a      	mov	r2, r3
 800603c:	f7fb fbef 	bl	800181e <_write>
 8006040:	1c43      	adds	r3, r0, #1
 8006042:	d102      	bne.n	800604a <_write_r+0x1e>
 8006044:	682b      	ldr	r3, [r5, #0]
 8006046:	b103      	cbz	r3, 800604a <_write_r+0x1e>
 8006048:	6023      	str	r3, [r4, #0]
 800604a:	bd38      	pop	{r3, r4, r5, pc}
 800604c:	200004b0 	.word	0x200004b0

08006050 <__errno>:
 8006050:	4b01      	ldr	r3, [pc, #4]	; (8006058 <__errno+0x8>)
 8006052:	6818      	ldr	r0, [r3, #0]
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop
 8006058:	20000064 	.word	0x20000064

0800605c <__libc_init_array>:
 800605c:	b570      	push	{r4, r5, r6, lr}
 800605e:	4d0d      	ldr	r5, [pc, #52]	; (8006094 <__libc_init_array+0x38>)
 8006060:	4c0d      	ldr	r4, [pc, #52]	; (8006098 <__libc_init_array+0x3c>)
 8006062:	1b64      	subs	r4, r4, r5
 8006064:	10a4      	asrs	r4, r4, #2
 8006066:	2600      	movs	r6, #0
 8006068:	42a6      	cmp	r6, r4
 800606a:	d109      	bne.n	8006080 <__libc_init_array+0x24>
 800606c:	4d0b      	ldr	r5, [pc, #44]	; (800609c <__libc_init_array+0x40>)
 800606e:	4c0c      	ldr	r4, [pc, #48]	; (80060a0 <__libc_init_array+0x44>)
 8006070:	f000 fc6c 	bl	800694c <_init>
 8006074:	1b64      	subs	r4, r4, r5
 8006076:	10a4      	asrs	r4, r4, #2
 8006078:	2600      	movs	r6, #0
 800607a:	42a6      	cmp	r6, r4
 800607c:	d105      	bne.n	800608a <__libc_init_array+0x2e>
 800607e:	bd70      	pop	{r4, r5, r6, pc}
 8006080:	f855 3b04 	ldr.w	r3, [r5], #4
 8006084:	4798      	blx	r3
 8006086:	3601      	adds	r6, #1
 8006088:	e7ee      	b.n	8006068 <__libc_init_array+0xc>
 800608a:	f855 3b04 	ldr.w	r3, [r5], #4
 800608e:	4798      	blx	r3
 8006090:	3601      	adds	r6, #1
 8006092:	e7f2      	b.n	800607a <__libc_init_array+0x1e>
 8006094:	080069e0 	.word	0x080069e0
 8006098:	080069e0 	.word	0x080069e0
 800609c:	080069e0 	.word	0x080069e0
 80060a0:	080069e4 	.word	0x080069e4

080060a4 <__retarget_lock_acquire_recursive>:
 80060a4:	4770      	bx	lr

080060a6 <__retarget_lock_release_recursive>:
 80060a6:	4770      	bx	lr

080060a8 <_free_r>:
 80060a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80060aa:	2900      	cmp	r1, #0
 80060ac:	d044      	beq.n	8006138 <_free_r+0x90>
 80060ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060b2:	9001      	str	r0, [sp, #4]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f1a1 0404 	sub.w	r4, r1, #4
 80060ba:	bfb8      	it	lt
 80060bc:	18e4      	addlt	r4, r4, r3
 80060be:	f7ff fd67 	bl	8005b90 <__malloc_lock>
 80060c2:	4a1e      	ldr	r2, [pc, #120]	; (800613c <_free_r+0x94>)
 80060c4:	9801      	ldr	r0, [sp, #4]
 80060c6:	6813      	ldr	r3, [r2, #0]
 80060c8:	b933      	cbnz	r3, 80060d8 <_free_r+0x30>
 80060ca:	6063      	str	r3, [r4, #4]
 80060cc:	6014      	str	r4, [r2, #0]
 80060ce:	b003      	add	sp, #12
 80060d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80060d4:	f7ff bd62 	b.w	8005b9c <__malloc_unlock>
 80060d8:	42a3      	cmp	r3, r4
 80060da:	d908      	bls.n	80060ee <_free_r+0x46>
 80060dc:	6825      	ldr	r5, [r4, #0]
 80060de:	1961      	adds	r1, r4, r5
 80060e0:	428b      	cmp	r3, r1
 80060e2:	bf01      	itttt	eq
 80060e4:	6819      	ldreq	r1, [r3, #0]
 80060e6:	685b      	ldreq	r3, [r3, #4]
 80060e8:	1949      	addeq	r1, r1, r5
 80060ea:	6021      	streq	r1, [r4, #0]
 80060ec:	e7ed      	b.n	80060ca <_free_r+0x22>
 80060ee:	461a      	mov	r2, r3
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	b10b      	cbz	r3, 80060f8 <_free_r+0x50>
 80060f4:	42a3      	cmp	r3, r4
 80060f6:	d9fa      	bls.n	80060ee <_free_r+0x46>
 80060f8:	6811      	ldr	r1, [r2, #0]
 80060fa:	1855      	adds	r5, r2, r1
 80060fc:	42a5      	cmp	r5, r4
 80060fe:	d10b      	bne.n	8006118 <_free_r+0x70>
 8006100:	6824      	ldr	r4, [r4, #0]
 8006102:	4421      	add	r1, r4
 8006104:	1854      	adds	r4, r2, r1
 8006106:	42a3      	cmp	r3, r4
 8006108:	6011      	str	r1, [r2, #0]
 800610a:	d1e0      	bne.n	80060ce <_free_r+0x26>
 800610c:	681c      	ldr	r4, [r3, #0]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	6053      	str	r3, [r2, #4]
 8006112:	440c      	add	r4, r1
 8006114:	6014      	str	r4, [r2, #0]
 8006116:	e7da      	b.n	80060ce <_free_r+0x26>
 8006118:	d902      	bls.n	8006120 <_free_r+0x78>
 800611a:	230c      	movs	r3, #12
 800611c:	6003      	str	r3, [r0, #0]
 800611e:	e7d6      	b.n	80060ce <_free_r+0x26>
 8006120:	6825      	ldr	r5, [r4, #0]
 8006122:	1961      	adds	r1, r4, r5
 8006124:	428b      	cmp	r3, r1
 8006126:	bf04      	itt	eq
 8006128:	6819      	ldreq	r1, [r3, #0]
 800612a:	685b      	ldreq	r3, [r3, #4]
 800612c:	6063      	str	r3, [r4, #4]
 800612e:	bf04      	itt	eq
 8006130:	1949      	addeq	r1, r1, r5
 8006132:	6021      	streq	r1, [r4, #0]
 8006134:	6054      	str	r4, [r2, #4]
 8006136:	e7ca      	b.n	80060ce <_free_r+0x26>
 8006138:	b003      	add	sp, #12
 800613a:	bd30      	pop	{r4, r5, pc}
 800613c:	2000036c 	.word	0x2000036c

08006140 <__sfputc_r>:
 8006140:	6893      	ldr	r3, [r2, #8]
 8006142:	3b01      	subs	r3, #1
 8006144:	2b00      	cmp	r3, #0
 8006146:	b410      	push	{r4}
 8006148:	6093      	str	r3, [r2, #8]
 800614a:	da08      	bge.n	800615e <__sfputc_r+0x1e>
 800614c:	6994      	ldr	r4, [r2, #24]
 800614e:	42a3      	cmp	r3, r4
 8006150:	db01      	blt.n	8006156 <__sfputc_r+0x16>
 8006152:	290a      	cmp	r1, #10
 8006154:	d103      	bne.n	800615e <__sfputc_r+0x1e>
 8006156:	f85d 4b04 	ldr.w	r4, [sp], #4
 800615a:	f7ff be86 	b.w	8005e6a <__swbuf_r>
 800615e:	6813      	ldr	r3, [r2, #0]
 8006160:	1c58      	adds	r0, r3, #1
 8006162:	6010      	str	r0, [r2, #0]
 8006164:	7019      	strb	r1, [r3, #0]
 8006166:	4608      	mov	r0, r1
 8006168:	f85d 4b04 	ldr.w	r4, [sp], #4
 800616c:	4770      	bx	lr

0800616e <__sfputs_r>:
 800616e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006170:	4606      	mov	r6, r0
 8006172:	460f      	mov	r7, r1
 8006174:	4614      	mov	r4, r2
 8006176:	18d5      	adds	r5, r2, r3
 8006178:	42ac      	cmp	r4, r5
 800617a:	d101      	bne.n	8006180 <__sfputs_r+0x12>
 800617c:	2000      	movs	r0, #0
 800617e:	e007      	b.n	8006190 <__sfputs_r+0x22>
 8006180:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006184:	463a      	mov	r2, r7
 8006186:	4630      	mov	r0, r6
 8006188:	f7ff ffda 	bl	8006140 <__sfputc_r>
 800618c:	1c43      	adds	r3, r0, #1
 800618e:	d1f3      	bne.n	8006178 <__sfputs_r+0xa>
 8006190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006194 <_vfiprintf_r>:
 8006194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006198:	460d      	mov	r5, r1
 800619a:	b09d      	sub	sp, #116	; 0x74
 800619c:	4614      	mov	r4, r2
 800619e:	4698      	mov	r8, r3
 80061a0:	4606      	mov	r6, r0
 80061a2:	b118      	cbz	r0, 80061ac <_vfiprintf_r+0x18>
 80061a4:	6a03      	ldr	r3, [r0, #32]
 80061a6:	b90b      	cbnz	r3, 80061ac <_vfiprintf_r+0x18>
 80061a8:	f7ff fd78 	bl	8005c9c <__sinit>
 80061ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80061ae:	07d9      	lsls	r1, r3, #31
 80061b0:	d405      	bmi.n	80061be <_vfiprintf_r+0x2a>
 80061b2:	89ab      	ldrh	r3, [r5, #12]
 80061b4:	059a      	lsls	r2, r3, #22
 80061b6:	d402      	bmi.n	80061be <_vfiprintf_r+0x2a>
 80061b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80061ba:	f7ff ff73 	bl	80060a4 <__retarget_lock_acquire_recursive>
 80061be:	89ab      	ldrh	r3, [r5, #12]
 80061c0:	071b      	lsls	r3, r3, #28
 80061c2:	d501      	bpl.n	80061c8 <_vfiprintf_r+0x34>
 80061c4:	692b      	ldr	r3, [r5, #16]
 80061c6:	b99b      	cbnz	r3, 80061f0 <_vfiprintf_r+0x5c>
 80061c8:	4629      	mov	r1, r5
 80061ca:	4630      	mov	r0, r6
 80061cc:	f7ff fe8a 	bl	8005ee4 <__swsetup_r>
 80061d0:	b170      	cbz	r0, 80061f0 <_vfiprintf_r+0x5c>
 80061d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80061d4:	07dc      	lsls	r4, r3, #31
 80061d6:	d504      	bpl.n	80061e2 <_vfiprintf_r+0x4e>
 80061d8:	f04f 30ff 	mov.w	r0, #4294967295
 80061dc:	b01d      	add	sp, #116	; 0x74
 80061de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061e2:	89ab      	ldrh	r3, [r5, #12]
 80061e4:	0598      	lsls	r0, r3, #22
 80061e6:	d4f7      	bmi.n	80061d8 <_vfiprintf_r+0x44>
 80061e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80061ea:	f7ff ff5c 	bl	80060a6 <__retarget_lock_release_recursive>
 80061ee:	e7f3      	b.n	80061d8 <_vfiprintf_r+0x44>
 80061f0:	2300      	movs	r3, #0
 80061f2:	9309      	str	r3, [sp, #36]	; 0x24
 80061f4:	2320      	movs	r3, #32
 80061f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80061fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80061fe:	2330      	movs	r3, #48	; 0x30
 8006200:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80063b4 <_vfiprintf_r+0x220>
 8006204:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006208:	f04f 0901 	mov.w	r9, #1
 800620c:	4623      	mov	r3, r4
 800620e:	469a      	mov	sl, r3
 8006210:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006214:	b10a      	cbz	r2, 800621a <_vfiprintf_r+0x86>
 8006216:	2a25      	cmp	r2, #37	; 0x25
 8006218:	d1f9      	bne.n	800620e <_vfiprintf_r+0x7a>
 800621a:	ebba 0b04 	subs.w	fp, sl, r4
 800621e:	d00b      	beq.n	8006238 <_vfiprintf_r+0xa4>
 8006220:	465b      	mov	r3, fp
 8006222:	4622      	mov	r2, r4
 8006224:	4629      	mov	r1, r5
 8006226:	4630      	mov	r0, r6
 8006228:	f7ff ffa1 	bl	800616e <__sfputs_r>
 800622c:	3001      	adds	r0, #1
 800622e:	f000 80a9 	beq.w	8006384 <_vfiprintf_r+0x1f0>
 8006232:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006234:	445a      	add	r2, fp
 8006236:	9209      	str	r2, [sp, #36]	; 0x24
 8006238:	f89a 3000 	ldrb.w	r3, [sl]
 800623c:	2b00      	cmp	r3, #0
 800623e:	f000 80a1 	beq.w	8006384 <_vfiprintf_r+0x1f0>
 8006242:	2300      	movs	r3, #0
 8006244:	f04f 32ff 	mov.w	r2, #4294967295
 8006248:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800624c:	f10a 0a01 	add.w	sl, sl, #1
 8006250:	9304      	str	r3, [sp, #16]
 8006252:	9307      	str	r3, [sp, #28]
 8006254:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006258:	931a      	str	r3, [sp, #104]	; 0x68
 800625a:	4654      	mov	r4, sl
 800625c:	2205      	movs	r2, #5
 800625e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006262:	4854      	ldr	r0, [pc, #336]	; (80063b4 <_vfiprintf_r+0x220>)
 8006264:	f7f9 ffb4 	bl	80001d0 <memchr>
 8006268:	9a04      	ldr	r2, [sp, #16]
 800626a:	b9d8      	cbnz	r0, 80062a4 <_vfiprintf_r+0x110>
 800626c:	06d1      	lsls	r1, r2, #27
 800626e:	bf44      	itt	mi
 8006270:	2320      	movmi	r3, #32
 8006272:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006276:	0713      	lsls	r3, r2, #28
 8006278:	bf44      	itt	mi
 800627a:	232b      	movmi	r3, #43	; 0x2b
 800627c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006280:	f89a 3000 	ldrb.w	r3, [sl]
 8006284:	2b2a      	cmp	r3, #42	; 0x2a
 8006286:	d015      	beq.n	80062b4 <_vfiprintf_r+0x120>
 8006288:	9a07      	ldr	r2, [sp, #28]
 800628a:	4654      	mov	r4, sl
 800628c:	2000      	movs	r0, #0
 800628e:	f04f 0c0a 	mov.w	ip, #10
 8006292:	4621      	mov	r1, r4
 8006294:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006298:	3b30      	subs	r3, #48	; 0x30
 800629a:	2b09      	cmp	r3, #9
 800629c:	d94d      	bls.n	800633a <_vfiprintf_r+0x1a6>
 800629e:	b1b0      	cbz	r0, 80062ce <_vfiprintf_r+0x13a>
 80062a0:	9207      	str	r2, [sp, #28]
 80062a2:	e014      	b.n	80062ce <_vfiprintf_r+0x13a>
 80062a4:	eba0 0308 	sub.w	r3, r0, r8
 80062a8:	fa09 f303 	lsl.w	r3, r9, r3
 80062ac:	4313      	orrs	r3, r2
 80062ae:	9304      	str	r3, [sp, #16]
 80062b0:	46a2      	mov	sl, r4
 80062b2:	e7d2      	b.n	800625a <_vfiprintf_r+0xc6>
 80062b4:	9b03      	ldr	r3, [sp, #12]
 80062b6:	1d19      	adds	r1, r3, #4
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	9103      	str	r1, [sp, #12]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	bfbb      	ittet	lt
 80062c0:	425b      	neglt	r3, r3
 80062c2:	f042 0202 	orrlt.w	r2, r2, #2
 80062c6:	9307      	strge	r3, [sp, #28]
 80062c8:	9307      	strlt	r3, [sp, #28]
 80062ca:	bfb8      	it	lt
 80062cc:	9204      	strlt	r2, [sp, #16]
 80062ce:	7823      	ldrb	r3, [r4, #0]
 80062d0:	2b2e      	cmp	r3, #46	; 0x2e
 80062d2:	d10c      	bne.n	80062ee <_vfiprintf_r+0x15a>
 80062d4:	7863      	ldrb	r3, [r4, #1]
 80062d6:	2b2a      	cmp	r3, #42	; 0x2a
 80062d8:	d134      	bne.n	8006344 <_vfiprintf_r+0x1b0>
 80062da:	9b03      	ldr	r3, [sp, #12]
 80062dc:	1d1a      	adds	r2, r3, #4
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	9203      	str	r2, [sp, #12]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	bfb8      	it	lt
 80062e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80062ea:	3402      	adds	r4, #2
 80062ec:	9305      	str	r3, [sp, #20]
 80062ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80063c4 <_vfiprintf_r+0x230>
 80062f2:	7821      	ldrb	r1, [r4, #0]
 80062f4:	2203      	movs	r2, #3
 80062f6:	4650      	mov	r0, sl
 80062f8:	f7f9 ff6a 	bl	80001d0 <memchr>
 80062fc:	b138      	cbz	r0, 800630e <_vfiprintf_r+0x17a>
 80062fe:	9b04      	ldr	r3, [sp, #16]
 8006300:	eba0 000a 	sub.w	r0, r0, sl
 8006304:	2240      	movs	r2, #64	; 0x40
 8006306:	4082      	lsls	r2, r0
 8006308:	4313      	orrs	r3, r2
 800630a:	3401      	adds	r4, #1
 800630c:	9304      	str	r3, [sp, #16]
 800630e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006312:	4829      	ldr	r0, [pc, #164]	; (80063b8 <_vfiprintf_r+0x224>)
 8006314:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006318:	2206      	movs	r2, #6
 800631a:	f7f9 ff59 	bl	80001d0 <memchr>
 800631e:	2800      	cmp	r0, #0
 8006320:	d03f      	beq.n	80063a2 <_vfiprintf_r+0x20e>
 8006322:	4b26      	ldr	r3, [pc, #152]	; (80063bc <_vfiprintf_r+0x228>)
 8006324:	bb1b      	cbnz	r3, 800636e <_vfiprintf_r+0x1da>
 8006326:	9b03      	ldr	r3, [sp, #12]
 8006328:	3307      	adds	r3, #7
 800632a:	f023 0307 	bic.w	r3, r3, #7
 800632e:	3308      	adds	r3, #8
 8006330:	9303      	str	r3, [sp, #12]
 8006332:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006334:	443b      	add	r3, r7
 8006336:	9309      	str	r3, [sp, #36]	; 0x24
 8006338:	e768      	b.n	800620c <_vfiprintf_r+0x78>
 800633a:	fb0c 3202 	mla	r2, ip, r2, r3
 800633e:	460c      	mov	r4, r1
 8006340:	2001      	movs	r0, #1
 8006342:	e7a6      	b.n	8006292 <_vfiprintf_r+0xfe>
 8006344:	2300      	movs	r3, #0
 8006346:	3401      	adds	r4, #1
 8006348:	9305      	str	r3, [sp, #20]
 800634a:	4619      	mov	r1, r3
 800634c:	f04f 0c0a 	mov.w	ip, #10
 8006350:	4620      	mov	r0, r4
 8006352:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006356:	3a30      	subs	r2, #48	; 0x30
 8006358:	2a09      	cmp	r2, #9
 800635a:	d903      	bls.n	8006364 <_vfiprintf_r+0x1d0>
 800635c:	2b00      	cmp	r3, #0
 800635e:	d0c6      	beq.n	80062ee <_vfiprintf_r+0x15a>
 8006360:	9105      	str	r1, [sp, #20]
 8006362:	e7c4      	b.n	80062ee <_vfiprintf_r+0x15a>
 8006364:	fb0c 2101 	mla	r1, ip, r1, r2
 8006368:	4604      	mov	r4, r0
 800636a:	2301      	movs	r3, #1
 800636c:	e7f0      	b.n	8006350 <_vfiprintf_r+0x1bc>
 800636e:	ab03      	add	r3, sp, #12
 8006370:	9300      	str	r3, [sp, #0]
 8006372:	462a      	mov	r2, r5
 8006374:	4b12      	ldr	r3, [pc, #72]	; (80063c0 <_vfiprintf_r+0x22c>)
 8006376:	a904      	add	r1, sp, #16
 8006378:	4630      	mov	r0, r6
 800637a:	f3af 8000 	nop.w
 800637e:	4607      	mov	r7, r0
 8006380:	1c78      	adds	r0, r7, #1
 8006382:	d1d6      	bne.n	8006332 <_vfiprintf_r+0x19e>
 8006384:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006386:	07d9      	lsls	r1, r3, #31
 8006388:	d405      	bmi.n	8006396 <_vfiprintf_r+0x202>
 800638a:	89ab      	ldrh	r3, [r5, #12]
 800638c:	059a      	lsls	r2, r3, #22
 800638e:	d402      	bmi.n	8006396 <_vfiprintf_r+0x202>
 8006390:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006392:	f7ff fe88 	bl	80060a6 <__retarget_lock_release_recursive>
 8006396:	89ab      	ldrh	r3, [r5, #12]
 8006398:	065b      	lsls	r3, r3, #25
 800639a:	f53f af1d 	bmi.w	80061d8 <_vfiprintf_r+0x44>
 800639e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80063a0:	e71c      	b.n	80061dc <_vfiprintf_r+0x48>
 80063a2:	ab03      	add	r3, sp, #12
 80063a4:	9300      	str	r3, [sp, #0]
 80063a6:	462a      	mov	r2, r5
 80063a8:	4b05      	ldr	r3, [pc, #20]	; (80063c0 <_vfiprintf_r+0x22c>)
 80063aa:	a904      	add	r1, sp, #16
 80063ac:	4630      	mov	r0, r6
 80063ae:	f000 f879 	bl	80064a4 <_printf_i>
 80063b2:	e7e4      	b.n	800637e <_vfiprintf_r+0x1ea>
 80063b4:	080069a4 	.word	0x080069a4
 80063b8:	080069ae 	.word	0x080069ae
 80063bc:	00000000 	.word	0x00000000
 80063c0:	0800616f 	.word	0x0800616f
 80063c4:	080069aa 	.word	0x080069aa

080063c8 <_printf_common>:
 80063c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063cc:	4616      	mov	r6, r2
 80063ce:	4699      	mov	r9, r3
 80063d0:	688a      	ldr	r2, [r1, #8]
 80063d2:	690b      	ldr	r3, [r1, #16]
 80063d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80063d8:	4293      	cmp	r3, r2
 80063da:	bfb8      	it	lt
 80063dc:	4613      	movlt	r3, r2
 80063de:	6033      	str	r3, [r6, #0]
 80063e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80063e4:	4607      	mov	r7, r0
 80063e6:	460c      	mov	r4, r1
 80063e8:	b10a      	cbz	r2, 80063ee <_printf_common+0x26>
 80063ea:	3301      	adds	r3, #1
 80063ec:	6033      	str	r3, [r6, #0]
 80063ee:	6823      	ldr	r3, [r4, #0]
 80063f0:	0699      	lsls	r1, r3, #26
 80063f2:	bf42      	ittt	mi
 80063f4:	6833      	ldrmi	r3, [r6, #0]
 80063f6:	3302      	addmi	r3, #2
 80063f8:	6033      	strmi	r3, [r6, #0]
 80063fa:	6825      	ldr	r5, [r4, #0]
 80063fc:	f015 0506 	ands.w	r5, r5, #6
 8006400:	d106      	bne.n	8006410 <_printf_common+0x48>
 8006402:	f104 0a19 	add.w	sl, r4, #25
 8006406:	68e3      	ldr	r3, [r4, #12]
 8006408:	6832      	ldr	r2, [r6, #0]
 800640a:	1a9b      	subs	r3, r3, r2
 800640c:	42ab      	cmp	r3, r5
 800640e:	dc26      	bgt.n	800645e <_printf_common+0x96>
 8006410:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006414:	1e13      	subs	r3, r2, #0
 8006416:	6822      	ldr	r2, [r4, #0]
 8006418:	bf18      	it	ne
 800641a:	2301      	movne	r3, #1
 800641c:	0692      	lsls	r2, r2, #26
 800641e:	d42b      	bmi.n	8006478 <_printf_common+0xb0>
 8006420:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006424:	4649      	mov	r1, r9
 8006426:	4638      	mov	r0, r7
 8006428:	47c0      	blx	r8
 800642a:	3001      	adds	r0, #1
 800642c:	d01e      	beq.n	800646c <_printf_common+0xa4>
 800642e:	6823      	ldr	r3, [r4, #0]
 8006430:	6922      	ldr	r2, [r4, #16]
 8006432:	f003 0306 	and.w	r3, r3, #6
 8006436:	2b04      	cmp	r3, #4
 8006438:	bf02      	ittt	eq
 800643a:	68e5      	ldreq	r5, [r4, #12]
 800643c:	6833      	ldreq	r3, [r6, #0]
 800643e:	1aed      	subeq	r5, r5, r3
 8006440:	68a3      	ldr	r3, [r4, #8]
 8006442:	bf0c      	ite	eq
 8006444:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006448:	2500      	movne	r5, #0
 800644a:	4293      	cmp	r3, r2
 800644c:	bfc4      	itt	gt
 800644e:	1a9b      	subgt	r3, r3, r2
 8006450:	18ed      	addgt	r5, r5, r3
 8006452:	2600      	movs	r6, #0
 8006454:	341a      	adds	r4, #26
 8006456:	42b5      	cmp	r5, r6
 8006458:	d11a      	bne.n	8006490 <_printf_common+0xc8>
 800645a:	2000      	movs	r0, #0
 800645c:	e008      	b.n	8006470 <_printf_common+0xa8>
 800645e:	2301      	movs	r3, #1
 8006460:	4652      	mov	r2, sl
 8006462:	4649      	mov	r1, r9
 8006464:	4638      	mov	r0, r7
 8006466:	47c0      	blx	r8
 8006468:	3001      	adds	r0, #1
 800646a:	d103      	bne.n	8006474 <_printf_common+0xac>
 800646c:	f04f 30ff 	mov.w	r0, #4294967295
 8006470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006474:	3501      	adds	r5, #1
 8006476:	e7c6      	b.n	8006406 <_printf_common+0x3e>
 8006478:	18e1      	adds	r1, r4, r3
 800647a:	1c5a      	adds	r2, r3, #1
 800647c:	2030      	movs	r0, #48	; 0x30
 800647e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006482:	4422      	add	r2, r4
 8006484:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006488:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800648c:	3302      	adds	r3, #2
 800648e:	e7c7      	b.n	8006420 <_printf_common+0x58>
 8006490:	2301      	movs	r3, #1
 8006492:	4622      	mov	r2, r4
 8006494:	4649      	mov	r1, r9
 8006496:	4638      	mov	r0, r7
 8006498:	47c0      	blx	r8
 800649a:	3001      	adds	r0, #1
 800649c:	d0e6      	beq.n	800646c <_printf_common+0xa4>
 800649e:	3601      	adds	r6, #1
 80064a0:	e7d9      	b.n	8006456 <_printf_common+0x8e>
	...

080064a4 <_printf_i>:
 80064a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064a8:	7e0f      	ldrb	r7, [r1, #24]
 80064aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80064ac:	2f78      	cmp	r7, #120	; 0x78
 80064ae:	4691      	mov	r9, r2
 80064b0:	4680      	mov	r8, r0
 80064b2:	460c      	mov	r4, r1
 80064b4:	469a      	mov	sl, r3
 80064b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80064ba:	d807      	bhi.n	80064cc <_printf_i+0x28>
 80064bc:	2f62      	cmp	r7, #98	; 0x62
 80064be:	d80a      	bhi.n	80064d6 <_printf_i+0x32>
 80064c0:	2f00      	cmp	r7, #0
 80064c2:	f000 80d4 	beq.w	800666e <_printf_i+0x1ca>
 80064c6:	2f58      	cmp	r7, #88	; 0x58
 80064c8:	f000 80c0 	beq.w	800664c <_printf_i+0x1a8>
 80064cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80064d4:	e03a      	b.n	800654c <_printf_i+0xa8>
 80064d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80064da:	2b15      	cmp	r3, #21
 80064dc:	d8f6      	bhi.n	80064cc <_printf_i+0x28>
 80064de:	a101      	add	r1, pc, #4	; (adr r1, 80064e4 <_printf_i+0x40>)
 80064e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064e4:	0800653d 	.word	0x0800653d
 80064e8:	08006551 	.word	0x08006551
 80064ec:	080064cd 	.word	0x080064cd
 80064f0:	080064cd 	.word	0x080064cd
 80064f4:	080064cd 	.word	0x080064cd
 80064f8:	080064cd 	.word	0x080064cd
 80064fc:	08006551 	.word	0x08006551
 8006500:	080064cd 	.word	0x080064cd
 8006504:	080064cd 	.word	0x080064cd
 8006508:	080064cd 	.word	0x080064cd
 800650c:	080064cd 	.word	0x080064cd
 8006510:	08006655 	.word	0x08006655
 8006514:	0800657d 	.word	0x0800657d
 8006518:	0800660f 	.word	0x0800660f
 800651c:	080064cd 	.word	0x080064cd
 8006520:	080064cd 	.word	0x080064cd
 8006524:	08006677 	.word	0x08006677
 8006528:	080064cd 	.word	0x080064cd
 800652c:	0800657d 	.word	0x0800657d
 8006530:	080064cd 	.word	0x080064cd
 8006534:	080064cd 	.word	0x080064cd
 8006538:	08006617 	.word	0x08006617
 800653c:	682b      	ldr	r3, [r5, #0]
 800653e:	1d1a      	adds	r2, r3, #4
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	602a      	str	r2, [r5, #0]
 8006544:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006548:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800654c:	2301      	movs	r3, #1
 800654e:	e09f      	b.n	8006690 <_printf_i+0x1ec>
 8006550:	6820      	ldr	r0, [r4, #0]
 8006552:	682b      	ldr	r3, [r5, #0]
 8006554:	0607      	lsls	r7, r0, #24
 8006556:	f103 0104 	add.w	r1, r3, #4
 800655a:	6029      	str	r1, [r5, #0]
 800655c:	d501      	bpl.n	8006562 <_printf_i+0xbe>
 800655e:	681e      	ldr	r6, [r3, #0]
 8006560:	e003      	b.n	800656a <_printf_i+0xc6>
 8006562:	0646      	lsls	r6, r0, #25
 8006564:	d5fb      	bpl.n	800655e <_printf_i+0xba>
 8006566:	f9b3 6000 	ldrsh.w	r6, [r3]
 800656a:	2e00      	cmp	r6, #0
 800656c:	da03      	bge.n	8006576 <_printf_i+0xd2>
 800656e:	232d      	movs	r3, #45	; 0x2d
 8006570:	4276      	negs	r6, r6
 8006572:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006576:	485a      	ldr	r0, [pc, #360]	; (80066e0 <_printf_i+0x23c>)
 8006578:	230a      	movs	r3, #10
 800657a:	e012      	b.n	80065a2 <_printf_i+0xfe>
 800657c:	682b      	ldr	r3, [r5, #0]
 800657e:	6820      	ldr	r0, [r4, #0]
 8006580:	1d19      	adds	r1, r3, #4
 8006582:	6029      	str	r1, [r5, #0]
 8006584:	0605      	lsls	r5, r0, #24
 8006586:	d501      	bpl.n	800658c <_printf_i+0xe8>
 8006588:	681e      	ldr	r6, [r3, #0]
 800658a:	e002      	b.n	8006592 <_printf_i+0xee>
 800658c:	0641      	lsls	r1, r0, #25
 800658e:	d5fb      	bpl.n	8006588 <_printf_i+0xe4>
 8006590:	881e      	ldrh	r6, [r3, #0]
 8006592:	4853      	ldr	r0, [pc, #332]	; (80066e0 <_printf_i+0x23c>)
 8006594:	2f6f      	cmp	r7, #111	; 0x6f
 8006596:	bf0c      	ite	eq
 8006598:	2308      	moveq	r3, #8
 800659a:	230a      	movne	r3, #10
 800659c:	2100      	movs	r1, #0
 800659e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80065a2:	6865      	ldr	r5, [r4, #4]
 80065a4:	60a5      	str	r5, [r4, #8]
 80065a6:	2d00      	cmp	r5, #0
 80065a8:	bfa2      	ittt	ge
 80065aa:	6821      	ldrge	r1, [r4, #0]
 80065ac:	f021 0104 	bicge.w	r1, r1, #4
 80065b0:	6021      	strge	r1, [r4, #0]
 80065b2:	b90e      	cbnz	r6, 80065b8 <_printf_i+0x114>
 80065b4:	2d00      	cmp	r5, #0
 80065b6:	d04b      	beq.n	8006650 <_printf_i+0x1ac>
 80065b8:	4615      	mov	r5, r2
 80065ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80065be:	fb03 6711 	mls	r7, r3, r1, r6
 80065c2:	5dc7      	ldrb	r7, [r0, r7]
 80065c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80065c8:	4637      	mov	r7, r6
 80065ca:	42bb      	cmp	r3, r7
 80065cc:	460e      	mov	r6, r1
 80065ce:	d9f4      	bls.n	80065ba <_printf_i+0x116>
 80065d0:	2b08      	cmp	r3, #8
 80065d2:	d10b      	bne.n	80065ec <_printf_i+0x148>
 80065d4:	6823      	ldr	r3, [r4, #0]
 80065d6:	07de      	lsls	r6, r3, #31
 80065d8:	d508      	bpl.n	80065ec <_printf_i+0x148>
 80065da:	6923      	ldr	r3, [r4, #16]
 80065dc:	6861      	ldr	r1, [r4, #4]
 80065de:	4299      	cmp	r1, r3
 80065e0:	bfde      	ittt	le
 80065e2:	2330      	movle	r3, #48	; 0x30
 80065e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80065e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80065ec:	1b52      	subs	r2, r2, r5
 80065ee:	6122      	str	r2, [r4, #16]
 80065f0:	f8cd a000 	str.w	sl, [sp]
 80065f4:	464b      	mov	r3, r9
 80065f6:	aa03      	add	r2, sp, #12
 80065f8:	4621      	mov	r1, r4
 80065fa:	4640      	mov	r0, r8
 80065fc:	f7ff fee4 	bl	80063c8 <_printf_common>
 8006600:	3001      	adds	r0, #1
 8006602:	d14a      	bne.n	800669a <_printf_i+0x1f6>
 8006604:	f04f 30ff 	mov.w	r0, #4294967295
 8006608:	b004      	add	sp, #16
 800660a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800660e:	6823      	ldr	r3, [r4, #0]
 8006610:	f043 0320 	orr.w	r3, r3, #32
 8006614:	6023      	str	r3, [r4, #0]
 8006616:	4833      	ldr	r0, [pc, #204]	; (80066e4 <_printf_i+0x240>)
 8006618:	2778      	movs	r7, #120	; 0x78
 800661a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800661e:	6823      	ldr	r3, [r4, #0]
 8006620:	6829      	ldr	r1, [r5, #0]
 8006622:	061f      	lsls	r7, r3, #24
 8006624:	f851 6b04 	ldr.w	r6, [r1], #4
 8006628:	d402      	bmi.n	8006630 <_printf_i+0x18c>
 800662a:	065f      	lsls	r7, r3, #25
 800662c:	bf48      	it	mi
 800662e:	b2b6      	uxthmi	r6, r6
 8006630:	07df      	lsls	r7, r3, #31
 8006632:	bf48      	it	mi
 8006634:	f043 0320 	orrmi.w	r3, r3, #32
 8006638:	6029      	str	r1, [r5, #0]
 800663a:	bf48      	it	mi
 800663c:	6023      	strmi	r3, [r4, #0]
 800663e:	b91e      	cbnz	r6, 8006648 <_printf_i+0x1a4>
 8006640:	6823      	ldr	r3, [r4, #0]
 8006642:	f023 0320 	bic.w	r3, r3, #32
 8006646:	6023      	str	r3, [r4, #0]
 8006648:	2310      	movs	r3, #16
 800664a:	e7a7      	b.n	800659c <_printf_i+0xf8>
 800664c:	4824      	ldr	r0, [pc, #144]	; (80066e0 <_printf_i+0x23c>)
 800664e:	e7e4      	b.n	800661a <_printf_i+0x176>
 8006650:	4615      	mov	r5, r2
 8006652:	e7bd      	b.n	80065d0 <_printf_i+0x12c>
 8006654:	682b      	ldr	r3, [r5, #0]
 8006656:	6826      	ldr	r6, [r4, #0]
 8006658:	6961      	ldr	r1, [r4, #20]
 800665a:	1d18      	adds	r0, r3, #4
 800665c:	6028      	str	r0, [r5, #0]
 800665e:	0635      	lsls	r5, r6, #24
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	d501      	bpl.n	8006668 <_printf_i+0x1c4>
 8006664:	6019      	str	r1, [r3, #0]
 8006666:	e002      	b.n	800666e <_printf_i+0x1ca>
 8006668:	0670      	lsls	r0, r6, #25
 800666a:	d5fb      	bpl.n	8006664 <_printf_i+0x1c0>
 800666c:	8019      	strh	r1, [r3, #0]
 800666e:	2300      	movs	r3, #0
 8006670:	6123      	str	r3, [r4, #16]
 8006672:	4615      	mov	r5, r2
 8006674:	e7bc      	b.n	80065f0 <_printf_i+0x14c>
 8006676:	682b      	ldr	r3, [r5, #0]
 8006678:	1d1a      	adds	r2, r3, #4
 800667a:	602a      	str	r2, [r5, #0]
 800667c:	681d      	ldr	r5, [r3, #0]
 800667e:	6862      	ldr	r2, [r4, #4]
 8006680:	2100      	movs	r1, #0
 8006682:	4628      	mov	r0, r5
 8006684:	f7f9 fda4 	bl	80001d0 <memchr>
 8006688:	b108      	cbz	r0, 800668e <_printf_i+0x1ea>
 800668a:	1b40      	subs	r0, r0, r5
 800668c:	6060      	str	r0, [r4, #4]
 800668e:	6863      	ldr	r3, [r4, #4]
 8006690:	6123      	str	r3, [r4, #16]
 8006692:	2300      	movs	r3, #0
 8006694:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006698:	e7aa      	b.n	80065f0 <_printf_i+0x14c>
 800669a:	6923      	ldr	r3, [r4, #16]
 800669c:	462a      	mov	r2, r5
 800669e:	4649      	mov	r1, r9
 80066a0:	4640      	mov	r0, r8
 80066a2:	47d0      	blx	sl
 80066a4:	3001      	adds	r0, #1
 80066a6:	d0ad      	beq.n	8006604 <_printf_i+0x160>
 80066a8:	6823      	ldr	r3, [r4, #0]
 80066aa:	079b      	lsls	r3, r3, #30
 80066ac:	d413      	bmi.n	80066d6 <_printf_i+0x232>
 80066ae:	68e0      	ldr	r0, [r4, #12]
 80066b0:	9b03      	ldr	r3, [sp, #12]
 80066b2:	4298      	cmp	r0, r3
 80066b4:	bfb8      	it	lt
 80066b6:	4618      	movlt	r0, r3
 80066b8:	e7a6      	b.n	8006608 <_printf_i+0x164>
 80066ba:	2301      	movs	r3, #1
 80066bc:	4632      	mov	r2, r6
 80066be:	4649      	mov	r1, r9
 80066c0:	4640      	mov	r0, r8
 80066c2:	47d0      	blx	sl
 80066c4:	3001      	adds	r0, #1
 80066c6:	d09d      	beq.n	8006604 <_printf_i+0x160>
 80066c8:	3501      	adds	r5, #1
 80066ca:	68e3      	ldr	r3, [r4, #12]
 80066cc:	9903      	ldr	r1, [sp, #12]
 80066ce:	1a5b      	subs	r3, r3, r1
 80066d0:	42ab      	cmp	r3, r5
 80066d2:	dcf2      	bgt.n	80066ba <_printf_i+0x216>
 80066d4:	e7eb      	b.n	80066ae <_printf_i+0x20a>
 80066d6:	2500      	movs	r5, #0
 80066d8:	f104 0619 	add.w	r6, r4, #25
 80066dc:	e7f5      	b.n	80066ca <_printf_i+0x226>
 80066de:	bf00      	nop
 80066e0:	080069b5 	.word	0x080069b5
 80066e4:	080069c6 	.word	0x080069c6

080066e8 <__sflush_r>:
 80066e8:	898a      	ldrh	r2, [r1, #12]
 80066ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066ee:	4605      	mov	r5, r0
 80066f0:	0710      	lsls	r0, r2, #28
 80066f2:	460c      	mov	r4, r1
 80066f4:	d458      	bmi.n	80067a8 <__sflush_r+0xc0>
 80066f6:	684b      	ldr	r3, [r1, #4]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	dc05      	bgt.n	8006708 <__sflush_r+0x20>
 80066fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80066fe:	2b00      	cmp	r3, #0
 8006700:	dc02      	bgt.n	8006708 <__sflush_r+0x20>
 8006702:	2000      	movs	r0, #0
 8006704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006708:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800670a:	2e00      	cmp	r6, #0
 800670c:	d0f9      	beq.n	8006702 <__sflush_r+0x1a>
 800670e:	2300      	movs	r3, #0
 8006710:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006714:	682f      	ldr	r7, [r5, #0]
 8006716:	6a21      	ldr	r1, [r4, #32]
 8006718:	602b      	str	r3, [r5, #0]
 800671a:	d032      	beq.n	8006782 <__sflush_r+0x9a>
 800671c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800671e:	89a3      	ldrh	r3, [r4, #12]
 8006720:	075a      	lsls	r2, r3, #29
 8006722:	d505      	bpl.n	8006730 <__sflush_r+0x48>
 8006724:	6863      	ldr	r3, [r4, #4]
 8006726:	1ac0      	subs	r0, r0, r3
 8006728:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800672a:	b10b      	cbz	r3, 8006730 <__sflush_r+0x48>
 800672c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800672e:	1ac0      	subs	r0, r0, r3
 8006730:	2300      	movs	r3, #0
 8006732:	4602      	mov	r2, r0
 8006734:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006736:	6a21      	ldr	r1, [r4, #32]
 8006738:	4628      	mov	r0, r5
 800673a:	47b0      	blx	r6
 800673c:	1c43      	adds	r3, r0, #1
 800673e:	89a3      	ldrh	r3, [r4, #12]
 8006740:	d106      	bne.n	8006750 <__sflush_r+0x68>
 8006742:	6829      	ldr	r1, [r5, #0]
 8006744:	291d      	cmp	r1, #29
 8006746:	d82b      	bhi.n	80067a0 <__sflush_r+0xb8>
 8006748:	4a29      	ldr	r2, [pc, #164]	; (80067f0 <__sflush_r+0x108>)
 800674a:	410a      	asrs	r2, r1
 800674c:	07d6      	lsls	r6, r2, #31
 800674e:	d427      	bmi.n	80067a0 <__sflush_r+0xb8>
 8006750:	2200      	movs	r2, #0
 8006752:	6062      	str	r2, [r4, #4]
 8006754:	04d9      	lsls	r1, r3, #19
 8006756:	6922      	ldr	r2, [r4, #16]
 8006758:	6022      	str	r2, [r4, #0]
 800675a:	d504      	bpl.n	8006766 <__sflush_r+0x7e>
 800675c:	1c42      	adds	r2, r0, #1
 800675e:	d101      	bne.n	8006764 <__sflush_r+0x7c>
 8006760:	682b      	ldr	r3, [r5, #0]
 8006762:	b903      	cbnz	r3, 8006766 <__sflush_r+0x7e>
 8006764:	6560      	str	r0, [r4, #84]	; 0x54
 8006766:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006768:	602f      	str	r7, [r5, #0]
 800676a:	2900      	cmp	r1, #0
 800676c:	d0c9      	beq.n	8006702 <__sflush_r+0x1a>
 800676e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006772:	4299      	cmp	r1, r3
 8006774:	d002      	beq.n	800677c <__sflush_r+0x94>
 8006776:	4628      	mov	r0, r5
 8006778:	f7ff fc96 	bl	80060a8 <_free_r>
 800677c:	2000      	movs	r0, #0
 800677e:	6360      	str	r0, [r4, #52]	; 0x34
 8006780:	e7c0      	b.n	8006704 <__sflush_r+0x1c>
 8006782:	2301      	movs	r3, #1
 8006784:	4628      	mov	r0, r5
 8006786:	47b0      	blx	r6
 8006788:	1c41      	adds	r1, r0, #1
 800678a:	d1c8      	bne.n	800671e <__sflush_r+0x36>
 800678c:	682b      	ldr	r3, [r5, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d0c5      	beq.n	800671e <__sflush_r+0x36>
 8006792:	2b1d      	cmp	r3, #29
 8006794:	d001      	beq.n	800679a <__sflush_r+0xb2>
 8006796:	2b16      	cmp	r3, #22
 8006798:	d101      	bne.n	800679e <__sflush_r+0xb6>
 800679a:	602f      	str	r7, [r5, #0]
 800679c:	e7b1      	b.n	8006702 <__sflush_r+0x1a>
 800679e:	89a3      	ldrh	r3, [r4, #12]
 80067a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067a4:	81a3      	strh	r3, [r4, #12]
 80067a6:	e7ad      	b.n	8006704 <__sflush_r+0x1c>
 80067a8:	690f      	ldr	r7, [r1, #16]
 80067aa:	2f00      	cmp	r7, #0
 80067ac:	d0a9      	beq.n	8006702 <__sflush_r+0x1a>
 80067ae:	0793      	lsls	r3, r2, #30
 80067b0:	680e      	ldr	r6, [r1, #0]
 80067b2:	bf08      	it	eq
 80067b4:	694b      	ldreq	r3, [r1, #20]
 80067b6:	600f      	str	r7, [r1, #0]
 80067b8:	bf18      	it	ne
 80067ba:	2300      	movne	r3, #0
 80067bc:	eba6 0807 	sub.w	r8, r6, r7
 80067c0:	608b      	str	r3, [r1, #8]
 80067c2:	f1b8 0f00 	cmp.w	r8, #0
 80067c6:	dd9c      	ble.n	8006702 <__sflush_r+0x1a>
 80067c8:	6a21      	ldr	r1, [r4, #32]
 80067ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80067cc:	4643      	mov	r3, r8
 80067ce:	463a      	mov	r2, r7
 80067d0:	4628      	mov	r0, r5
 80067d2:	47b0      	blx	r6
 80067d4:	2800      	cmp	r0, #0
 80067d6:	dc06      	bgt.n	80067e6 <__sflush_r+0xfe>
 80067d8:	89a3      	ldrh	r3, [r4, #12]
 80067da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067de:	81a3      	strh	r3, [r4, #12]
 80067e0:	f04f 30ff 	mov.w	r0, #4294967295
 80067e4:	e78e      	b.n	8006704 <__sflush_r+0x1c>
 80067e6:	4407      	add	r7, r0
 80067e8:	eba8 0800 	sub.w	r8, r8, r0
 80067ec:	e7e9      	b.n	80067c2 <__sflush_r+0xda>
 80067ee:	bf00      	nop
 80067f0:	dfbffffe 	.word	0xdfbffffe

080067f4 <_fflush_r>:
 80067f4:	b538      	push	{r3, r4, r5, lr}
 80067f6:	690b      	ldr	r3, [r1, #16]
 80067f8:	4605      	mov	r5, r0
 80067fa:	460c      	mov	r4, r1
 80067fc:	b913      	cbnz	r3, 8006804 <_fflush_r+0x10>
 80067fe:	2500      	movs	r5, #0
 8006800:	4628      	mov	r0, r5
 8006802:	bd38      	pop	{r3, r4, r5, pc}
 8006804:	b118      	cbz	r0, 800680e <_fflush_r+0x1a>
 8006806:	6a03      	ldr	r3, [r0, #32]
 8006808:	b90b      	cbnz	r3, 800680e <_fflush_r+0x1a>
 800680a:	f7ff fa47 	bl	8005c9c <__sinit>
 800680e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d0f3      	beq.n	80067fe <_fflush_r+0xa>
 8006816:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006818:	07d0      	lsls	r0, r2, #31
 800681a:	d404      	bmi.n	8006826 <_fflush_r+0x32>
 800681c:	0599      	lsls	r1, r3, #22
 800681e:	d402      	bmi.n	8006826 <_fflush_r+0x32>
 8006820:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006822:	f7ff fc3f 	bl	80060a4 <__retarget_lock_acquire_recursive>
 8006826:	4628      	mov	r0, r5
 8006828:	4621      	mov	r1, r4
 800682a:	f7ff ff5d 	bl	80066e8 <__sflush_r>
 800682e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006830:	07da      	lsls	r2, r3, #31
 8006832:	4605      	mov	r5, r0
 8006834:	d4e4      	bmi.n	8006800 <_fflush_r+0xc>
 8006836:	89a3      	ldrh	r3, [r4, #12]
 8006838:	059b      	lsls	r3, r3, #22
 800683a:	d4e1      	bmi.n	8006800 <_fflush_r+0xc>
 800683c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800683e:	f7ff fc32 	bl	80060a6 <__retarget_lock_release_recursive>
 8006842:	e7dd      	b.n	8006800 <_fflush_r+0xc>

08006844 <__swhatbuf_r>:
 8006844:	b570      	push	{r4, r5, r6, lr}
 8006846:	460c      	mov	r4, r1
 8006848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800684c:	2900      	cmp	r1, #0
 800684e:	b096      	sub	sp, #88	; 0x58
 8006850:	4615      	mov	r5, r2
 8006852:	461e      	mov	r6, r3
 8006854:	da0d      	bge.n	8006872 <__swhatbuf_r+0x2e>
 8006856:	89a3      	ldrh	r3, [r4, #12]
 8006858:	f013 0f80 	tst.w	r3, #128	; 0x80
 800685c:	f04f 0100 	mov.w	r1, #0
 8006860:	bf0c      	ite	eq
 8006862:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006866:	2340      	movne	r3, #64	; 0x40
 8006868:	2000      	movs	r0, #0
 800686a:	6031      	str	r1, [r6, #0]
 800686c:	602b      	str	r3, [r5, #0]
 800686e:	b016      	add	sp, #88	; 0x58
 8006870:	bd70      	pop	{r4, r5, r6, pc}
 8006872:	466a      	mov	r2, sp
 8006874:	f000 f848 	bl	8006908 <_fstat_r>
 8006878:	2800      	cmp	r0, #0
 800687a:	dbec      	blt.n	8006856 <__swhatbuf_r+0x12>
 800687c:	9901      	ldr	r1, [sp, #4]
 800687e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006882:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006886:	4259      	negs	r1, r3
 8006888:	4159      	adcs	r1, r3
 800688a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800688e:	e7eb      	b.n	8006868 <__swhatbuf_r+0x24>

08006890 <__smakebuf_r>:
 8006890:	898b      	ldrh	r3, [r1, #12]
 8006892:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006894:	079d      	lsls	r5, r3, #30
 8006896:	4606      	mov	r6, r0
 8006898:	460c      	mov	r4, r1
 800689a:	d507      	bpl.n	80068ac <__smakebuf_r+0x1c>
 800689c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80068a0:	6023      	str	r3, [r4, #0]
 80068a2:	6123      	str	r3, [r4, #16]
 80068a4:	2301      	movs	r3, #1
 80068a6:	6163      	str	r3, [r4, #20]
 80068a8:	b002      	add	sp, #8
 80068aa:	bd70      	pop	{r4, r5, r6, pc}
 80068ac:	ab01      	add	r3, sp, #4
 80068ae:	466a      	mov	r2, sp
 80068b0:	f7ff ffc8 	bl	8006844 <__swhatbuf_r>
 80068b4:	9900      	ldr	r1, [sp, #0]
 80068b6:	4605      	mov	r5, r0
 80068b8:	4630      	mov	r0, r6
 80068ba:	f7ff f8e9 	bl	8005a90 <_malloc_r>
 80068be:	b948      	cbnz	r0, 80068d4 <__smakebuf_r+0x44>
 80068c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068c4:	059a      	lsls	r2, r3, #22
 80068c6:	d4ef      	bmi.n	80068a8 <__smakebuf_r+0x18>
 80068c8:	f023 0303 	bic.w	r3, r3, #3
 80068cc:	f043 0302 	orr.w	r3, r3, #2
 80068d0:	81a3      	strh	r3, [r4, #12]
 80068d2:	e7e3      	b.n	800689c <__smakebuf_r+0xc>
 80068d4:	89a3      	ldrh	r3, [r4, #12]
 80068d6:	6020      	str	r0, [r4, #0]
 80068d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068dc:	81a3      	strh	r3, [r4, #12]
 80068de:	9b00      	ldr	r3, [sp, #0]
 80068e0:	6163      	str	r3, [r4, #20]
 80068e2:	9b01      	ldr	r3, [sp, #4]
 80068e4:	6120      	str	r0, [r4, #16]
 80068e6:	b15b      	cbz	r3, 8006900 <__smakebuf_r+0x70>
 80068e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068ec:	4630      	mov	r0, r6
 80068ee:	f000 f81d 	bl	800692c <_isatty_r>
 80068f2:	b128      	cbz	r0, 8006900 <__smakebuf_r+0x70>
 80068f4:	89a3      	ldrh	r3, [r4, #12]
 80068f6:	f023 0303 	bic.w	r3, r3, #3
 80068fa:	f043 0301 	orr.w	r3, r3, #1
 80068fe:	81a3      	strh	r3, [r4, #12]
 8006900:	89a3      	ldrh	r3, [r4, #12]
 8006902:	431d      	orrs	r5, r3
 8006904:	81a5      	strh	r5, [r4, #12]
 8006906:	e7cf      	b.n	80068a8 <__smakebuf_r+0x18>

08006908 <_fstat_r>:
 8006908:	b538      	push	{r3, r4, r5, lr}
 800690a:	4d07      	ldr	r5, [pc, #28]	; (8006928 <_fstat_r+0x20>)
 800690c:	2300      	movs	r3, #0
 800690e:	4604      	mov	r4, r0
 8006910:	4608      	mov	r0, r1
 8006912:	4611      	mov	r1, r2
 8006914:	602b      	str	r3, [r5, #0]
 8006916:	f7fa ffaa 	bl	800186e <_fstat>
 800691a:	1c43      	adds	r3, r0, #1
 800691c:	d102      	bne.n	8006924 <_fstat_r+0x1c>
 800691e:	682b      	ldr	r3, [r5, #0]
 8006920:	b103      	cbz	r3, 8006924 <_fstat_r+0x1c>
 8006922:	6023      	str	r3, [r4, #0]
 8006924:	bd38      	pop	{r3, r4, r5, pc}
 8006926:	bf00      	nop
 8006928:	200004b0 	.word	0x200004b0

0800692c <_isatty_r>:
 800692c:	b538      	push	{r3, r4, r5, lr}
 800692e:	4d06      	ldr	r5, [pc, #24]	; (8006948 <_isatty_r+0x1c>)
 8006930:	2300      	movs	r3, #0
 8006932:	4604      	mov	r4, r0
 8006934:	4608      	mov	r0, r1
 8006936:	602b      	str	r3, [r5, #0]
 8006938:	f7fa ffa9 	bl	800188e <_isatty>
 800693c:	1c43      	adds	r3, r0, #1
 800693e:	d102      	bne.n	8006946 <_isatty_r+0x1a>
 8006940:	682b      	ldr	r3, [r5, #0]
 8006942:	b103      	cbz	r3, 8006946 <_isatty_r+0x1a>
 8006944:	6023      	str	r3, [r4, #0]
 8006946:	bd38      	pop	{r3, r4, r5, pc}
 8006948:	200004b0 	.word	0x200004b0

0800694c <_init>:
 800694c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800694e:	bf00      	nop
 8006950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006952:	bc08      	pop	{r3}
 8006954:	469e      	mov	lr, r3
 8006956:	4770      	bx	lr

08006958 <_fini>:
 8006958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800695a:	bf00      	nop
 800695c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800695e:	bc08      	pop	{r3}
 8006960:	469e      	mov	lr, r3
 8006962:	4770      	bx	lr
